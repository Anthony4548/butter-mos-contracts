{
  "address": "0x5b1B76F2151b59c22751Dd0887F39684dA6e24fd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        }
      ],
      "name": "mapDepositIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tokenID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mapTokenRegister",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapTransferIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "toChainToken",
          "type": "bytes"
        }
      ],
      "name": "mapTransferOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "self",
          "type": "address"
        }
      ],
      "name": "_addressToBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "b",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "bys",
          "type": "bytes"
        }
      ],
      "name": "_bytesToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "addAuthToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "addManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainGasFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainGasFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "collectChainFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "logsHash",
          "type": "bytes"
        }
      ],
      "name": "decodeNearLog",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "executorId",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "token",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "from",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "order_id",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "from_chain",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to_chain",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "to",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "to_chain_token",
              "type": "bytes"
            }
          ],
          "internalType": "struct MAPCrossChainServiceRelay.nearTransferOutEvent",
          "name": "_outEvent",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "logsHash",
          "type": "bytes"
        }
      ],
      "name": "decodeTxLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes[]",
              "name": "topics",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MAPCrossChainServiceRelay.txLog[]",
          "name": "_txLogs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "receiptProof",
          "type": "bytes"
        }
      ],
      "name": "depositIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCenter",
      "outputs": [
        {
          "internalType": "contract IFeeCenter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getChainFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "out",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "getFeeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChainID",
          "type": "uint256"
        }
      ],
      "name": "getOrderID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_hexStr",
          "type": "bytes"
        }
      ],
      "name": "hexStrToBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_managerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightClientManager",
      "outputs": [
        {
          "internalType": "contract ILightClientManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mapDepositOutTopic",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mapToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mapTransferOutTopic",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nearDepositOut",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nearTransferOut",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orderList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "removeAuthToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "removeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_addr",
          "type": "bytes"
        }
      ],
      "name": "setBridageAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fee",
          "type": "address"
        }
      ],
      "name": "setFeeCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setIdTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_managerAddress",
          "type": "address"
        }
      ],
      "name": "setLightClientManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "setNearHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "selfToken",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "setTokenOtherChainDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_register",
          "type": "address"
        }
      ],
      "name": "setTokenRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tochain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setVaultBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "extra",
          "type": "bytes"
        }
      ],
      "name": "splitExtra",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "newExtra",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegister",
      "outputs": [
        {
          "internalType": "contract ITokenRegister",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transferFeeList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "receiptProof",
          "type": "bytes"
        }
      ],
      "name": "transferIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        }
      ],
      "name": "transferOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        }
      ],
      "name": "transferOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb8a465f0fd1a4f88bd924cfc861ba1c51f798c7b13db243169de228dc44f8ec2",
  "receipt": {
    "to": null,
    "from": "0xCBdb1Da4f99276b0c427776BDE93838Bc19386Cc",
    "contractAddress": "0x5b1B76F2151b59c22751Dd0887F39684dA6e24fd",
    "transactionIndex": 0,
    "gasUsed": "4869826",
    "logsBloom": "0x
    "blockHash": "0xb8d52c6e1c3e05aa66bec5740f0d917a88e7612e131b93961a7d047b644e0ebc",
    "transactionHash": "0xb8a465f0fd1a4f88bd924cfc861ba1c51f798c7b13db243169de228dc44f8ec2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 352343,
        "transactionHash": "0xb8a465f0fd1a4f88bd924cfc861ba1c51f798c7b13db243169de228dc44f8ec2",
        "address": "0x5b1B76F2151b59c22751Dd0887F39684dA6e24fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb8d52c6e1c3e05aa66bec5740f0d917a88e7612e131b93961a7d047b644e0ebc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 352343,
        "transactionHash": "0xb8a465f0fd1a4f88bd924cfc861ba1c51f798c7b13db243169de228dc44f8ec2",
        "address": "0x5b1B76F2151b59c22751Dd0887F39684dA6e24fd",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb8d52c6e1c3e05aa66bec5740f0d917a88e7612e131b93961a7d047b644e0ebc"
      }
    ],
    "blockNumber": 352343,
    "cumulativeGasUsed": "4869826",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "455e02f90d417fcee804d6dd31b69ce7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"}],\"name\":\"mapDepositIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mapTokenRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapTransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toChainToken\",\"type\":\"bytes\"}],\"name\":\"mapTransferOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"_addressToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bys\",\"type\":\"bytes\"}],\"name\":\"_bytesToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"addAuthToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainGasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collectChainFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"logsHash\",\"type\":\"bytes\"}],\"name\":\"decodeNearLog\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"executorId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"order_id\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"from_chain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to_chain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"to_chain_token\",\"type\":\"bytes\"}],\"internalType\":\"struct MAPCrossChainServiceRelay.nearTransferOutEvent\",\"name\":\"_outEvent\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"logsHash\",\"type\":\"bytes\"}],\"name\":\"decodeTxLog\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"topics\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MAPCrossChainServiceRelay.txLog[]\",\"name\":\"_txLogs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiptProof\",\"type\":\"bytes\"}],\"name\":\"depositIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCenter\",\"outputs\":[{\"internalType\":\"contract IFeeCenter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getChainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"getFeeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"getOrderID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_hexStr\",\"type\":\"bytes\"}],\"name\":\"hexStrToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightClientManager\",\"outputs\":[{\"internalType\":\"contract ILightClientManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapDepositOutTopic\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapTransferOutTopic\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nearDepositOut\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nearTransferOut\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"removeAuthToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_addr\",\"type\":\"bytes\"}],\"name\":\"setBridageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"}],\"name\":\"setFeeCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setIdTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"setLightClientManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setNearHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"selfToken\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setTokenOtherChainDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_register\",\"type\":\"address\"}],\"name\":\"setTokenRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tochain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVaultBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"}],\"name\":\"splitExtra\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newExtra\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegister\",\"outputs\":[{\"internalType\":\"contract ITokenRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferFeeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiptProof\",\"type\":\"bytes\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"}],\"name\":\"transferOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MAPCrossChainServiceRelay.sol\":\"MAPCrossChainServiceRelay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MAPCrossChainServiceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interface/IWToken.sol\\\";\\nimport \\\"./interface/IMAPToken.sol\\\";\\nimport \\\"./interface/IFeeCenter.sol\\\";\\nimport \\\"./utils/Role.sol\\\";\\nimport \\\"./interface/IFeeCenter.sol\\\";\\nimport \\\"./interface/IVault.sol\\\";\\nimport \\\"./utils/TransferHelper.sol\\\";\\nimport \\\"./interface/IMCSRelay.sol\\\";\\nimport \\\"./utils/RLPReader.sol\\\";\\nimport \\\"./interface/ITokenRegister.sol\\\";\\nimport \\\"./interface/ILightClientManager.sol\\\";\\n\\n\\ncontract MAPCrossChainServiceRelay is ReentrancyGuard, Role, Initializable, Pausable, IMCSRelay {\\n    using SafeMath for uint;\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    uint256 public nonce;\\n\\n    IERC20 public mapToken;\\n    //    ILightNode public lightNode;\\n    ITokenRegister public tokenRegister;\\n    ILightClientManager public lightClientManager;\\n    IFeeCenter public feeCenter;\\n\\n    address public wToken;        // native wrapped token\\n\\n    uint256 public selfChainId;\\n\\n    // mapping(bytes32 => address) public tokenRegister;\\n    //Gas transfer fee charged by the target chain\\n    mapping(uint256 => uint) public chainGasFee;\\n    mapping(bytes32 => bool) public orderList;\\n\\n    uint256 public chainGasFees;\\n\\n    uint256 public transferFee;    // tranfer fee for every token, one in a million\\n    mapping(address => uint) public transferFeeList;\\n\\n    mapping(address => bool) public authToken;\\n\\n    mapping(uint256 => mapping(address => uint)) public vaultBalance;\\n\\n    mapping(bytes => uint256) bridgeAddress;\\n\\n    mapping(uint256 => uint) ChainIdTable;\\n\\n    mapping(bytes => mapping(uint256 => uint256)) tokenOtherChainDecimals;\\n\\n    struct txLog {\\n        address addr;\\n        bytes[] topics;\\n        bytes data;\\n    }\\n\\n    struct nearTransferOutEvent {\\n        bytes token;\\n        bytes from;\\n        bytes order_id;\\n        uint256 from_chain;\\n        uint256 to_chain;\\n        bytes to;\\n        uint256 amount;\\n        bytes to_chain_token;\\n    }\\n\\n    event mapTransferOut(bytes token, bytes from, bytes32 orderId,\\n        uint256 fromChain, uint256 toChain, bytes to, uint256 amount, bytes toChainToken);\\n\\n    event mapTransferIn(address indexed token, bytes indexed from, bytes32 indexed orderId,\\n        uint256 fromChain, uint256 toChain, address to, uint256 amount);\\n\\n    event mapTokenRegister(bytes32 tokenID, address token);\\n    event mapDepositIn(address token, bytes from, address indexed to,\\n        bytes32 orderId, uint256 amount, uint256 fromChain);\\n\\n    bytes32 public mapTransferOutTopic;\\n    bytes32 public nearTransferOut;\\n    bytes32 public mapDepositOutTopic;\\n    bytes32 public nearDepositOut;\\n\\n    function initialize(address _wToken, address _mapToken, address _managerAddress) public initializer {\\n        uint256 _chainId;\\n        assembly {_chainId := chainid()}\\n        selfChainId = _chainId;\\n        wToken = _wToken;\\n        mapToken = IERC20(_mapToken);\\n        lightClientManager = ILightClientManager(_managerAddress);\\n        mapTransferOutTopic = keccak256(bytes('mapTransferOut(bytes,bytes,bytes32,uint256,uint256,bytes,uint256,bytes)'));\\n        mapDepositOutTopic = keccak256(bytes('mapDepositOut(bytes,address,bytes,bytes32,uint256)'));\\n        nearTransferOut = 0x4e87426fdd31a6df84975ed344b2c3fbd45109085f1557dff1156b300f135df8;\\n        nearDepositOut = '';\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == wToken, \\\"only wToken\\\");\\n    }\\n\\n\\n    modifier checkOrder(bytes32 orderId) {\\n        require(!orderList[orderId], \\\"order exist\\\");\\n        orderList[orderId] = true;\\n        _;\\n    }\\n\\n    function setVaultBalance(uint256 tochain, address token, uint256 amount) external onlyManager {\\n        vaultBalance[tochain][token] = amount;\\n    }\\n\\n    function setTokenRegister(address _register) external onlyManager {\\n        tokenRegister = ITokenRegister(_register);\\n    }\\n\\n    function setLightClientManager(address _managerAddress) external onlyManager {\\n        lightClientManager = ILightClientManager(_managerAddress);\\n    }\\n\\n    function setBridageAddress(uint256 _chainId, bytes memory _addr) external onlyManager {\\n        bridgeAddress[_addr] = _chainId;\\n    }\\n\\n    function setIdTable(uint256 _chainId, uint256 _id) external onlyManager {\\n        ChainIdTable[_id] = _chainId;\\n    }\\n\\n    function setNearHash(bytes32 _hash) external onlyManager {\\n        nearTransferOut = _hash;\\n    }\\n\\n    function setPause() external onlyManager {\\n        _pause();\\n    }\\n\\n    function setUnpause() external onlyManager {\\n        _unpause();\\n    }\\n\\n    function setTokenOtherChainDecimals(bytes memory selfToken, uint256 chainId, uint256 decimals) external onlyManager {\\n        tokenOtherChainDecimals[selfToken][chainId] = decimals;\\n    }\\n\\n    function getOrderID(address token, address from, bytes memory to, uint256 amount, uint256 toChainID) public returns (bytes32){\\n        return keccak256(abi.encodePacked(nonce++, from, to, token, amount, selfChainId, toChainID));\\n    }\\n\\n    function setFeeCenter(address fee) external onlyManager {\\n        feeCenter = IFeeCenter(fee);\\n    }\\n\\n    function addAuthToken(address[] memory token) external onlyManager {\\n        for (uint256 i = 0; i < token.length; i++) {\\n            authToken[token[i]] = true;\\n        }\\n    }\\n\\n    function removeAuthToken(address[] memory token) external onlyManager {\\n        for (uint256 i = 0; i < token.length; i++) {\\n            authToken[token[i]] = false;\\n        }\\n    }\\n\\n    function checkAuthToken(address token) internal view returns (bool) {\\n        return authToken[token];\\n    }\\n\\n    function getFeeValue(uint256 amount, uint256 rate) pure public returns (uint){\\n        return amount.mul(rate).div(1000000);\\n    }\\n\\n    function getToChainAmount(bytes memory token, uint256 fromChain, uint256 toChain, uint256 amount)\\n    internal view returns (uint256){\\n        uint256 decimalsFrom = tokenOtherChainDecimals[token][fromChain];\\n        uint256 decimalsTo = tokenOtherChainDecimals[token][toChain];\\n        return amount.mul(10 ** decimalsTo).div(10 ** decimalsFrom);\\n    }\\n\\n    function getToChainAmountOther(bytes memory token, uint256 fromChain, uint256 toChain, uint256 amount)\\n    internal view returns (uint256){\\n        bytes memory tokenMap = getMapToken(token, fromChain);\\n        return getToChainAmount(tokenMap, fromChain, toChain, amount);\\n    }\\n\\n    function getMapToken(bytes memory fromToken, uint256 fromChain)\\n    internal view returns (bytes memory){\\n        return tokenRegister.getTargetToken(fromChain, fromToken, selfChainId);\\n    }\\n\\n    function collectChainFee(uint256 amount, address token) public {\\n        address transferToken = token;\\n        if (token == address(0)) {\\n            transferToken = wToken;\\n        }\\n        uint256 remaining = amount;\\n        if (amount > 0) {\\n            (address feeToken,uint256 rate) = feeCenter.getDistribute(0, token);\\n            uint256 out = getFeeValue(amount, rate);\\n            if (feeToken != address(0)) {\\n                TransferHelper.safeTransfer(transferToken, feeToken, out);\\n                remaining -= out;\\n            }\\n            (feeToken, rate) = feeCenter.getDistribute(1, token);\\n            out = getFeeValue(amount, rate);\\n            TransferHelper.safeTransfer(transferToken, feeToken, out);\\n            remaining -= out;\\n            if (remaining > 0) {\\n                TransferHelper.safeTransfer(transferToken, address(feeCenter), remaining);\\n            }\\n        }\\n    }\\n\\n    function setVaultValue(uint256 amount, uint256 fromChain, uint256 toChain, address token) internal {\\n        if (fromChain != selfChainId) {\\n            vaultBalance[fromChain][token] += amount;\\n        }\\n        if (toChain != selfChainId) {\\n            vaultBalance[toChain][token] -= amount;\\n        }\\n    }\\n\\n\\n    function getChainFee(uint256 toChainId, address token, uint256 amount) public view returns (uint256 out){\\n        if (token == address(0)) {\\n            token = wToken;\\n        }\\n        return feeCenter.getTokenFee(toChainId, token, amount);\\n    }\\n\\n\\n    function transferIn(uint256 chainId, bytes memory receiptProof) external override {\\n        (bool sucess,string memory message,bytes memory logArray) = lightClientManager.verifyProofData(chainId, receiptProof);\\n        require(sucess, message);\\n        //near\\n\\n        if (chainId == ChainIdTable[1]) {\\n            (bytes memory mcsContract,nearTransferOutEvent memory _outEvent) = decodeNearLog(logArray);\\n            require(bridgeAddress[mcsContract] > 0, \\\"Illegal across the chain\\\");\\n            bytes memory toChainToken = tokenRegister.getTargetToken(_outEvent.from_chain, _outEvent.token, _outEvent.to_chain);\\n            uint256 outAmount = getToChainAmountOther(_outEvent.token, _outEvent.from_chain, _outEvent.to_chain, _outEvent.amount);\\n            if (_outEvent.to_chain == selfChainId) {\\n                address payable toAddress = payable(_bytesToAddress(_outEvent.to));\\n                _transferIn(_bytesToAddress(toChainToken), _outEvent.from, toAddress, outAmount,\\n                    bytes32(_outEvent.order_id), _outEvent.from_chain, _outEvent.to_chain);\\n            } else {\\n                _transferInOtherChain(_outEvent.token, _outEvent.from, _outEvent.to, outAmount,\\n                    bytes32(_outEvent.order_id), _outEvent.from_chain, _outEvent.to_chain, toChainToken);\\n            }\\n        } else {\\n\\n            txLog[] memory logs = decodeTxLog(logArray);\\n\\n            for (uint256 i = 0; i < logs.length; i++) {\\n                txLog memory log = logs[i];\\n                bytes32 topic = abi.decode(log.topics[0], (bytes32));\\n                bytes memory mcsAddress = _addressToBytes(log.addr);\\n                if (topic == mapTransferOutTopic) {\\n                    require(bridgeAddress[mcsAddress] > 0, \\\"Illegal across the chain\\\");\\n                    //                address token = abi.decode(log.topics[1], (address));\\n                    // address from = abi.decode(log.topics[2], (address));\\n                    // bytes32 orderId = abi.decode(log.topics[3], (bytes32));\\n                    (bytes memory fromToken,bytes memory from,bytes32 orderId,uint256 fromChain,\\n                    uint256 toChain, bytes memory to, uint256 amount,)\\n                    = abi.decode(log.data, (bytes, bytes, bytes32, uint, uint, bytes, uint, bytes));\\n                    bytes memory toChainToken = tokenRegister.getTargetToken(fromChain, fromToken, toChain);\\n                    uint256 outAmount = getToChainAmountOther(fromToken, fromChain, toChain, amount);\\n                    if (toChain == selfChainId) {\\n                        address payable toAddress = payable(_bytesToAddress(to));\\n                        _transferIn(_bytesToAddress(toChainToken), from, toAddress, outAmount, orderId, fromChain, toChain);\\n                    } else {\\n                        _transferInOtherChain(fromToken, from, to, outAmount, orderId, fromChain, toChain, toChainToken);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function transferOut(address toContract, uint256 toChain, bytes memory data) external override {\\n\\n    }\\n\\n    function transferOutToken(address token, bytes memory to, uint256 amount, uint256 toChainId) external override whenNotPaused {\\n        require(IERC20(token).balanceOf(msg.sender) >= amount, \\\"balance too low\\\");\\n        TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        uint256 fee = getChainFee(toChainId, token, amount);\\n        uint256 outAmount = amount.sub(fee);\\n        if (checkAuthToken(token)) {\\n            IMAPToken(token).burn(outAmount);\\n        }\\n        collectChainFee(fee, token);\\n        transferFeeList[token] = transferFeeList[token].add(amount).sub(outAmount);\\n        bytes32 orderId = getOrderID(token, msg.sender, to, outAmount, toChainId);\\n        setVaultValue(amount, selfChainId, toChainId, token);\\n        bytes memory toTokenAddress = tokenRegister.getTargetToken(selfChainId, _addressToBytes(token), toChainId);\\n        outAmount = getToChainAmount(_addressToBytes(token), selfChainId, toChainId, outAmount);\\n        emit mapTransferOut(_addressToBytes(token), _addressToBytes(msg.sender), orderId, selfChainId, toChainId, to, outAmount, toTokenAddress);\\n    }\\n\\n    function transferOutNative(bytes memory to, uint256 toChainId) external override payable whenNotPaused {\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"value too low\\\");\\n        IWToken(wToken).deposit{value : amount}();\\n        uint256 fee = getChainFee(toChainId, address(0), amount);\\n        uint256 outAmount = amount.sub(fee);\\n        collectChainFee(fee, address(0));\\n        transferFeeList[address(0)] = transferFeeList[address(0)].add(amount).sub(outAmount);\\n        bytes32 orderId = getOrderID(address(0), msg.sender, to, outAmount, toChainId);\\n        setVaultValue(amount, selfChainId, toChainId, address(0));\\n        bytes memory token = tokenRegister.getTargetToken(selfChainId, _addressToBytes(address(0)), toChainId);\\n        outAmount = getToChainAmount(_addressToBytes(address(0)), selfChainId, toChainId, outAmount);\\n        emit mapTransferOut(_addressToBytes(address(0)), _addressToBytes(msg.sender), orderId, selfChainId, toChainId, to, outAmount, token);\\n    }\\n\\n    function _transferIn(address token, bytes memory from, address payable to, uint256 amount, bytes32 orderId, uint256 fromChain, uint256 toChain)\\n    internal checkOrder(orderId) nonReentrant whenNotPaused {\\n        uint256 fee = getChainFee(toChain, token, amount);\\n        uint256 outAmount = amount.sub(fee);\\n        if (toChain == selfChainId) {\\n            if (token == address(0)) {\\n                TransferHelper.safeWithdraw(wToken, outAmount);\\n                TransferHelper.safeTransferETH(to, outAmount);\\n            } else if (checkAuthToken(token)) {\\n                IMAPToken(token).mint(address(this), amount);\\n                TransferHelper.safeTransfer(token, to, amount);\\n            } else {\\n                require(IERC20(token).balanceOf(address(this)) >= amount, \\\"balance too low\\\");\\n                TransferHelper.safeTransfer(token, to, outAmount);\\n            }\\n            collectChainFee(fee, token);\\n            emit mapTransferIn(token, from, orderId, fromChain, toChain, to, outAmount);\\n        }\\n        setVaultValue(amount, fromChain, toChain, token);\\n    }\\n\\n    function _transferInOtherChain(bytes memory sourceToken, bytes memory from, bytes memory to, uint256 amount,\\n        bytes32 orderId, uint256 fromChain, uint256 toChain, bytes memory toChainToken)\\n    internal checkOrder(orderId) nonReentrant whenNotPaused {\\n        address token = _bytesToAddress(toChainToken);\\n        uint256 fee = getChainFee(toChain, token, amount);\\n        uint256 outAmount = amount.sub(fee);\\n        if (checkAuthToken(token)) {\\n            IMAPToken(token).mint(address(this), amount);\\n            IMAPToken(token).burn(outAmount);\\n        }\\n        emit mapTransferOut(sourceToken, from, orderId, fromChain, toChain, to, outAmount, toChainToken);\\n        address _token = _bytesToAddress(getMapToken(sourceToken, fromChain));\\n        setVaultValue(amount, fromChain, toChain, _token);\\n    }\\n\\n\\n    function depositIn(uint256 _fromChain, bytes memory receiptProof) external payable override nonReentrant whenNotPaused {\\n        (bool sucess,string memory message,bytes memory logArray) = lightClientManager.verifyProofData(_fromChain, receiptProof);\\n        require(sucess, message);\\n\\n        if (_fromChain == ChainIdTable[1]) {\\n            //todo will near\\n        } else {\\n            txLog[] memory logs = decodeTxLog(logArray);\\n\\n            for (uint256 i = 0; i < logs.length; i++) {\\n                if (abi.decode(logs[i].topics[0], (bytes32)) == mapDepositOutTopic) {\\n                    require(bridgeAddress[_addressToBytes(logs[i].addr)] > 0, \\\"Illegal across the chain\\\");\\n                    (address fromToken, bytes memory from,address to,bytes32 orderId,uint256 amount)\\n                    = abi.decode(logs[i].data, (address, bytes, address, bytes32, uint256));\\n                    uint256 fromChain = _fromChain;\\n                    bytes memory _fromBytes = _addressToBytes(fromToken);\\n                    _fromBytes = tokenRegister.getTargetToken(fromChain, _fromBytes, selfChainId);\\n                    address token = _bytesToAddress(_fromBytes);\\n                    _depositIn(token, from, payable(to), amount, orderId, fromChain);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _depositIn(address token, bytes memory from, address payable to, uint256 amount, bytes32 orderId, uint256 fromChain)\\n    internal checkOrder(orderId) {\\n        if (token == address(0)) {\\n            IWToken(wToken).deposit{value : amount}();\\n            token == wToken;\\n        }\\n        address vaultTokenAddress = feeCenter.getVaultToken(token);\\n        require(vaultTokenAddress != address(0), \\\"only vault token\\\");\\n        if (checkAuthToken(token)) {\\n            IMAPToken(token).mint(vaultTokenAddress, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, vaultTokenAddress, amount);\\n        }\\n        IVault(vaultTokenAddress).stakingTo(amount, to);\\n        vaultBalance[fromChain][token] += amount;\\n        emit mapDepositIn(token, from, to, orderId, amount, fromChain);\\n    }\\n\\n\\n    function withdraw(address token, address payable receiver, uint256 amount) public onlyManager {\\n        if (token == address(0)) {\\n            IWToken(wToken).withdraw(amount);\\n            receiver.transfer(amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, receiver, amount);\\n        }\\n    }\\n\\n    function _bytesToAddress(bytes memory bys) public pure returns (address addr){\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    function _addressToBytes(address self) public pure returns (bytes memory b) {\\n        b = abi.encodePacked(self);\\n    }\\n\\n    function decodeTxLog(bytes memory logsHash)\\n    public\\n    pure\\n    returns (txLog[] memory _txLogs){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n        _txLogs = new txLog[](ls.length);\\n        for (uint256 i = 0; i < ls.length; i++) {\\n            bytes[] memory topic = new bytes[](ls[i].toList()[1].toList().length);\\n            for (uint256 j = 0; j < ls[i].toList()[1].toList().length; j++) {\\n                topic[j] = ls[i].toList()[1].toList()[j].toBytes();\\n            }\\n            _txLogs[i] = txLog({\\n            addr : ls[i].toList()[0].toAddress(),\\n            topics : topic,\\n            data : ls[i].toList()[2].toBytes()\\n            });\\n        }\\n    }\\n\\n    function decodeNearLog(bytes memory logsHash)\\n    public\\n    view\\n    returns (bytes memory executorId, nearTransferOutEvent memory _outEvent){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n\\n        executorId = ls[0].toBytes();\\n\\n        bytes[] memory logs = new bytes[](ls[1].toList().length);\\n        for (uint256 i = 0; i < ls[1].toList().length; i++) {\\n\\n            logs[i] = ls[1].toList()[i].toBytes();\\n\\n        }\\n        bytes memory log;\\n        for (uint256 i = 0; i < logs.length; i++) {\\n\\n            (bytes memory temp) = splitExtra(logs[i]);\\n            if (keccak256(temp) == nearTransferOut) {\\n                log = hexStrToBytes(logs[i]);\\n            }\\n        }\\n\\n        RLPReader.RLPItem[] memory logList = log.toRlpItem().toList();\\n\\n        _outEvent = nearTransferOutEvent({\\n        token : logList[0].toBytes(),\\n        from : logList[1].toBytes(),\\n        order_id : logList[2].toBytes(),\\n        from_chain : logList[3].toUint(),\\n        to_chain : logList[4].toUint(),\\n        to : logList[5].toBytes(),\\n        amount : logList[6].toUint(),\\n        to_chain_token : logList[7].toBytes()\\n        });\\n\\n    }\\n\\n\\n    function hexStrToBytes(bytes memory _hexStr)\\n    public\\n    pure\\n    returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            _hexStr.length % 2 != 0 ||\\n            _hexStr.length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes(_hexStr.length / 2 - 32);\\n\\n        for (uint256 i = 64; i < _hexStr.length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(_hexStr[i]) >= 48 && uint8(_hexStr[i]) <= 57\\n            ) tetrad1 = uint8(_hexStr[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(_hexStr[i + 1]) >= 48 &&\\n                uint8(_hexStr[i + 1]) <= 57\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(_hexStr[i]) >= 65 && uint8(_hexStr[i]) <= 70\\n            ) tetrad1 = uint8(_hexStr[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(_hexStr[i + 1]) >= 65 &&\\n                uint8(_hexStr[i + 1]) <= 70\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(_hexStr[i]) >= 97 &&\\n                uint8(_hexStr[i]) <= 102\\n            ) tetrad1 = uint8(_hexStr[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(_hexStr[i + 1]) >= 97 &&\\n                uint8(_hexStr[i + 1]) <= 102\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 32] = bytes1(16 * tetrad1 + tetrad2);\\n\\n\\n        }\\n\\n        return bytes_array;\\n    }\\n\\n\\n    function splitExtra(bytes memory extra)\\n    public\\n    pure\\n    returns (bytes memory newExtra){\\n        newExtra = new bytes(64);\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < extra.length; i++) {\\n            if (i < 64) {\\n                newExtra[n] = extra[i];\\n            }\\n            n = n + 1;\\n        }\\n    }\\n\\n\\n}\",\"keccak256\":\"0xf1995c353cb05c2868751c7ef95f56566f1512438a685ef9bf1086c1093159ec\",\"license\":\"MIT\"},\"contracts/interface/IFeeCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeCenter {\\n    struct gasFee{\\n        uint lowest;\\n        uint highest;\\n        //must div 10000\\n        uint proportion;\\n    }\\n\\n    struct Rate{\\n        address feeAddress;\\n        uint rate;\\n    }\\n\\n    function getTokenFee(uint to, address token, uint amount) external view returns (uint fee);\\n    function getVaultToken(address token) external view returns(address vault);\\n    function doDistribute(address token,uint amount) external;\\n    function getDistribute(uint id, address token) external view  returns(address feeAddress, uint rate);\\n}\",\"keccak256\":\"0xa0d5d22e945cdc1231b626e232c547b704ca86a87d1af2a79dd24aecdb403972\",\"license\":\"MIT\"},\"contracts/interface/ILightClientManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILightClientManager {\\n    function updateBlockHeader(uint256 _chainId, bytes memory _blockHeader) external;\\n    function register(uint256 _chainId, address _contract) external;\\n    function verifyProofData(uint _chainId, bytes memory _receiptProof) external view returns (bool success, string memory message,bytes memory logs);\\n}\",\"keccak256\":\"0xbbb228ea3a851372f46c61856d773cb1ec5fcbbc9c0a2e78f21761a9e32e9e5c\",\"license\":\"MIT\"},\"contracts/interface/IMAPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IMAPToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xc6b2323f7c7d558e1d3c81685f49c8e269cee8673a1720bf067cae477296dfe1\",\"license\":\"MIT\"},\"contracts/interface/IMCSRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMCSRelay {\\n    function transferIn(uint fromChain, bytes memory receiptProof) external;\\n    function transferOut(address toContract, uint toChain, bytes memory data) external;\\n    function transferOutToken(address token, bytes memory to, uint amount, uint toChain) external;\\n    function transferOutNative(bytes memory to, uint toChain) external payable;\\n    function depositIn(uint256 fromChain, bytes memory receiptProof) external payable;\\n}\",\"keccak256\":\"0x707e5a76eeaa3dcd6e7ff2485a38f0b17a326c3cb86add28fb48e4bb1d4c47e8\",\"license\":\"MIT\"},\"contracts/interface/ITokenRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenRegister {\\n    function sourceCorrespond(uint256 sourceChainID, bytes memory sourceMapToken) external view returns (bytes memory mapToken);\\n\\n    function mapCorrespond(uint256 sourceChainID, bytes memory sourceMapToken) external view returns (bytes memory sourceToken);\\n\\n    function sourceBinding(uint256 sourceChainID, bytes memory sourceMapToken) external view returns (bytes memory mapToken);\\n\\n    function getTargetToken(uint256 sourceChain, bytes memory sourceToken, uint256 targetChain) external view returns (bytes memory mapToken);\\n\\n    function regToken(uint256 sourceChain, bytes memory sourceMapToken, bytes memory mapToken) external;\\n\\n    function regTokenSource(bytes memory sourceToken, bytes memory sourceMapToken) external;\\n}\",\"keccak256\":\"0x79e25aaf0887e6fdbdd35640674b8ac828ac5ec882797efc92f33f1e274778ac\",\"license\":\"MIT\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function staking(uint amount) external;\\n\\n    function stakingTo(uint amount, address to) external;\\n\\n    function withdraw(uint amount) external;\\n}\",\"keccak256\":\"0xf58ed798b87c88873ea31f76473c6b4f71d4023367ea9eda3023483214130137\",\"license\":\"MIT\"},\"contracts/interface/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWToken {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2da7c3e4a512a8badc708e89e803bdfe2fac82fee398ba7f40796e190a109256\",\"license\":\"MIT\"},\"contracts/utils/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.7.1;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x56fe1a87ad74f53df3f7c9458add3fac6a05eff31787f02aa3fa4608ac194058\",\"license\":\"MIT\"},\"contracts/utils/Role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Role is AccessControl{\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    constructor(){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    modifier onlyManager(){\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Caller is not a manager\\\");\\n        _;\\n    }\\n\\n    function addManager(address manager) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _setupRole(MANAGER_ROLE, manager);\\n    }\\n\\n    function removeManager(address manager) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _revokeRole(MANAGER_ROLE,manager);\\n    }\\n}\",\"keccak256\":\"0x6fea553cff3c6fd23fc5ebb3ffcb12720a208a23e7e37f7679e163c6702a30ff\",\"license\":\"MIT\"},\"contracts/utils/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary TransferHelper {\\n    function safeWithdraw(address wtoken, uint value) internal {\\n        (bool success, bytes memory data) = wtoken.call(abi.encodeWithSelector(0x2e1a7d4d, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: WiTHDRAW_FAILED');\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0xe2376c5a42fa138426773d1c0e81c4323751ec295c3cee0020fc8be5c25fa0a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506001600090815562000025903362000063565b620000517f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083362000063565b6002805462ff000019169055620000fb565b6200006f828262000073565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166200006f5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6155d3806200010b6000396000f3fe6080604052600436106103855760003560e01c80638bc67517116101d1578063bca6760c11610102578063d24c6944116100a0578063e3257fc71161006f578063e3257fc714610ae3578063e5ff943314610b03578063e6984f8d14610b23578063ec87621c14610b3957600080fd5b8063d24c694414610a6e578063d431b1ac14610a8e578063d547741f14610aa3578063d9caed1214610ac357600080fd5b8063c3543b5c116100dc578063c3543b5c14610a02578063c6725e3b14610a18578063cb0ff83414610a38578063cc9e3e8914610a5857600080fd5b8063bca6760c146109a2578063bf5765ff146109c2578063c0c53b8b146109e257600080fd5b8063ab41a6ce1161016f578063af65363611610149578063af6536361461090f578063affed0e01461093f578063b2f177b314610955578063bbe359481461098257600080fd5b8063ab41a6ce146108a1578063ac18de43146108d9578063acb2ad6f146108f957600080fd5b8063981aff4e116101ab578063981aff4e14610811578063a217fddf14610831578063a3b2093114610846578063a8f8c2931461087457600080fd5b80638bc67517146107b157806391d14854146107d15780639485d293146107f157600080fd5b806336568abe116102b65780636b7ca9f31161025457806378f88fd61161022357806378f88fd614610744578063835850f914610764578063848cb5c614610786578063882940e31461079b57600080fd5b80636b7ca9f3146106ce578063721d839e146106e457806375b2e6b914610704578063789728251461072457600080fd5b80633d4a2f6e116102905780633d4a2f6e1461064d5780633ea549a2146106605780635c975abb146106805780636af6400d1461069e57600080fd5b806336568abe146105ed578063367cf0d41461060d57806338c6cc4c1461062d57600080fd5b80632dd56e91116103235780632f5c5d5e116102fd5780632f5c5d5e1461056a578063306bda9f1461058a57806332a57900146105a05780633383b99f146105c057600080fd5b80632dd56e91146105175780632e7ec23f146105375780632f2ff15d1461054a57600080fd5b8063247e16bf1161035f578063247e16bf14610478578063248a9ca3146104985780632982edbe146104d75780632d06177a146104f757600080fd5b806301ffc9a7146103de5780630babd8641461041357806311d17f531461044b57600080fd5b366103d9576008546001600160a01b031633146103d75760405162461bcd60e51b815260206004820152600b60248201526a37b7363c903baa37b5b2b760a91b60448201526064015b60405180910390fd5b005b600080fd5b3480156103ea57600080fd5b506103fe6103f9366004614ab9565b610b5b565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b50600854610433906001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b34801561045757600080fd5b5061046b610466366004614ae3565b610b92565b60405161040a9190614f7c565b34801561048457600080fd5b506103d7610493366004614cd6565b610c33565b3480156104a457600080fd5b506104c96104b3366004614a57565b6000908152600160208190526040909120015490565b60405190815260200161040a565b3480156104e357600080fd5b506104c96104f2366004614caf565b610c8c565b34801561050357600080fd5b506103d7610512366004614671565b610d40565b34801561052357600080fd5b506103d7610532366004614671565b610d68565b6103d7610545366004614cd6565b610dbe565b34801561055657600080fd5b506103d7610565366004614a89565b6110ef565b34801561057657600080fd5b506103d7610585366004614671565b611116565b34801561059657600080fd5b506104c960175481565b3480156105ac57600080fd5b506103d76105bb366004614d1c565b61116c565b3480156105cc57600080fd5b506105e06105db366004614ae3565b6111b1565b60405161040a9190614ea0565b3480156105f957600080fd5b506103d7610608366004614a89565b61143e565b34801561061957600080fd5b506104c96106283660046147ac565b6114b8565b34801561063957600080fd5b5061046b610648366004614ae3565b61150c565b6103d761065b366004614c1e565b6119f4565b34801561066c57600080fd5b50600554610433906001600160a01b031681565b34801561068c57600080fd5b5060025462010000900460ff166103fe565b3480156106aa57600080fd5b506103fe6106b9366004614a57565b600b6020526000908152604090205460ff1681565b3480156106da57600080fd5b506104c960165481565b3480156106f057600080fd5b506103d76106ff366004614671565b611c8b565b34801561071057600080fd5b50600754610433906001600160a01b031681565b34801561073057600080fd5b50600654610433906001600160a01b031681565b34801561075057600080fd5b506104c961075f366004614d1c565b611ce1565b34801561077057600080fd5b5061043361077f366004614ae3565b6014015190565b34801561079257600080fd5b506103d7611cfa565b3480156107a757600080fd5b506104c960155481565b3480156107bd57600080fd5b506103d76107cc366004614904565b611d38565b3480156107dd57600080fd5b506103fe6107ec366004614a89565b611dd4565b3480156107fd57600080fd5b50600454610433906001600160a01b031681565b34801561081d57600080fd5b506103d761082c36600461481f565b611dff565b34801561083d57600080fd5b506104c9600081565b34801561085257600080fd5b50610866610861366004614ae3565b612107565b60405161040a929190615006565b34801561088057600080fd5b506104c961088f366004614671565b600e6020526000908152604090205481565b3480156108ad57600080fd5b506104c96108bc366004614a89565b601060209081526000928352604080842090915290825290205481565b3480156108e557600080fd5b506103d76108f4366004614671565b612422565b34801561090557600080fd5b506104c9600d5481565b34801561091b57600080fd5b506103fe61092a366004614671565b600f6020526000908152604090205460ff1681565b34801561094b57600080fd5b506104c960035481565b34801561096157600080fd5b506104c9610970366004614a57565b600a6020526000908152604090205481565b34801561098e57600080fd5b506103d761099d366004614904565b612446565b3480156109ae57600080fd5b506103d76109bd366004614c62565b6124e2565b3480156109ce57600080fd5b506103d76109dd3660046148ac565b505050565b3480156109ee57600080fd5b506103d76109fd366004614761565b61254f565b348015610a0e57600080fd5b506104c960145481565b348015610a2457600080fd5b506103d7610a33366004614a57565b6126e5565b348015610a4457600080fd5b5061046b610a53366004614671565b61271e565b348015610a6457600080fd5b506104c960095481565b348015610a7a57600080fd5b506103d7610a89366004614cd6565b612754565b348015610a9a57600080fd5b506103d7612bdb565b348015610aaf57600080fd5b506103d7610abe366004614a89565b612c17565b348015610acf57600080fd5b506103d7610ade366004614720565b612c3e565b348015610aef57600080fd5b506103d7610afe366004614caf565b612d1f565b348015610b0f57600080fd5b506103d7610b1e366004614a89565b612d79565b348015610b2f57600080fd5b506104c9600c5481565b348015610b4557600080fd5b506104c960008051602061553783398151915281565b60006001600160e01b03198216637965db0b60e01b1480610b8c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040805181815260608181018352916020820181803683370190505090506000805b8351811015610c2c576040811015610c0d57838181518110610bd857610bd86154c0565b602001015160f81c60f81b838381518110610bf557610bf56154c0565b60200101906001600160f81b031916908160001a9053505b610c18826001615248565b915080610c2481615465565b915050610bb4565b5050919050565b610c4b60008051602061553783398151915233611dd4565b610c675760405162461bcd60e51b81526004016103ce90615117565b81601182604051610c789190614d6a565b908152604051908190036020019020555050565b60006001600160a01b038316610cab576008546001600160a01b031692505b600754604051638ee6bebb60e01b8152600481018690526001600160a01b0385811660248301526044820185905290911690638ee6bebb9060640160206040518083038186803b158015610cfe57600080fd5b505afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190614a70565b90505b9392505050565b6000610d4c8133612f27565b610d6460008051602061553783398151915283612f8b565b5050565b610d8060008051602061553783398151915233611dd4565b610d9c5760405162461bcd60e51b81526004016103ce90615117565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610de15760405162461bcd60e51b81526004016103ce90615178565b600260008190555462010000900460ff1615610e0f5760405162461bcd60e51b81526004016103ce9061514e565b600654604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a90610e4690889088906004016151af565b60006040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9a91908101906149d7565b925092509250828290610ec05760405162461bcd60e51b81526004016103ce9190614f7c565b50600160005260126020527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a354851415610ef9576110e3565b6000610f04826111b1565b905060005b81518110156110e057601654828281518110610f2757610f276154c0565b602002602001015160200151600081518110610f4557610f456154c0565b6020026020010151806020019051810190610f609190614a70565b14156110ce5760006011610f90848481518110610f7f57610f7f6154c0565b60200260200101516000015161271e565b604051610f9d9190614d6a565b90815260200160405180910390205411610fc95760405162461bcd60e51b81526004016103ce906150bb565b6000806000806000868681518110610fe357610fe36154c0565b60200260200101516040015180602001905181019061100291906146ab565b9398509196509450925090508b600061101a8761271e565b60055460095460405163c0b5dc6760e01b81529293506001600160a01b039091169163c0b5dc679161105291869186916004016151c8565b60006040518083038186803b15801561106a57600080fd5b505afa15801561107e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a69190810190614b17565b905060006110b5826014015190565b90506110c5818888878988612f95565b50505050505050505b806110d881615465565b915050610f09565b50505b50506001600055505050565b6000828152600160208190526040909120015461110c8133612f27565b6109dd83836132a3565b61112e60008051602061553783398151915233611dd4565b61114a5760405162461bcd60e51b81526004016103ce90615117565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b61118460008051602061553783398151915233611dd4565b6111a05760405162461bcd60e51b81526004016103ce90615117565b600090815260126020526040902055565b606060006111ee6111e98460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61330e565b905080516001600160401b03811115611209576112096154d6565b60405190808252806020026020018201604052801561126757816020015b611254604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816112275790505b50915060005b8151811015610c2c5760006112af61129d848481518110611290576112906154c0565b602002602001015161330e565b600181518110611290576112906154c0565b516001600160401b038111156112c7576112c76154d6565b6040519080825280602002602001820160405280156112fa57816020015b60608152602001906001900390816112e55790505b50905060005b61131861129d858581518110611290576112906154c0565b518110156113895761135961133b61129d868681518110611290576112906154c0565b828151811061134c5761134c6154c0565b6020026020010151613423565b82828151811061136b5761136b6154c0565b6020026020010181905250808061138190615465565b915050611300565b5060405180606001604052806113cc6113ad868681518110611290576112906154c0565b6000815181106113bf576113bf6154c0565b60200260200101516134a0565b6001600160a01b0316815260200182815260200161140a6113f8868681518110611290576112906154c0565b60028151811061134c5761134c6154c0565b81525084838151811061141f5761141f6154c0565b602002602001018190525050808061143690615465565b91505061126d565b6001600160a01b03811633146114ae5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103ce565b610d6482826134ba565b60038054600091826114c983615465565b9190505585858886600954876040516020016114eb9796959493929190614dfb565b60405160208183030381529060405280519060200120905095945050505050565b60606002825161151c9190615480565b15158061152a575060048251105b156115775760405162461bcd60e51b815260206004820152601c60248201527f686578537472546f42797465733a20696e76616c696420696e7075740000000060448201526064016103ce565b60006020600284516115899190615285565b61159391906153c4565b6001600160401b038111156115aa576115aa6154d6565b6040519080825280601f01601f1916602001820160405280156115d4576020820181803683370190505b50905060405b83518110156119ed57835160109081906030908790859081106115ff576115ff6154c0565b016020015160f81c1080159061162f57506039868481518110611624576116246154c0565b016020015160f81c11155b1561165d576030868481518110611648576116486154c0565b016020015161165a919060f81c6153db565b91505b60308661166b856001615248565b8151811061167b5761167b6154c0565b016020015160f81c108015906116b5575060398661169a856001615248565b815181106116aa576116aa6154c0565b016020015160f81c11155b156116ed576030866116c8856001615248565b815181106116d8576116d86154c0565b01602001516116ea919060f81c6153db565b90505b6041868481518110611701576117016154c0565b016020015160f81c1080159061173157506046868481518110611726576117266154c0565b016020015160f81c11155b1561176a57604186848151811061174a5761174a6154c0565b016020015161175c919060f81c6153db565b61176790600a615260565b91505b604186611778856001615248565b81518110611788576117886154c0565b016020015160f81c108015906117c257506046866117a7856001615248565b815181106117b7576117b76154c0565b016020015160f81c11155b15611805576041866117d5856001615248565b815181106117e5576117e56154c0565b01602001516117f7919060f81c6153db565b61180290600a615260565b90505b6061868481518110611819576118196154c0565b016020015160f81c108015906118495750606686848151811061183e5761183e6154c0565b016020015160f81c11155b15611882576061868481518110611862576118626154c0565b0160200151611874919060f81c6153db565b61187f90600a615260565b91505b606186611890856001615248565b815181106118a0576118a06154c0565b016020015160f81c108015906118da57506066866118bf856001615248565b815181106118cf576118cf6154c0565b016020015160f81c11155b1561191d576061866118ed856001615248565b815181106118fd576118fd6154c0565b016020015161190f919060f81c6153db565b61191a90600a615260565b90505b8160ff166010148061193257508060ff166010145b1561197f5760405162461bcd60e51b815260206004820152601c60248201527f686578537472546f42797465733a20696e76616c696420696e7075740000000060448201526064016103ce565b8061198b8360106153a3565b6119959190615260565b60f81b8460206119a6600287615285565b6119b091906153c4565b815181106119c0576119c06154c0565b60200101906001600160f81b031916908160001a90535050506002816119e69190615248565b90506115da565b5092915050565b60025462010000900460ff1615611a1d5760405162461bcd60e51b81526004016103ce9061514e565b3480611a5b5760405162461bcd60e51b815260206004820152600d60248201526c76616c756520746f6f206c6f7760981b60448201526064016103ce565b600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b50505050506000611ad283600084610c8c565b90506000611ae08383613521565b9050611aed826000612d79565b60008052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c54611b2e908290611b28908661352d565b90613521565b6000808052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c91909155611b6a81338885896114b8565b9050611b7b84600954876000613539565b6005546009546000916001600160a01b03169063c0b5dc6790611b9d8461271e565b896040518463ffffffff1660e01b8152600401611bbc939291906151c8565b60006040518083038186803b158015611bd457600080fd5b505afa158015611be8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c109190810190614b17565b9050611c29611c1f600061271e565b60095488866135c0565b92507faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4611c56600061271e565b611c5f3361271e565b600954604051611c7a93929187918c908e908b908a90614f8f565b60405180910390a150505050505050565b611ca360008051602061553783398151915233611dd4565b611cbf5760405162461bcd60e51b81526004016103ce90615117565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d39620f4240611cf4858561364a565b90613656565b611d1260008051602061553783398151915233611dd4565b611d2e5760405162461bcd60e51b81526004016103ce90615117565b611d36613662565b565b611d5060008051602061553783398151915233611dd4565b611d6c5760405162461bcd60e51b81526004016103ce90615117565b60005b8151811015610d64576000600f6000848481518110611d9057611d906154c0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611dcc81615465565b915050611d6f565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025462010000900460ff1615611e285760405162461bcd60e51b81526004016103ce9061514e565b6040516370a0823160e01b815233600482015282906001600160a01b038616906370a082319060240160206040518083038186803b158015611e6957600080fd5b505afa158015611e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea19190614a70565b1015611ee15760405162461bcd60e51b815260206004820152600f60248201526e62616c616e636520746f6f206c6f7760881b60448201526064016103ce565b611eed843330856136fd565b6000611efa828685610c8c565b90506000611f088483613521565b9050611f2c866001600160a01b03166000908152600f602052604090205460ff1690565b15611f8c57604051630852cd8d60e31b8152600481018290526001600160a01b038716906342966c6890602401600060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050505b611f968287612d79565b6001600160a01b0386166000908152600e6020526040902054611fbf908290611b28908761352d565b6001600160a01b0387166000908152600e6020526040812091909155611fe887338885886114b8565b9050611ff885600954868a613539565b6005546009546000916001600160a01b03169063c0b5dc679061201a8b61271e565b886040518463ffffffff1660e01b8152600401612039939291906151c8565b60006040518083038186803b15801561205157600080fd5b505afa158015612065573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261208d9190810190614b17565b90506120a561209b8961271e565b60095487866135c0565b92507faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b46120d18961271e565b6120da3361271e565b6009546040516120f593929187918b908e908b908a90614f8f565b60405180910390a15050505050505050565b606061215160405180610100016040528060608152602001606081526020016060815260200160008152602001600081526020016060815260200160008152602001606081525090565b60006121876111e98560408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905061219f8160008151811061134c5761134c6154c0565b925060006121b982600181518110611290576112906154c0565b516001600160401b038111156121d1576121d16154d6565b60405190808252806020026020018201604052801561220457816020015b60608152602001906001900390816121ef5790505b50905060005b61222083600181518110611290576112906154c0565b518110156122715761224161133b84600181518110611290576112906154c0565b828281518110612253576122536154c0565b6020026020010181905250808061226990615465565b91505061220a565b50606060005b82518110156122ef5760006122a4848381518110612297576122976154c0565b6020026020010151610b92565b9050601554818051906020012014156122dc576122d98483815181106122cc576122cc6154c0565b602002602001015161150c565b92505b50806122e781615465565b915050612277565b5060006123266111e98360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060405180610100016040528061234a8360008151811061134c5761134c6154c0565b81526020016123658360018151811061134c5761134c6154c0565b81526020016123808360028151811061134c5761134c6154c0565b81526020016123a88360038151811061239b5761239b6154c0565b602002602001015161382d565b81526020016123c38360048151811061239b5761239b6154c0565b81526020016123de8360058151811061134c5761134c6154c0565b81526020016123f98360068151811061239b5761239b6154c0565b81526020016124148360078151811061134c5761134c6154c0565b815250945050505050915091565b600061242e8133612f27565b610d64600080516020615537833981519152836134ba565b61245e60008051602061553783398151915233611dd4565b61247a5760405162461bcd60e51b81526004016103ce90615117565b60005b8151811015610d64576001600f600084848151811061249e5761249e6154c0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806124da81615465565b91505061247d565b6124fa60008051602061553783398151915233611dd4565b6125165760405162461bcd60e51b81526004016103ce90615117565b806013846040516125279190614d6a565b9081526020016040518091039020600084815260200190815260200160002081905550505050565b600254610100900460ff1661256a5760025460ff161561256e565b303b155b6125d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ce565b600254610100900460ff161580156125f3576002805461ffff19166101011790555b466009819055600880546001600160a01b038088166001600160a01b031992831617909255600480548784169083161790556006805492861692909116919091179055604080516080810190915260478082526155576020830139805190602001206014819055506040518060600160405280603281526020016155056032913980516020909101206016557f4e87426fdd31a6df84975ed344b2c3fbd45109085f1557dff1156b300f135df8601555600060178190556126b49033612f8b565b6126cc60008051602061553783398151915233612f8b565b5080156126df576002805461ff00191690555b50505050565b6126fd60008051602061553783398151915233611dd4565b6127195760405162461bcd60e51b81526004016103ce90615117565b601555565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b600654604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a9061278b90889088906004016151af565b60006040518083038186803b1580156127a357600080fd5b505afa1580156127b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127df91908101906149d7565b9250925092508282906128055760405162461bcd60e51b81526004016103ce9190614f7c565b50600160005260126020527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a3548514156129d05760008061284583612107565b91509150600060118360405161285b9190614d6a565b908152602001604051809103902054116128875760405162461bcd60e51b81526004016103ce906150bb565b60055460608201518251608084015160405163c0b5dc6760e01b81526000946001600160a01b03169363c0b5dc67936128c79391929091906004016151c8565b60006040518083038186803b1580156128df57600080fd5b505afa1580156128f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261291b9190810190614b17565b9050600061293b8360000151846060015185608001518660c0015161387b565b90506009548360800151141561299657600061295c8460a001516014015190565b905061299061296c846014015190565b856020015183858860400151612981906153fe565b89606001518a608001516138a0565b506129c7565b6129c7836000015184602001518560a001518487604001516129b7906153fe565b8860600151896080015189613b77565b50505050612bd4565b60006129db826111b1565b905060005b8151811015612bd15760008282815181106129fd576129fd6154c0565b6020026020010151905060008160200151600081518110612a2057612a206154c0565b6020026020010151806020019051810190612a3b9190614a70565b90506000612a4c836000015161271e565b9050601454821415612bbb576000601182604051612a6a9190614d6a565b90815260200160405180910390205411612a965760405162461bcd60e51b81526004016103ce906150bb565b60008060008060008060008960400151806020019051810190612ab99190614b4b565b5060055460405163c0b5dc6760e01b8152979e50959c50939a509198509650945092506000916001600160a01b039091169063c0b5dc6790612b039088908c9089906004016151c8565b60006040518083038186803b158015612b1b57600080fd5b505afa158015612b2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b579190810190614b17565b90506000612b678987878661387b565b9050600954851415612ba1576000612b80856014015190565b9050612b9b612b90846014015190565b8a83858c8c8c6138a0565b50612bb1565b612bb1898986848b8b8b89613b77565b5050505050505050505b5050508080612bc990615465565b9150506129e0565b50505b5050505050565b612bf360008051602061553783398151915233611dd4565b612c0f5760405162461bcd60e51b81526004016103ce90615117565b611d36613d94565b60008281526001602081905260409091200154612c348133612f27565b6109dd83836134ba565b612c5660008051602061553783398151915233611dd4565b612c725760405162461bcd60e51b81526004016103ce90615117565b6001600160a01b038316612d1457600854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015612cc657600080fd5b505af1158015612cda573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f193505050501580156126df573d6000803e3d6000fd5b6109dd838383613df6565b612d3760008051602061553783398151915233611dd4565b612d535760405162461bcd60e51b81526004016103ce90615117565b60009283526010602090815260408085206001600160a01b039094168552929052912055565b806001600160a01b038116612d9657506008546001600160a01b03165b8280156126df5760075460405163116d92c960e11b81526000600482018190526001600160a01b038681166024840152909283929116906322db259290604401604080518083038186803b158015612ded57600080fd5b505afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e25919061487e565b915091506000612e358783611ce1565b90506001600160a01b03831615612e5e57612e51858483613df6565b612e5b81856153c4565b93505b60075460405163116d92c960e11b8152600160048201526001600160a01b038881166024830152909116906322db259290604401604080518083038186803b158015612ea957600080fd5b505afa158015612ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee1919061487e565b9093509150612ef08783611ce1565b9050612efd858483613df6565b612f0781856153c4565b93508315612bd157600754612bd19086906001600160a01b031686613df6565b612f318282611dd4565b610d6457612f49816001600160a01b03166014613f0a565b612f54836020613f0a565b604051602001612f65929190614d86565b60408051601f198184030181529082905262461bcd60e51b82526103ce91600401614f7c565b610d6482826132a3565b6000828152600b6020526040902054829060ff1615612fc65760405162461bcd60e51b81526004016103ce906150f2565b6000818152600b60205260409020805460ff191660011790556001600160a01b03871661305757600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303d57600080fd5b505af1158015613051573d6000803e3d6000fd5b50505050505b600754604051639dc6108f60e01b81526001600160a01b0389811660048301526000921690639dc6108f9060240160206040518083038186803b15801561309d57600080fd5b505afa1580156130b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d5919061468e565b90506001600160a01b0381166131205760405162461bcd60e51b815260206004820152601060248201526f37b7363c903b30bab63a103a37b5b2b760811b60448201526064016103ce565b6001600160a01b0388166000908152600f602052604090205460ff16156131a8576040516340c10f1960e01b81526001600160a01b038281166004830152602482018790528916906340c10f1990604401600060405180830381600087803b15801561318b57600080fd5b505af115801561319f573d6000803e3d6000fd5b505050506131b3565b6131b3888287613df6565b604051631020440360e31b8152600481018690526001600160a01b038781166024830152821690638102201890604401600060405180830381600087803b1580156131fd57600080fd5b505af1158015613211573d6000803e3d6000fd5b50505060008481526010602090815260408083206001600160a01b038d16845290915281208054889350909190613249908490615248565b92505081905550856001600160a01b03167f8970038805646cbb7b520ce18a27fe39b9701296f884d4022ad41b2a8dd4e8338989878988604051613291959493929190614e5f565b60405180910390a25050505050505050565b6132ad8282611dd4565b610d645760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6060613319826140a5565b61332257600080fd5b600061332d836140de565b90506000816001600160401b03811115613349576133496154d6565b60405190808252806020026020018201604052801561338e57816020015b60408051808201909152600080825260208201528152602001906001900390816133675790505b50905060006133a08560200151614161565b85602001516133af9190615248565b90506000805b84811015613418576133c6836141e2565b91506040518060400160405280838152602001848152508482815181106133ef576133ef6154c0565b60209081029190910101526134048284615248565b92508061341081615465565b9150506133b5565b509195945050505050565b805160609061343157600080fd5b60008061343d84614286565b915091506000816001600160401b0381111561345b5761345b6154d6565b6040519080825280601f01601f191660200182016040528015613485576020820181803683370190505b509050602081016134978482856142cd565b50949350505050565b80516000906015146134b157600080fd5b610b8c8261382d565b6134c48282611dd4565b15610d645760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d3982846153c4565b6000610d398284615248565b600954831461357a5760008381526010602090815260408083206001600160a01b038516845290915281208054869290613574908490615248565b90915550505b60095482146126df5760008281526010602090815260408083206001600160a01b0385168452909152812080548692906135b59084906153c4565b909155505050505050565b6000806013866040516135d39190614d6a565b9081526040805160209281900383018120600089815293529082205492506013906135ff908990614d6a565b908152604080516020928190038301902060008881529252902054905061363f61362a83600a6152dc565b611cf461363884600a6152dc565b879061364a565b979650505050505050565b6000610d398284615384565b6000610d398284615285565b60025462010000900460ff166136b15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103ce565b6002805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916137619190614d6a565b6000604051808303816000865af19150503d806000811461379e576040519150601f19603f3d011682016040523d82523d6000602084013e6137a3565b606091505b50915091508180156137cd5750805115806137cd5750808060200190518101906137cd91906149bc565b6138255760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016103ce565b505050505050565b80516000901580159061384257508151602110155b61384b57600080fd5b60008061385784614286565b8151919350915060208210156138735760208290036101000a90045b949350505050565b600080613888868661434c565b9050613896818686866135c0565b9695505050505050565b6000838152600b6020526040902054839060ff16156138d15760405162461bcd60e51b81526004016103ce906150f2565b6000818152600b60205260408120805460ff19166001179055546002141561390b5760405162461bcd60e51b81526004016103ce90615178565b600260008190555462010000900460ff16156139395760405162461bcd60e51b81526004016103ce9061514e565b6000613946838a88610c8c565b905060006139548783613521565b9050600954841415613b5a576001600160a01b038a1661399357600854613984906001600160a01b0316826143d7565b61398e88826144ed565b613ae3565b6001600160a01b038a166000908152600f602052604090205460ff1615613a1f576040516340c10f1960e01b8152306004820152602481018890526001600160a01b038b16906340c10f1990604401600060405180830381600087803b1580156139fc57600080fd5b505af1158015613a10573d6000803e3d6000fd5b5050505061398e8a8989613df6565b6040516370a0823160e01b815230600482015287906001600160a01b038c16906370a082319060240160206040518083038186803b158015613a6057600080fd5b505afa158015613a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a989190614a70565b1015613ad85760405162461bcd60e51b815260206004820152600f60248201526e62616c616e636520746f6f206c6f7760881b60448201526064016103ce565b613ae38a8983613df6565b613aed828b612d79565b8589604051613afc9190614d6a565b60408051918290038220888352602083018890526001600160a01b038c8116848401526060840186905291519092918e16917fd9fedc891b9a6aebd6a4e09cedbcbb83091a18befe79e2f5a26ec3409469cc8d919081900360800190a45b613b668786868d613539565b505060016000555050505050505050565b6000848152600b6020526040902054849060ff1615613ba85760405162461bcd60e51b81526004016103ce906150f2565b6000818152600b60205260408120805460ff191660011790555460021415613be25760405162461bcd60e51b81526004016103ce90615178565b600260008190555462010000900460ff1615613c105760405162461bcd60e51b81526004016103ce9061514e565b6000613c1d836014015190565b90506000613c2c85838a610c8c565b90506000613c3a8983613521565b9050613c5e836001600160a01b03166000908152600f602052604090205460ff1690565b15613d1e576040516340c10f1960e01b8152306004820152602481018a90526001600160a01b038416906340c10f1990604401600060405180830381600087803b158015613cab57600080fd5b505af1158015613cbf573d6000803e3d6000fd5b5050604051630852cd8d60e31b8152600481018490526001600160a01b03861692506342966c689150602401600060405180830381600087803b158015613d0557600080fd5b505af1158015613d19573d6000803e3d6000fd5b505050505b7faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b48c8c8a8a8a8f878c604051613d5b989796959493929190614f8f565b60405180910390a16000613d7261077f8e8a61434c565b9050613d808a898984613539565b505060016000555050505050505050505050565b60025462010000900460ff1615613dbd5760405162461bcd60e51b81526004016103ce9061514e565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586136e03390565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691613e529190614d6a565b6000604051808303816000865af19150503d8060008114613e8f576040519150601f19603f3d011682016040523d82523d6000602084013e613e94565b606091505b5091509150818015613ebe575080511580613ebe575080806020019051810190613ebe91906149bc565b612bd45760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016103ce565b60606000613f19836002615384565b613f24906002615248565b6001600160401b03811115613f3b57613f3b6154d6565b6040519080825280601f01601f191660200182016040528015613f65576020820181803683370190505b509050600360fc1b81600081518110613f8057613f806154c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613faf57613faf6154c0565b60200101906001600160f81b031916908160001a9053506000613fd3846002615384565b613fde906001615248565b90505b6001811115614056576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614012576140126154c0565b1a60f81b828281518110614028576140286154c0565b60200101906001600160f81b031916908160001a90535060049490941c9361404f8161544e565b9050613fe1565b508315610d395760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103ce565b80516000906140b657506000919050565b6020820151805160001a9060c08210156140d4575060009392505050565b5060019392505050565b80516000906140ef57506000919050565b6000806140ff8460200151614161565b846020015161410e9190615248565b90506000846000015185602001516141269190615248565b90505b808210156141585761413a826141e2565b6141449083615248565b91508261415081615465565b935050614129565b50909392505050565b8051600090811a608081101561417a5750600092915050565b60b8811080614195575060c08110801590614195575060f881105b156141a35750600192915050565b60c08110156141d0576141b8600160b86153db565b6141c59060ff16826153c4565b610d39906001615248565b6141b8600160f86153db565b50919050565b80516000908190811a60808110156141fd57600191506119ed565b60b8811015614223576142116080826153c4565b61421c906001615248565b91506119ed565b60c08110156142505760b78103600185019450806020036101000a855104600182018101935050506119ed565b60f88110156142645761421160c0826153c4565b60019390930151602084900360f7016101000a900490920160f5190192915050565b60008060006142988460200151614161565b905060008185602001516142ac9190615248565b905060008286600001516142c091906153c4565b9196919550909350505050565b806142d757505050565b6020811061430f57825182526142ee602084615248565b92506142fb602083615248565b91506143086020826153c4565b90506142d7565b80156109dd57600060016143248360206153c4565b614330906101006152dc565b61433a91906153c4565b84518451821691191617835250505050565b60055460095460405163c0b5dc6760e01b81526060926001600160a01b03169163c0b5dc67916143839186918891906004016151c8565b60006040518083038186803b15801561439b57600080fd5b505afa1580156143af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d399190810190614b17565b600080836001600160a01b0316632e1a7d4d846040516024016143fc91815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516144359190614d6a565b6000604051808303816000865af19150503d8060008114614472576040519150601f19603f3d011682016040523d82523d6000602084013e614477565b606091505b50915091508180156144a15750805115806144a15750808060200190518101906144a191906149bc565b6126df5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a2057695448445241575f4641494c45440060448201526064016103ce565b604080516000808252602082019092526001600160a01b0384169083906040516145179190614d6a565b60006040518083038185875af1925050503d8060008114614554576040519150601f19603f3d011682016040523d82523d6000602084013e614559565b606091505b50509050806109dd5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016103ce565b60006145c96145c484615221565b6151f1565b90508281528383830111156145dd57600080fd5b610d39836020830184615422565b805180151581146145fb57600080fd5b919050565b600082601f83011261461157600080fd5b813561461f6145c482615221565b81815284602083860101111561463457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261466257600080fd5b610d39838351602085016145b6565b60006020828403121561468357600080fd5b8135610d39816154ec565b6000602082840312156146a057600080fd5b8151610d39816154ec565b600080600080600060a086880312156146c357600080fd5b85516146ce816154ec565b60208701519095506001600160401b038111156146ea57600080fd5b6146f688828901614651565b9450506040860151614707816154ec565b6060870151608090970151959894975095949392505050565b60008060006060848603121561473557600080fd5b8335614740816154ec565b92506020840135614750816154ec565b929592945050506040919091013590565b60008060006060848603121561477657600080fd5b8335614781816154ec565b92506020840135614791816154ec565b915060408401356147a1816154ec565b809150509250925092565b600080600080600060a086880312156147c457600080fd5b85356147cf816154ec565b945060208601356147df816154ec565b935060408601356001600160401b038111156147fa57600080fd5b61480688828901614600565b9598949750949560608101359550608001359392505050565b6000806000806080858703121561483557600080fd5b8435614840816154ec565b935060208501356001600160401b0381111561485b57600080fd5b61486787828801614600565b949794965050505060408301359260600135919050565b6000806040838503121561489157600080fd5b825161489c816154ec565b6020939093015192949293505050565b6000806000606084860312156148c157600080fd5b83356148cc816154ec565b92506020840135915060408401356001600160401b038111156148ee57600080fd5b6148fa86828701614600565b9150509250925092565b6000602080838503121561491757600080fd5b82356001600160401b038082111561492e57600080fd5b818501915085601f83011261494257600080fd5b813581811115614954576149546154d6565b8060051b91506149658483016151f1565b8181528481019084860184860187018a101561498057600080fd5b600095505b838610156149af578035945061499a856154ec565b84835260019590950194918601918601614985565b5098975050505050505050565b6000602082840312156149ce57600080fd5b610d39826145eb565b6000806000606084860312156149ec57600080fd5b6149f5846145eb565b925060208401516001600160401b0380821115614a1157600080fd5b818601915086601f830112614a2557600080fd5b614a34878351602085016145b6565b93506040860151915080821115614a4a57600080fd5b506148fa86828701614651565b600060208284031215614a6957600080fd5b5035919050565b600060208284031215614a8257600080fd5b5051919050565b60008060408385031215614a9c57600080fd5b823591506020830135614aae816154ec565b809150509250929050565b600060208284031215614acb57600080fd5b81356001600160e01b031981168114610d3957600080fd5b600060208284031215614af557600080fd5b81356001600160401b03811115614b0b57600080fd5b61387384828501614600565b600060208284031215614b2957600080fd5b81516001600160401b03811115614b3f57600080fd5b61387384828501614651565b600080600080600080600080610100898b031215614b6857600080fd5b88516001600160401b0380821115614b7f57600080fd5b614b8b8c838d01614651565b995060208b0151915080821115614ba157600080fd5b614bad8c838d01614651565b985060408b0151975060608b0151965060808b0151955060a08b0151915080821115614bd857600080fd5b614be48c838d01614651565b945060c08b0151935060e08b0151915080821115614c0157600080fd5b50614c0e8b828c01614651565b9150509295985092959890939650565b60008060408385031215614c3157600080fd5b82356001600160401b03811115614c4757600080fd5b614c5385828601614600565b95602094909401359450505050565b600080600060608486031215614c7757600080fd5b83356001600160401b03811115614c8d57600080fd5b614c9986828701614600565b9660208601359650604090950135949350505050565b600080600060608486031215614cc457600080fd5b833592506020840135614750816154ec565b60008060408385031215614ce957600080fd5b8235915060208301356001600160401b03811115614d0657600080fd5b614d1285828601614600565b9150509250929050565b60008060408385031215614d2f57600080fd5b50508035926020909101359150565b60008151808452614d56816020860160208601615422565b601f01601f19169290920160200192915050565b60008251614d7c818460208701615422565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614dbe816017850160208801615422565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614def816028840160208801615422565b01602801949350505050565b87815260006bffffffffffffffffffffffff19808960601b1660208401528751614e2c816034860160208c01615422565b60609790971b1691909501603481019190915260488101939093526068830191909152608882015260a801949350505050565b6001600160a01b038616815260a060208201819052600090614e8390830187614d3e565b604083019590955250606081019290925260809091015292915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015614f6c578a8403603f19018752825180516001600160a01b031685528981015160608b87018190528151908701819052608080880192828a1b890190910191908d0190865b81811015614f3e57607f198a8503018552614f2c848451614d3e565b948f01949350918e0191600101614f10565b505050918a0151868303878c015291614f578184614d3e565b998c0199965050509289019250600101614ec7565b50919a9950505050505050505050565b602081526000610d396020830184614d3e565b6000610100808352614fa38184018c614d3e565b90508281036020840152614fb7818b614d3e565b905088604084015287606084015286608084015282810360a0840152614fdd8187614d3e565b90508460c084015282810360e0840152614ff78185614d3e565b9b9a5050505050505050505050565b6040815260006150196040830185614d3e565b8281036020840152610100845181835261503582840182614d3e565b9150506020850151828203602084015261504f8282614d3e565b915050604085015182820360408401526150698282614d3e565b915050606085015160608301526080850151608083015260a085015182820360a08401526150978282614d3e565b91505060c085015160c083015260e085015182820360e084015261363f8282614d3e565b60208082526018908201527f496c6c6567616c206163726f73732074686520636861696e0000000000000000604082015260600190565b6020808252600b908201526a1bdc99195c88195e1a5cdd60aa1b604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f742061206d616e61676572000000000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b828152604060208201526000610d366040830184614d3e565b8381526060602082015260006151e16060830185614d3e565b9050826040830152949350505050565b604051601f8201601f191681016001600160401b0381118282101715615219576152196154d6565b604052919050565b60006001600160401b0382111561523a5761523a6154d6565b50601f01601f191660200190565b6000821982111561525b5761525b615494565b500190565b600060ff821660ff84168060ff0382111561527d5761527d615494565b019392505050565b600082615294576152946154aa565b500490565b600181815b808511156152d45781600019048211156152ba576152ba615494565b808516156152c757918102915b93841c939080029061529e565b509250929050565b6000610d3983836000826152f257506001610b8c565b816152ff57506000610b8c565b8160018114615315576002811461531f5761533b565b6001915050610b8c565b60ff84111561533057615330615494565b50506001821b610b8c565b5060208310610133831016604e8410600b841016171561535e575081810a610b8c565b6153688383615299565b806000190482111561537c5761537c615494565b029392505050565b600081600019048311821515161561539e5761539e615494565b500290565b600060ff821660ff84168160ff048111821515161561537c5761537c615494565b6000828210156153d6576153d6615494565b500390565b600060ff821660ff8416808210156153f5576153f5615494565b90039392505050565b805160208083015191908110156141dc5760001960209190910360031b1b16919050565b60005b8381101561543d578181015183820152602001615425565b838111156126df5750506000910152565b60008161545d5761545d615494565b506000190190565b600060001982141561547957615479615494565b5060010190565b60008261548f5761548f6154aa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461550157600080fd5b5056fe6d61704465706f7369744f75742862797465732c616464726573732c62797465732c627974657333322c75696e7432353629241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086d61705472616e736665724f75742862797465732c62797465732c627974657333322c75696e743235362c75696e743235362c62797465732c75696e743235362c627974657329a264697066735822122073685c969e66c8d2c4b65964de79d870088e11899c61c3e9371bb46dcb04c86164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106103855760003560e01c80638bc67517116101d1578063bca6760c11610102578063d24c6944116100a0578063e3257fc71161006f578063e3257fc714610ae3578063e5ff943314610b03578063e6984f8d14610b23578063ec87621c14610b3957600080fd5b8063d24c694414610a6e578063d431b1ac14610a8e578063d547741f14610aa3578063d9caed1214610ac357600080fd5b8063c3543b5c116100dc578063c3543b5c14610a02578063c6725e3b14610a18578063cb0ff83414610a38578063cc9e3e8914610a5857600080fd5b8063bca6760c146109a2578063bf5765ff146109c2578063c0c53b8b146109e257600080fd5b8063ab41a6ce1161016f578063af65363611610149578063af6536361461090f578063affed0e01461093f578063b2f177b314610955578063bbe359481461098257600080fd5b8063ab41a6ce146108a1578063ac18de43146108d9578063acb2ad6f146108f957600080fd5b8063981aff4e116101ab578063981aff4e14610811578063a217fddf14610831578063a3b2093114610846578063a8f8c2931461087457600080fd5b80638bc67517146107b157806391d14854146107d15780639485d293146107f157600080fd5b806336568abe116102b65780636b7ca9f31161025457806378f88fd61161022357806378f88fd614610744578063835850f914610764578063848cb5c614610786578063882940e31461079b57600080fd5b80636b7ca9f3146106ce578063721d839e146106e457806375b2e6b914610704578063789728251461072457600080fd5b80633d4a2f6e116102905780633d4a2f6e1461064d5780633ea549a2146106605780635c975abb146106805780636af6400d1461069e57600080fd5b806336568abe146105ed578063367cf0d41461060d57806338c6cc4c1461062d57600080fd5b80632dd56e91116103235780632f5c5d5e116102fd5780632f5c5d5e1461056a578063306bda9f1461058a57806332a57900146105a05780633383b99f146105c057600080fd5b80632dd56e91146105175780632e7ec23f146105375780632f2ff15d1461054a57600080fd5b8063247e16bf1161035f578063247e16bf14610478578063248a9ca3146104985780632982edbe146104d75780632d06177a146104f757600080fd5b806301ffc9a7146103de5780630babd8641461041357806311d17f531461044b57600080fd5b366103d9576008546001600160a01b031633146103d75760405162461bcd60e51b815260206004820152600b60248201526a37b7363c903baa37b5b2b760a91b60448201526064015b60405180910390fd5b005b600080fd5b3480156103ea57600080fd5b506103fe6103f9366004614ab9565b610b5b565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b50600854610433906001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b34801561045757600080fd5b5061046b610466366004614ae3565b610b92565b60405161040a9190614f7c565b34801561048457600080fd5b506103d7610493366004614cd6565b610c33565b3480156104a457600080fd5b506104c96104b3366004614a57565b6000908152600160208190526040909120015490565b60405190815260200161040a565b3480156104e357600080fd5b506104c96104f2366004614caf565b610c8c565b34801561050357600080fd5b506103d7610512366004614671565b610d40565b34801561052357600080fd5b506103d7610532366004614671565b610d68565b6103d7610545366004614cd6565b610dbe565b34801561055657600080fd5b506103d7610565366004614a89565b6110ef565b34801561057657600080fd5b506103d7610585366004614671565b611116565b34801561059657600080fd5b506104c960175481565b3480156105ac57600080fd5b506103d76105bb366004614d1c565b61116c565b3480156105cc57600080fd5b506105e06105db366004614ae3565b6111b1565b60405161040a9190614ea0565b3480156105f957600080fd5b506103d7610608366004614a89565b61143e565b34801561061957600080fd5b506104c96106283660046147ac565b6114b8565b34801561063957600080fd5b5061046b610648366004614ae3565b61150c565b6103d761065b366004614c1e565b6119f4565b34801561066c57600080fd5b50600554610433906001600160a01b031681565b34801561068c57600080fd5b5060025462010000900460ff166103fe565b3480156106aa57600080fd5b506103fe6106b9366004614a57565b600b6020526000908152604090205460ff1681565b3480156106da57600080fd5b506104c960165481565b3480156106f057600080fd5b506103d76106ff366004614671565b611c8b565b34801561071057600080fd5b50600754610433906001600160a01b031681565b34801561073057600080fd5b50600654610433906001600160a01b031681565b34801561075057600080fd5b506104c961075f366004614d1c565b611ce1565b34801561077057600080fd5b5061043361077f366004614ae3565b6014015190565b34801561079257600080fd5b506103d7611cfa565b3480156107a757600080fd5b506104c960155481565b3480156107bd57600080fd5b506103d76107cc366004614904565b611d38565b3480156107dd57600080fd5b506103fe6107ec366004614a89565b611dd4565b3480156107fd57600080fd5b50600454610433906001600160a01b031681565b34801561081d57600080fd5b506103d761082c36600461481f565b611dff565b34801561083d57600080fd5b506104c9600081565b34801561085257600080fd5b50610866610861366004614ae3565b612107565b60405161040a929190615006565b34801561088057600080fd5b506104c961088f366004614671565b600e6020526000908152604090205481565b3480156108ad57600080fd5b506104c96108bc366004614a89565b601060209081526000928352604080842090915290825290205481565b3480156108e557600080fd5b506103d76108f4366004614671565b612422565b34801561090557600080fd5b506104c9600d5481565b34801561091b57600080fd5b506103fe61092a366004614671565b600f6020526000908152604090205460ff1681565b34801561094b57600080fd5b506104c960035481565b34801561096157600080fd5b506104c9610970366004614a57565b600a6020526000908152604090205481565b34801561098e57600080fd5b506103d761099d366004614904565b612446565b3480156109ae57600080fd5b506103d76109bd366004614c62565b6124e2565b3480156109ce57600080fd5b506103d76109dd3660046148ac565b505050565b3480156109ee57600080fd5b506103d76109fd366004614761565b61254f565b348015610a0e57600080fd5b506104c960145481565b348015610a2457600080fd5b506103d7610a33366004614a57565b6126e5565b348015610a4457600080fd5b5061046b610a53366004614671565b61271e565b348015610a6457600080fd5b506104c960095481565b348015610a7a57600080fd5b506103d7610a89366004614cd6565b612754565b348015610a9a57600080fd5b506103d7612bdb565b348015610aaf57600080fd5b506103d7610abe366004614a89565b612c17565b348015610acf57600080fd5b506103d7610ade366004614720565b612c3e565b348015610aef57600080fd5b506103d7610afe366004614caf565b612d1f565b348015610b0f57600080fd5b506103d7610b1e366004614a89565b612d79565b348015610b2f57600080fd5b506104c9600c5481565b348015610b4557600080fd5b506104c960008051602061553783398151915281565b60006001600160e01b03198216637965db0b60e01b1480610b8c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040805181815260608181018352916020820181803683370190505090506000805b8351811015610c2c576040811015610c0d57838181518110610bd857610bd86154c0565b602001015160f81c60f81b838381518110610bf557610bf56154c0565b60200101906001600160f81b031916908160001a9053505b610c18826001615248565b915080610c2481615465565b915050610bb4565b5050919050565b610c4b60008051602061553783398151915233611dd4565b610c675760405162461bcd60e51b81526004016103ce90615117565b81601182604051610c789190614d6a565b908152604051908190036020019020555050565b60006001600160a01b038316610cab576008546001600160a01b031692505b600754604051638ee6bebb60e01b8152600481018690526001600160a01b0385811660248301526044820185905290911690638ee6bebb9060640160206040518083038186803b158015610cfe57600080fd5b505afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190614a70565b90505b9392505050565b6000610d4c8133612f27565b610d6460008051602061553783398151915283612f8b565b5050565b610d8060008051602061553783398151915233611dd4565b610d9c5760405162461bcd60e51b81526004016103ce90615117565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610de15760405162461bcd60e51b81526004016103ce90615178565b600260008190555462010000900460ff1615610e0f5760405162461bcd60e51b81526004016103ce9061514e565b600654604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a90610e4690889088906004016151af565b60006040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9a91908101906149d7565b925092509250828290610ec05760405162461bcd60e51b81526004016103ce9190614f7c565b50600160005260126020527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a354851415610ef9576110e3565b6000610f04826111b1565b905060005b81518110156110e057601654828281518110610f2757610f276154c0565b602002602001015160200151600081518110610f4557610f456154c0565b6020026020010151806020019051810190610f609190614a70565b14156110ce5760006011610f90848481518110610f7f57610f7f6154c0565b60200260200101516000015161271e565b604051610f9d9190614d6a565b90815260200160405180910390205411610fc95760405162461bcd60e51b81526004016103ce906150bb565b6000806000806000868681518110610fe357610fe36154c0565b60200260200101516040015180602001905181019061100291906146ab565b9398509196509450925090508b600061101a8761271e565b60055460095460405163c0b5dc6760e01b81529293506001600160a01b039091169163c0b5dc679161105291869186916004016151c8565b60006040518083038186803b15801561106a57600080fd5b505afa15801561107e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a69190810190614b17565b905060006110b5826014015190565b90506110c5818888878988612f95565b50505050505050505b806110d881615465565b915050610f09565b50505b50506001600055505050565b6000828152600160208190526040909120015461110c8133612f27565b6109dd83836132a3565b61112e60008051602061553783398151915233611dd4565b61114a5760405162461bcd60e51b81526004016103ce90615117565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b61118460008051602061553783398151915233611dd4565b6111a05760405162461bcd60e51b81526004016103ce90615117565b600090815260126020526040902055565b606060006111ee6111e98460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61330e565b905080516001600160401b03811115611209576112096154d6565b60405190808252806020026020018201604052801561126757816020015b611254604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816112275790505b50915060005b8151811015610c2c5760006112af61129d848481518110611290576112906154c0565b602002602001015161330e565b600181518110611290576112906154c0565b516001600160401b038111156112c7576112c76154d6565b6040519080825280602002602001820160405280156112fa57816020015b60608152602001906001900390816112e55790505b50905060005b61131861129d858581518110611290576112906154c0565b518110156113895761135961133b61129d868681518110611290576112906154c0565b828151811061134c5761134c6154c0565b6020026020010151613423565b82828151811061136b5761136b6154c0565b6020026020010181905250808061138190615465565b915050611300565b5060405180606001604052806113cc6113ad868681518110611290576112906154c0565b6000815181106113bf576113bf6154c0565b60200260200101516134a0565b6001600160a01b0316815260200182815260200161140a6113f8868681518110611290576112906154c0565b60028151811061134c5761134c6154c0565b81525084838151811061141f5761141f6154c0565b602002602001018190525050808061143690615465565b91505061126d565b6001600160a01b03811633146114ae5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103ce565b610d6482826134ba565b60038054600091826114c983615465565b9190505585858886600954876040516020016114eb9796959493929190614dfb565b60405160208183030381529060405280519060200120905095945050505050565b60606002825161151c9190615480565b15158061152a575060048251105b156115775760405162461bcd60e51b815260206004820152601c60248201527f686578537472546f42797465733a20696e76616c696420696e7075740000000060448201526064016103ce565b60006020600284516115899190615285565b61159391906153c4565b6001600160401b038111156115aa576115aa6154d6565b6040519080825280601f01601f1916602001820160405280156115d4576020820181803683370190505b50905060405b83518110156119ed57835160109081906030908790859081106115ff576115ff6154c0565b016020015160f81c1080159061162f57506039868481518110611624576116246154c0565b016020015160f81c11155b1561165d576030868481518110611648576116486154c0565b016020015161165a919060f81c6153db565b91505b60308661166b856001615248565b8151811061167b5761167b6154c0565b016020015160f81c108015906116b5575060398661169a856001615248565b815181106116aa576116aa6154c0565b016020015160f81c11155b156116ed576030866116c8856001615248565b815181106116d8576116d86154c0565b01602001516116ea919060f81c6153db565b90505b6041868481518110611701576117016154c0565b016020015160f81c1080159061173157506046868481518110611726576117266154c0565b016020015160f81c11155b1561176a57604186848151811061174a5761174a6154c0565b016020015161175c919060f81c6153db565b61176790600a615260565b91505b604186611778856001615248565b81518110611788576117886154c0565b016020015160f81c108015906117c257506046866117a7856001615248565b815181106117b7576117b76154c0565b016020015160f81c11155b15611805576041866117d5856001615248565b815181106117e5576117e56154c0565b01602001516117f7919060f81c6153db565b61180290600a615260565b90505b6061868481518110611819576118196154c0565b016020015160f81c108015906118495750606686848151811061183e5761183e6154c0565b016020015160f81c11155b15611882576061868481518110611862576118626154c0565b0160200151611874919060f81c6153db565b61187f90600a615260565b91505b606186611890856001615248565b815181106118a0576118a06154c0565b016020015160f81c108015906118da57506066866118bf856001615248565b815181106118cf576118cf6154c0565b016020015160f81c11155b1561191d576061866118ed856001615248565b815181106118fd576118fd6154c0565b016020015161190f919060f81c6153db565b61191a90600a615260565b90505b8160ff166010148061193257508060ff166010145b1561197f5760405162461bcd60e51b815260206004820152601c60248201527f686578537472546f42797465733a20696e76616c696420696e7075740000000060448201526064016103ce565b8061198b8360106153a3565b6119959190615260565b60f81b8460206119a6600287615285565b6119b091906153c4565b815181106119c0576119c06154c0565b60200101906001600160f81b031916908160001a90535050506002816119e69190615248565b90506115da565b5092915050565b60025462010000900460ff1615611a1d5760405162461bcd60e51b81526004016103ce9061514e565b3480611a5b5760405162461bcd60e51b815260206004820152600d60248201526c76616c756520746f6f206c6f7760981b60448201526064016103ce565b600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b50505050506000611ad283600084610c8c565b90506000611ae08383613521565b9050611aed826000612d79565b60008052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c54611b2e908290611b28908661352d565b90613521565b6000808052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c91909155611b6a81338885896114b8565b9050611b7b84600954876000613539565b6005546009546000916001600160a01b03169063c0b5dc6790611b9d8461271e565b896040518463ffffffff1660e01b8152600401611bbc939291906151c8565b60006040518083038186803b158015611bd457600080fd5b505afa158015611be8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c109190810190614b17565b9050611c29611c1f600061271e565b60095488866135c0565b92507faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4611c56600061271e565b611c5f3361271e565b600954604051611c7a93929187918c908e908b908a90614f8f565b60405180910390a150505050505050565b611ca360008051602061553783398151915233611dd4565b611cbf5760405162461bcd60e51b81526004016103ce90615117565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610d39620f4240611cf4858561364a565b90613656565b611d1260008051602061553783398151915233611dd4565b611d2e5760405162461bcd60e51b81526004016103ce90615117565b611d36613662565b565b611d5060008051602061553783398151915233611dd4565b611d6c5760405162461bcd60e51b81526004016103ce90615117565b60005b8151811015610d64576000600f6000848481518110611d9057611d906154c0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611dcc81615465565b915050611d6f565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025462010000900460ff1615611e285760405162461bcd60e51b81526004016103ce9061514e565b6040516370a0823160e01b815233600482015282906001600160a01b038616906370a082319060240160206040518083038186803b158015611e6957600080fd5b505afa158015611e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea19190614a70565b1015611ee15760405162461bcd60e51b815260206004820152600f60248201526e62616c616e636520746f6f206c6f7760881b60448201526064016103ce565b611eed843330856136fd565b6000611efa828685610c8c565b90506000611f088483613521565b9050611f2c866001600160a01b03166000908152600f602052604090205460ff1690565b15611f8c57604051630852cd8d60e31b8152600481018290526001600160a01b038716906342966c6890602401600060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050505b611f968287612d79565b6001600160a01b0386166000908152600e6020526040902054611fbf908290611b28908761352d565b6001600160a01b0387166000908152600e6020526040812091909155611fe887338885886114b8565b9050611ff885600954868a613539565b6005546009546000916001600160a01b03169063c0b5dc679061201a8b61271e565b886040518463ffffffff1660e01b8152600401612039939291906151c8565b60006040518083038186803b15801561205157600080fd5b505afa158015612065573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261208d9190810190614b17565b90506120a561209b8961271e565b60095487866135c0565b92507faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b46120d18961271e565b6120da3361271e565b6009546040516120f593929187918b908e908b908a90614f8f565b60405180910390a15050505050505050565b606061215160405180610100016040528060608152602001606081526020016060815260200160008152602001600081526020016060815260200160008152602001606081525090565b60006121876111e98560408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905061219f8160008151811061134c5761134c6154c0565b925060006121b982600181518110611290576112906154c0565b516001600160401b038111156121d1576121d16154d6565b60405190808252806020026020018201604052801561220457816020015b60608152602001906001900390816121ef5790505b50905060005b61222083600181518110611290576112906154c0565b518110156122715761224161133b84600181518110611290576112906154c0565b828281518110612253576122536154c0565b6020026020010181905250808061226990615465565b91505061220a565b50606060005b82518110156122ef5760006122a4848381518110612297576122976154c0565b6020026020010151610b92565b9050601554818051906020012014156122dc576122d98483815181106122cc576122cc6154c0565b602002602001015161150c565b92505b50806122e781615465565b915050612277565b5060006123266111e98360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060405180610100016040528061234a8360008151811061134c5761134c6154c0565b81526020016123658360018151811061134c5761134c6154c0565b81526020016123808360028151811061134c5761134c6154c0565b81526020016123a88360038151811061239b5761239b6154c0565b602002602001015161382d565b81526020016123c38360048151811061239b5761239b6154c0565b81526020016123de8360058151811061134c5761134c6154c0565b81526020016123f98360068151811061239b5761239b6154c0565b81526020016124148360078151811061134c5761134c6154c0565b815250945050505050915091565b600061242e8133612f27565b610d64600080516020615537833981519152836134ba565b61245e60008051602061553783398151915233611dd4565b61247a5760405162461bcd60e51b81526004016103ce90615117565b60005b8151811015610d64576001600f600084848151811061249e5761249e6154c0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806124da81615465565b91505061247d565b6124fa60008051602061553783398151915233611dd4565b6125165760405162461bcd60e51b81526004016103ce90615117565b806013846040516125279190614d6a565b9081526020016040518091039020600084815260200190815260200160002081905550505050565b600254610100900460ff1661256a5760025460ff161561256e565b303b155b6125d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ce565b600254610100900460ff161580156125f3576002805461ffff19166101011790555b466009819055600880546001600160a01b038088166001600160a01b031992831617909255600480548784169083161790556006805492861692909116919091179055604080516080810190915260478082526155576020830139805190602001206014819055506040518060600160405280603281526020016155056032913980516020909101206016557f4e87426fdd31a6df84975ed344b2c3fbd45109085f1557dff1156b300f135df8601555600060178190556126b49033612f8b565b6126cc60008051602061553783398151915233612f8b565b5080156126df576002805461ff00191690555b50505050565b6126fd60008051602061553783398151915233611dd4565b6127195760405162461bcd60e51b81526004016103ce90615117565b601555565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b600654604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a9061278b90889088906004016151af565b60006040518083038186803b1580156127a357600080fd5b505afa1580156127b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127df91908101906149d7565b9250925092508282906128055760405162461bcd60e51b81526004016103ce9190614f7c565b50600160005260126020527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a3548514156129d05760008061284583612107565b91509150600060118360405161285b9190614d6a565b908152602001604051809103902054116128875760405162461bcd60e51b81526004016103ce906150bb565b60055460608201518251608084015160405163c0b5dc6760e01b81526000946001600160a01b03169363c0b5dc67936128c79391929091906004016151c8565b60006040518083038186803b1580156128df57600080fd5b505afa1580156128f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261291b9190810190614b17565b9050600061293b8360000151846060015185608001518660c0015161387b565b90506009548360800151141561299657600061295c8460a001516014015190565b905061299061296c846014015190565b856020015183858860400151612981906153fe565b89606001518a608001516138a0565b506129c7565b6129c7836000015184602001518560a001518487604001516129b7906153fe565b8860600151896080015189613b77565b50505050612bd4565b60006129db826111b1565b905060005b8151811015612bd15760008282815181106129fd576129fd6154c0565b6020026020010151905060008160200151600081518110612a2057612a206154c0565b6020026020010151806020019051810190612a3b9190614a70565b90506000612a4c836000015161271e565b9050601454821415612bbb576000601182604051612a6a9190614d6a565b90815260200160405180910390205411612a965760405162461bcd60e51b81526004016103ce906150bb565b60008060008060008060008960400151806020019051810190612ab99190614b4b565b5060055460405163c0b5dc6760e01b8152979e50959c50939a509198509650945092506000916001600160a01b039091169063c0b5dc6790612b039088908c9089906004016151c8565b60006040518083038186803b158015612b1b57600080fd5b505afa158015612b2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b579190810190614b17565b90506000612b678987878661387b565b9050600954851415612ba1576000612b80856014015190565b9050612b9b612b90846014015190565b8a83858c8c8c6138a0565b50612bb1565b612bb1898986848b8b8b89613b77565b5050505050505050505b5050508080612bc990615465565b9150506129e0565b50505b5050505050565b612bf360008051602061553783398151915233611dd4565b612c0f5760405162461bcd60e51b81526004016103ce90615117565b611d36613d94565b60008281526001602081905260409091200154612c348133612f27565b6109dd83836134ba565b612c5660008051602061553783398151915233611dd4565b612c725760405162461bcd60e51b81526004016103ce90615117565b6001600160a01b038316612d1457600854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015612cc657600080fd5b505af1158015612cda573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f193505050501580156126df573d6000803e3d6000fd5b6109dd838383613df6565b612d3760008051602061553783398151915233611dd4565b612d535760405162461bcd60e51b81526004016103ce90615117565b60009283526010602090815260408085206001600160a01b039094168552929052912055565b806001600160a01b038116612d9657506008546001600160a01b03165b8280156126df5760075460405163116d92c960e11b81526000600482018190526001600160a01b038681166024840152909283929116906322db259290604401604080518083038186803b158015612ded57600080fd5b505afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e25919061487e565b915091506000612e358783611ce1565b90506001600160a01b03831615612e5e57612e51858483613df6565b612e5b81856153c4565b93505b60075460405163116d92c960e11b8152600160048201526001600160a01b038881166024830152909116906322db259290604401604080518083038186803b158015612ea957600080fd5b505afa158015612ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee1919061487e565b9093509150612ef08783611ce1565b9050612efd858483613df6565b612f0781856153c4565b93508315612bd157600754612bd19086906001600160a01b031686613df6565b612f318282611dd4565b610d6457612f49816001600160a01b03166014613f0a565b612f54836020613f0a565b604051602001612f65929190614d86565b60408051601f198184030181529082905262461bcd60e51b82526103ce91600401614f7c565b610d6482826132a3565b6000828152600b6020526040902054829060ff1615612fc65760405162461bcd60e51b81526004016103ce906150f2565b6000818152600b60205260409020805460ff191660011790556001600160a01b03871661305757600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303d57600080fd5b505af1158015613051573d6000803e3d6000fd5b50505050505b600754604051639dc6108f60e01b81526001600160a01b0389811660048301526000921690639dc6108f9060240160206040518083038186803b15801561309d57600080fd5b505afa1580156130b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d5919061468e565b90506001600160a01b0381166131205760405162461bcd60e51b815260206004820152601060248201526f37b7363c903b30bab63a103a37b5b2b760811b60448201526064016103ce565b6001600160a01b0388166000908152600f602052604090205460ff16156131a8576040516340c10f1960e01b81526001600160a01b038281166004830152602482018790528916906340c10f1990604401600060405180830381600087803b15801561318b57600080fd5b505af115801561319f573d6000803e3d6000fd5b505050506131b3565b6131b3888287613df6565b604051631020440360e31b8152600481018690526001600160a01b038781166024830152821690638102201890604401600060405180830381600087803b1580156131fd57600080fd5b505af1158015613211573d6000803e3d6000fd5b50505060008481526010602090815260408083206001600160a01b038d16845290915281208054889350909190613249908490615248565b92505081905550856001600160a01b03167f8970038805646cbb7b520ce18a27fe39b9701296f884d4022ad41b2a8dd4e8338989878988604051613291959493929190614e5f565b60405180910390a25050505050505050565b6132ad8282611dd4565b610d645760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6060613319826140a5565b61332257600080fd5b600061332d836140de565b90506000816001600160401b03811115613349576133496154d6565b60405190808252806020026020018201604052801561338e57816020015b60408051808201909152600080825260208201528152602001906001900390816133675790505b50905060006133a08560200151614161565b85602001516133af9190615248565b90506000805b84811015613418576133c6836141e2565b91506040518060400160405280838152602001848152508482815181106133ef576133ef6154c0565b60209081029190910101526134048284615248565b92508061341081615465565b9150506133b5565b509195945050505050565b805160609061343157600080fd5b60008061343d84614286565b915091506000816001600160401b0381111561345b5761345b6154d6565b6040519080825280601f01601f191660200182016040528015613485576020820181803683370190505b509050602081016134978482856142cd565b50949350505050565b80516000906015146134b157600080fd5b610b8c8261382d565b6134c48282611dd4565b15610d645760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d3982846153c4565b6000610d398284615248565b600954831461357a5760008381526010602090815260408083206001600160a01b038516845290915281208054869290613574908490615248565b90915550505b60095482146126df5760008281526010602090815260408083206001600160a01b0385168452909152812080548692906135b59084906153c4565b909155505050505050565b6000806013866040516135d39190614d6a565b9081526040805160209281900383018120600089815293529082205492506013906135ff908990614d6a565b908152604080516020928190038301902060008881529252902054905061363f61362a83600a6152dc565b611cf461363884600a6152dc565b879061364a565b979650505050505050565b6000610d398284615384565b6000610d398284615285565b60025462010000900460ff166136b15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103ce565b6002805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916137619190614d6a565b6000604051808303816000865af19150503d806000811461379e576040519150601f19603f3d011682016040523d82523d6000602084013e6137a3565b606091505b50915091508180156137cd5750805115806137cd5750808060200190518101906137cd91906149bc565b6138255760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016103ce565b505050505050565b80516000901580159061384257508151602110155b61384b57600080fd5b60008061385784614286565b8151919350915060208210156138735760208290036101000a90045b949350505050565b600080613888868661434c565b9050613896818686866135c0565b9695505050505050565b6000838152600b6020526040902054839060ff16156138d15760405162461bcd60e51b81526004016103ce906150f2565b6000818152600b60205260408120805460ff19166001179055546002141561390b5760405162461bcd60e51b81526004016103ce90615178565b600260008190555462010000900460ff16156139395760405162461bcd60e51b81526004016103ce9061514e565b6000613946838a88610c8c565b905060006139548783613521565b9050600954841415613b5a576001600160a01b038a1661399357600854613984906001600160a01b0316826143d7565b61398e88826144ed565b613ae3565b6001600160a01b038a166000908152600f602052604090205460ff1615613a1f576040516340c10f1960e01b8152306004820152602481018890526001600160a01b038b16906340c10f1990604401600060405180830381600087803b1580156139fc57600080fd5b505af1158015613a10573d6000803e3d6000fd5b5050505061398e8a8989613df6565b6040516370a0823160e01b815230600482015287906001600160a01b038c16906370a082319060240160206040518083038186803b158015613a6057600080fd5b505afa158015613a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a989190614a70565b1015613ad85760405162461bcd60e51b815260206004820152600f60248201526e62616c616e636520746f6f206c6f7760881b60448201526064016103ce565b613ae38a8983613df6565b613aed828b612d79565b8589604051613afc9190614d6a565b60408051918290038220888352602083018890526001600160a01b038c8116848401526060840186905291519092918e16917fd9fedc891b9a6aebd6a4e09cedbcbb83091a18befe79e2f5a26ec3409469cc8d919081900360800190a45b613b668786868d613539565b505060016000555050505050505050565b6000848152600b6020526040902054849060ff1615613ba85760405162461bcd60e51b81526004016103ce906150f2565b6000818152600b60205260408120805460ff191660011790555460021415613be25760405162461bcd60e51b81526004016103ce90615178565b600260008190555462010000900460ff1615613c105760405162461bcd60e51b81526004016103ce9061514e565b6000613c1d836014015190565b90506000613c2c85838a610c8c565b90506000613c3a8983613521565b9050613c5e836001600160a01b03166000908152600f602052604090205460ff1690565b15613d1e576040516340c10f1960e01b8152306004820152602481018a90526001600160a01b038416906340c10f1990604401600060405180830381600087803b158015613cab57600080fd5b505af1158015613cbf573d6000803e3d6000fd5b5050604051630852cd8d60e31b8152600481018490526001600160a01b03861692506342966c689150602401600060405180830381600087803b158015613d0557600080fd5b505af1158015613d19573d6000803e3d6000fd5b505050505b7faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b48c8c8a8a8a8f878c604051613d5b989796959493929190614f8f565b60405180910390a16000613d7261077f8e8a61434c565b9050613d808a898984613539565b505060016000555050505050505050505050565b60025462010000900460ff1615613dbd5760405162461bcd60e51b81526004016103ce9061514e565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586136e03390565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691613e529190614d6a565b6000604051808303816000865af19150503d8060008114613e8f576040519150601f19603f3d011682016040523d82523d6000602084013e613e94565b606091505b5091509150818015613ebe575080511580613ebe575080806020019051810190613ebe91906149bc565b612bd45760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016103ce565b60606000613f19836002615384565b613f24906002615248565b6001600160401b03811115613f3b57613f3b6154d6565b6040519080825280601f01601f191660200182016040528015613f65576020820181803683370190505b509050600360fc1b81600081518110613f8057613f806154c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613faf57613faf6154c0565b60200101906001600160f81b031916908160001a9053506000613fd3846002615384565b613fde906001615248565b90505b6001811115614056576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614012576140126154c0565b1a60f81b828281518110614028576140286154c0565b60200101906001600160f81b031916908160001a90535060049490941c9361404f8161544e565b9050613fe1565b508315610d395760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103ce565b80516000906140b657506000919050565b6020820151805160001a9060c08210156140d4575060009392505050565b5060019392505050565b80516000906140ef57506000919050565b6000806140ff8460200151614161565b846020015161410e9190615248565b90506000846000015185602001516141269190615248565b90505b808210156141585761413a826141e2565b6141449083615248565b91508261415081615465565b935050614129565b50909392505050565b8051600090811a608081101561417a5750600092915050565b60b8811080614195575060c08110801590614195575060f881105b156141a35750600192915050565b60c08110156141d0576141b8600160b86153db565b6141c59060ff16826153c4565b610d39906001615248565b6141b8600160f86153db565b50919050565b80516000908190811a60808110156141fd57600191506119ed565b60b8811015614223576142116080826153c4565b61421c906001615248565b91506119ed565b60c08110156142505760b78103600185019450806020036101000a855104600182018101935050506119ed565b60f88110156142645761421160c0826153c4565b60019390930151602084900360f7016101000a900490920160f5190192915050565b60008060006142988460200151614161565b905060008185602001516142ac9190615248565b905060008286600001516142c091906153c4565b9196919550909350505050565b806142d757505050565b6020811061430f57825182526142ee602084615248565b92506142fb602083615248565b91506143086020826153c4565b90506142d7565b80156109dd57600060016143248360206153c4565b614330906101006152dc565b61433a91906153c4565b84518451821691191617835250505050565b60055460095460405163c0b5dc6760e01b81526060926001600160a01b03169163c0b5dc67916143839186918891906004016151c8565b60006040518083038186803b15801561439b57600080fd5b505afa1580156143af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d399190810190614b17565b600080836001600160a01b0316632e1a7d4d846040516024016143fc91815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516144359190614d6a565b6000604051808303816000865af19150503d8060008114614472576040519150601f19603f3d011682016040523d82523d6000602084013e614477565b606091505b50915091508180156144a15750805115806144a15750808060200190518101906144a191906149bc565b6126df5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a2057695448445241575f4641494c45440060448201526064016103ce565b604080516000808252602082019092526001600160a01b0384169083906040516145179190614d6a565b60006040518083038185875af1925050503d8060008114614554576040519150601f19603f3d011682016040523d82523d6000602084013e614559565b606091505b50509050806109dd5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016103ce565b60006145c96145c484615221565b6151f1565b90508281528383830111156145dd57600080fd5b610d39836020830184615422565b805180151581146145fb57600080fd5b919050565b600082601f83011261461157600080fd5b813561461f6145c482615221565b81815284602083860101111561463457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261466257600080fd5b610d39838351602085016145b6565b60006020828403121561468357600080fd5b8135610d39816154ec565b6000602082840312156146a057600080fd5b8151610d39816154ec565b600080600080600060a086880312156146c357600080fd5b85516146ce816154ec565b60208701519095506001600160401b038111156146ea57600080fd5b6146f688828901614651565b9450506040860151614707816154ec565b6060870151608090970151959894975095949392505050565b60008060006060848603121561473557600080fd5b8335614740816154ec565b92506020840135614750816154ec565b929592945050506040919091013590565b60008060006060848603121561477657600080fd5b8335614781816154ec565b92506020840135614791816154ec565b915060408401356147a1816154ec565b809150509250925092565b600080600080600060a086880312156147c457600080fd5b85356147cf816154ec565b945060208601356147df816154ec565b935060408601356001600160401b038111156147fa57600080fd5b61480688828901614600565b9598949750949560608101359550608001359392505050565b6000806000806080858703121561483557600080fd5b8435614840816154ec565b935060208501356001600160401b0381111561485b57600080fd5b61486787828801614600565b949794965050505060408301359260600135919050565b6000806040838503121561489157600080fd5b825161489c816154ec565b6020939093015192949293505050565b6000806000606084860312156148c157600080fd5b83356148cc816154ec565b92506020840135915060408401356001600160401b038111156148ee57600080fd5b6148fa86828701614600565b9150509250925092565b6000602080838503121561491757600080fd5b82356001600160401b038082111561492e57600080fd5b818501915085601f83011261494257600080fd5b813581811115614954576149546154d6565b8060051b91506149658483016151f1565b8181528481019084860184860187018a101561498057600080fd5b600095505b838610156149af578035945061499a856154ec565b84835260019590950194918601918601614985565b5098975050505050505050565b6000602082840312156149ce57600080fd5b610d39826145eb565b6000806000606084860312156149ec57600080fd5b6149f5846145eb565b925060208401516001600160401b0380821115614a1157600080fd5b818601915086601f830112614a2557600080fd5b614a34878351602085016145b6565b93506040860151915080821115614a4a57600080fd5b506148fa86828701614651565b600060208284031215614a6957600080fd5b5035919050565b600060208284031215614a8257600080fd5b5051919050565b60008060408385031215614a9c57600080fd5b823591506020830135614aae816154ec565b809150509250929050565b600060208284031215614acb57600080fd5b81356001600160e01b031981168114610d3957600080fd5b600060208284031215614af557600080fd5b81356001600160401b03811115614b0b57600080fd5b61387384828501614600565b600060208284031215614b2957600080fd5b81516001600160401b03811115614b3f57600080fd5b61387384828501614651565b600080600080600080600080610100898b031215614b6857600080fd5b88516001600160401b0380821115614b7f57600080fd5b614b8b8c838d01614651565b995060208b0151915080821115614ba157600080fd5b614bad8c838d01614651565b985060408b0151975060608b0151965060808b0151955060a08b0151915080821115614bd857600080fd5b614be48c838d01614651565b945060c08b0151935060e08b0151915080821115614c0157600080fd5b50614c0e8b828c01614651565b9150509295985092959890939650565b60008060408385031215614c3157600080fd5b82356001600160401b03811115614c4757600080fd5b614c5385828601614600565b95602094909401359450505050565b600080600060608486031215614c7757600080fd5b83356001600160401b03811115614c8d57600080fd5b614c9986828701614600565b9660208601359650604090950135949350505050565b600080600060608486031215614cc457600080fd5b833592506020840135614750816154ec565b60008060408385031215614ce957600080fd5b8235915060208301356001600160401b03811115614d0657600080fd5b614d1285828601614600565b9150509250929050565b60008060408385031215614d2f57600080fd5b50508035926020909101359150565b60008151808452614d56816020860160208601615422565b601f01601f19169290920160200192915050565b60008251614d7c818460208701615422565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614dbe816017850160208801615422565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614def816028840160208801615422565b01602801949350505050565b87815260006bffffffffffffffffffffffff19808960601b1660208401528751614e2c816034860160208c01615422565b60609790971b1691909501603481019190915260488101939093526068830191909152608882015260a801949350505050565b6001600160a01b038616815260a060208201819052600090614e8390830187614d3e565b604083019590955250606081019290925260809091015292915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015614f6c578a8403603f19018752825180516001600160a01b031685528981015160608b87018190528151908701819052608080880192828a1b890190910191908d0190865b81811015614f3e57607f198a8503018552614f2c848451614d3e565b948f01949350918e0191600101614f10565b505050918a0151868303878c015291614f578184614d3e565b998c0199965050509289019250600101614ec7565b50919a9950505050505050505050565b602081526000610d396020830184614d3e565b6000610100808352614fa38184018c614d3e565b90508281036020840152614fb7818b614d3e565b905088604084015287606084015286608084015282810360a0840152614fdd8187614d3e565b90508460c084015282810360e0840152614ff78185614d3e565b9b9a5050505050505050505050565b6040815260006150196040830185614d3e565b8281036020840152610100845181835261503582840182614d3e565b9150506020850151828203602084015261504f8282614d3e565b915050604085015182820360408401526150698282614d3e565b915050606085015160608301526080850151608083015260a085015182820360a08401526150978282614d3e565b91505060c085015160c083015260e085015182820360e084015261363f8282614d3e565b60208082526018908201527f496c6c6567616c206163726f73732074686520636861696e0000000000000000604082015260600190565b6020808252600b908201526a1bdc99195c88195e1a5cdd60aa1b604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f742061206d616e61676572000000000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b828152604060208201526000610d366040830184614d3e565b8381526060602082015260006151e16060830185614d3e565b9050826040830152949350505050565b604051601f8201601f191681016001600160401b0381118282101715615219576152196154d6565b604052919050565b60006001600160401b0382111561523a5761523a6154d6565b50601f01601f191660200190565b6000821982111561525b5761525b615494565b500190565b600060ff821660ff84168060ff0382111561527d5761527d615494565b019392505050565b600082615294576152946154aa565b500490565b600181815b808511156152d45781600019048211156152ba576152ba615494565b808516156152c757918102915b93841c939080029061529e565b509250929050565b6000610d3983836000826152f257506001610b8c565b816152ff57506000610b8c565b8160018114615315576002811461531f5761533b565b6001915050610b8c565b60ff84111561533057615330615494565b50506001821b610b8c565b5060208310610133831016604e8410600b841016171561535e575081810a610b8c565b6153688383615299565b806000190482111561537c5761537c615494565b029392505050565b600081600019048311821515161561539e5761539e615494565b500290565b600060ff821660ff84168160ff048111821515161561537c5761537c615494565b6000828210156153d6576153d6615494565b500390565b600060ff821660ff8416808210156153f5576153f5615494565b90039392505050565b805160208083015191908110156141dc5760001960209190910360031b1b16919050565b60005b8381101561543d578181015183820152602001615425565b838111156126df5750506000910152565b60008161545d5761545d615494565b506000190190565b600060001982141561547957615479615494565b5060010190565b60008261548f5761548f6154aa565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461550157600080fd5b5056fe6d61704465706f7369744f75742862797465732c616464726573732c62797465732c627974657333322c75696e7432353629241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086d61705472616e736665724f75742862797465732c62797465732c627974657333322c75696e743235362c75696e743235362c62797465732c75696e743235362c627974657329a264697066735822122073685c969e66c8d2c4b65964de79d870088e11899c61c3e9371bb46dcb04c86164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1577,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1407,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1410,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1492,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "_paused",
        "offset": 2,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4376,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4379,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "mapToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)2230"
      },
      {
        "astId": 4382,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "tokenRegister",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITokenRegister)8846"
      },
      {
        "astId": 4385,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "lightClientManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILightClientManager)8463"
      },
      {
        "astId": 4388,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "feeCenter",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IFeeCenter)8396"
      },
      {
        "astId": 4390,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "wToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4392,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "selfChainId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4396,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "chainGasFee",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4400,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "orderList",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4402,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "chainGasFees",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4404,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "transferFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4408,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "transferFeeList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4412,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "authToken",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4418,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "vaultBalance",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4422,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "bridgeAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 4426,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "ChainIdTable",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4432,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "tokenOtherChainDecimals",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4513,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "mapTransferOutTopic",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 4515,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "nearTransferOut",
        "offset": 0,
        "slot": "21",
        "type": "t_bytes32"
      },
      {
        "astId": 4517,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "mapDepositOutTopic",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes32"
      },
      {
        "astId": 4519,
        "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
        "label": "nearDepositOut",
        "offset": 0,
        "slot": "23",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2230": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeCenter)8396": {
        "encoding": "inplace",
        "label": "contract IFeeCenter",
        "numberOfBytes": "20"
      },
      "t_contract(ILightClientManager)8463": {
        "encoding": "inplace",
        "label": "contract ILightClientManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenRegister)8846": {
        "encoding": "inplace",
        "label": "contract ITokenRegister",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MAPCrossChainServiceRelay.sol:MAPCrossChainServiceRelay",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}