{
  "address": "0x27A51306c2b727d068c1B6E9895c6d160Edd21B3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapDepositOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tokenID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mapTokenRegister",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapTransferIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "toContract",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mapTransferInData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "toChainToken",
          "type": "bytes"
        }
      ],
      "name": "mapTransferOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "toContract",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mapTransferOutData",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "self",
          "type": "address"
        }
      ],
      "name": "_addressToBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "b",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "addAuthToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "addManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridgeAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainGasFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainGasFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkAuthToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositOutToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChainID",
          "type": "uint256"
        }
      ],
      "name": "getOrderID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mapToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lightNode",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightNode",
      "outputs": [
        {
          "internalType": "contract ILightNode",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mapToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mapTransferOutTopic",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orderList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "removeAuthToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "removeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canBridge",
          "type": "bool"
        }
      ],
      "name": "setCanBridgeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokenRegister",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "receiptProof",
          "type": "bytes"
        }
      ],
      "name": "transferIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        }
      ],
      "name": "transferInVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        }
      ],
      "name": "transferOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        }
      ],
      "name": "transferOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x081be3a01895749dc5b2ebe0518c6faff2095321b695db88bce7d56e094d6b9e",
  "receipt": {
    "to": null,
    "from": "0xCBdb1Da4f99276b0c427776BDE93838Bc19386Cc",
    "contractAddress": "0x27A51306c2b727d068c1B6E9895c6d160Edd21B3",
    "transactionIndex": 0,
    "gasUsed": "3192884",
    "logsBloom": "0x
    "blockHash": "0xa6e10267914159b4c57a873143cfa3c7411ec101bab6b384d67d6df703dc1f5d",
    "transactionHash": "0x081be3a01895749dc5b2ebe0518c6faff2095321b695db88bce7d56e094d6b9e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 359510,
        "transactionHash": "0x081be3a01895749dc5b2ebe0518c6faff2095321b695db88bce7d56e094d6b9e",
        "address": "0x27A51306c2b727d068c1B6E9895c6d160Edd21B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa6e10267914159b4c57a873143cfa3c7411ec101bab6b384d67d6df703dc1f5d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 359510,
        "transactionHash": "0x081be3a01895749dc5b2ebe0518c6faff2095321b695db88bce7d56e094d6b9e",
        "address": "0x27A51306c2b727d068c1B6E9895c6d160Edd21B3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc",
          "0x000000000000000000000000cbdb1da4f99276b0c427776bde93838bc19386cc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa6e10267914159b4c57a873143cfa3c7411ec101bab6b384d67d6df703dc1f5d"
      }
    ],
    "blockNumber": 359510,
    "cumulativeGasUsed": "3192884",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "633dea12f4451977e2251a48fcfd8749",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapDepositOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mapTokenRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapTransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"toContract\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mapTransferInData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toChainToken\",\"type\":\"bytes\"}],\"name\":\"mapTransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"toContract\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mapTransferOutData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"_addressToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"addAuthToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridgeAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainGasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkAuthToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositOutToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"getOrderID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lightNode\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightNode\",\"outputs\":[{\"internalType\":\"contract ILightNode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapTransferOutTopic\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"removeAuthToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canBridge\",\"type\":\"bool\"}],\"name\":\"setCanBridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiptProof\",\"type\":\"bytes\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"transferInVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"transferOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MapCrossChainService.sol\":\"MapCrossChainService\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MapCrossChainService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interface/IWToken.sol\\\";\\nimport \\\"./interface/IMAPToken.sol\\\";\\nimport \\\"./interface/IFeeCenter.sol\\\";\\nimport \\\"./utils/Role.sol\\\";\\nimport \\\"./interface/IFeeCenter.sol\\\";\\nimport \\\"./utils/TransferHelper.sol\\\";\\nimport \\\"./interface/IMCS.sol\\\";\\nimport \\\"./interface/ILightNode.sol\\\";\\nimport \\\"./utils/RLPReader.sol\\\";\\n\\n\\ncontract MapCrossChainService is ReentrancyGuard, Role, Initializable, Pausable, IMCS {\\n    using SafeMath for uint;\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    uint public nonce;\\n\\n    IERC20 public mapToken;\\n    ILightNode public lightNode;\\n    address public wToken;          // native wrapped token\\n\\n    uint public selfChainId;\\n\\n    mapping(bytes32 => address) public tokenRegister;\\n    //Gas transfer fee charged by the target chain\\n    mapping(uint => uint) public chainGasFee;\\n    mapping(bytes32 => bool) public orderList;\\n\\n    uint public chainGasFees;\\n    mapping(address => bool) public authToken;\\n\\n    mapping(address => uint256) public bridgeAddress;\\n\\n    //Can storage tokens be cross-chain?\\n    mapping(address => mapping(uint => bool)) canBridgeToken;\\n\\n\\n    struct txLog {\\n        address addr;\\n        bytes[] topics;\\n        bytes data;\\n    }\\n\\n    event mapTransferOut(bytes token, bytes from, bytes32 orderId,\\n        uint fromChain, uint toChain, bytes to, uint amount, bytes toChainToken);\\n    event mapTransferIn(address indexed token, bytes indexed from, bytes32 indexed orderId,\\n        uint fromChain, uint toChain, address to, uint amount);\\n\\n    event mapTransferOutData(bytes indexed toContract, address indexed from, bytes32 indexed orderId,\\n        uint fromChain, uint toChain, bytes data);\\n    event mapTransferInData(bytes indexed toContract, address indexed from, bytes32 indexed orderId,\\n        uint fromChain, uint toChain, bytes data);\\n\\n    event mapTokenRegister(bytes32 tokenID, address token);\\n    event mapDepositOut(address token, bytes from, address to, bytes32 orderId, uint256 amount);\\n\\n\\n    //bytes32 public mapTransferOutTopic = keccak256(bytes('mapTransferOut(address,address,bytes32,uint,uint,bytes,uint,bytes)'));\\n    bytes32 public mapTransferOutTopic = keccak256(abi.encodePacked(\\\"mapTransferOut(bytes,bytes,bytes32,uint256,uint256,bytes,uint256,bytes)\\\"));\\n    //    bytes mapTransferInTopic = keccak256(bytes('mapTransferIn(address,address,bytes32,uint,uint,bytes,uint,bytes)'));\\n\\n    function initialize(address _wToken, address _mapToken, address _lightNode) public initializer {\\n        uint _chainId;\\n        assembly {_chainId := chainid()}\\n        selfChainId = _chainId;\\n        wToken = _wToken;\\n        mapToken = IERC20(_mapToken);\\n        lightNode = ILightNode(_lightNode);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == wToken, \\\"only can receive wToken\\\");\\n    }\\n\\n\\n    modifier checkOrder(bytes32 orderId) {\\n        require(!orderList[orderId], \\\"order exist\\\");\\n        orderList[orderId] = true;\\n        _;\\n    }\\n\\n    modifier checkCanBridge(address token, uint chainId) {\\n        require(canBridgeToken[token][chainId], \\\"token not can bridge\\\");\\n        _;\\n    }\\n\\n    function setPause() external onlyManager {\\n        _pause();\\n    }\\n\\n    function setUnpause() external onlyManager {\\n        _unpause();\\n    }\\n\\n    function getOrderID(address token, address from, bytes memory to, uint amount, uint toChainID) public returns (bytes32){\\n        return keccak256(abi.encodePacked(nonce++, from, to, token, amount, selfChainId, toChainID));\\n    }\\n\\n    function addAuthToken(address[] memory token) external onlyManager {\\n        for (uint i = 0; i < token.length; i++) {\\n            authToken[token[i]] = true;\\n        }\\n    }\\n\\n    function removeAuthToken(address[] memory token) external onlyManager {\\n        for (uint i = 0; i < token.length; i++) {\\n            authToken[token[i]] = false;\\n        }\\n    }\\n\\n    function setBridge(address _bridge, uint256 _num) public onlyManager {\\n        bridgeAddress[_bridge] = _num;\\n    }\\n\\n    function checkAuthToken(address token) public view returns (bool) {\\n        return authToken[token];\\n    }\\n\\n    function setCanBridgeToken(address token, uint chainId, bool canBridge) public onlyManager {\\n        canBridgeToken[token][chainId] = canBridge;\\n    }\\n\\n\\n    function transferIn(uint, bytes memory receiptProof) external override nonReentrant whenNotPaused {\\n        (bool sucess,string memory message,bytes memory logArray) = lightNode.verifyProofData(receiptProof);\\n        require(sucess, message);\\n        txLog[] memory logs = decodeTxLog(logArray);\\n\\n        for (uint i = 0; i < logs.length; i++) {\\n            txLog memory log = logs[i];\\n            bytes32 topic = abi.decode(log.topics[0], (bytes32));\\n            if (topic == mapTransferOutTopic) {\\n                require(bridgeAddress[log.addr] > 0, \\\"Illegal across the chain\\\");\\n                //                address token = abi.decode(log.topics[1], (address));\\n                // address from = abi.decode(log.topics[2], (address));\\n                // bytes32 orderId = abi.decode(log.topics[3], (bytes32));\\n                (,bytes memory from,bytes32 orderId,uint fromChain, uint toChain, bytes memory to, uint amount, bytes memory toChainToken)\\n                = abi.decode(log.data, (bytes, bytes, bytes32, uint, uint, bytes, uint, bytes));\\n                address token = _bytesToAddress(toChainToken);\\n                address payable toAddress = payable(_bytesToAddress(to));\\n                _transferIn(token, from, toAddress, amount, orderId, fromChain, toChain);\\n            }\\n        }\\n    }\\n\\n\\n    function transferOut(address toContract, uint toChain, bytes memory data) external override whenNotPaused {\\n\\n    }\\n\\n    function transferOutToken(address token, bytes memory toAddress, uint amount, uint toChain)\\n    external override\\n    whenNotPaused\\n    checkCanBridge(token, toChain)\\n    {\\n        bytes32 orderId = getOrderID(token, msg.sender, toAddress, amount, toChain);\\n        require(IERC20(token).balanceOf(msg.sender) >= amount, \\\"balance too low\\\");\\n        if (checkAuthToken(token)) {\\n            IMAPToken(token).burnFrom(msg.sender, amount);\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n        emit mapTransferOut(_addressToBytes(token), _addressToBytes(msg.sender), orderId, selfChainId, toChain, toAddress, amount, _addressToBytes(address(0)));\\n    }\\n\\n\\n    function transferOutNative(bytes memory toAddress, uint toChain)\\n    external override payable\\n    whenNotPaused\\n    checkCanBridge(address(0), toChain) {\\n        uint amount = msg.value;\\n        require(amount > 0, \\\"balance is zero\\\");\\n        bytes32 orderId = getOrderID(address(0), msg.sender, toAddress, amount, toChain);\\n        IWToken(wToken).deposit{value : amount}();\\n        emit mapTransferOut(_addressToBytes(address(0)), _addressToBytes(msg.sender), orderId, selfChainId, toChain, toAddress, amount, _addressToBytes(address(0)));\\n    }\\n\\n\\n    function depositOutToken(address token, address from, address to, uint amount) external override payable whenNotPaused {\\n        bytes32 orderId = getOrderID(token, msg.sender, _addressToBytes(to), amount, 22776);\\n        require(IERC20(token).balanceOf(msg.sender) >= amount, \\\"balance too low\\\");\\n        TransferHelper.safeTransferFrom(token, from, address(this), amount);\\n        emit mapDepositOut(token, _addressToBytes(from), to, orderId, amount);\\n    }\\n\\n    function depositOutNative(address from, address to) external override payable whenNotPaused {\\n        uint amount = msg.value;\\n        bytes32 orderId = getOrderID(address(0), msg.sender, _addressToBytes(to), amount, 22776);\\n        require(msg.value >= amount, \\\"balance too low\\\");\\n        emit mapDepositOut(address(0), _addressToBytes(from), to, orderId, amount);\\n    }\\n\\n    function transferInVault(address token, bytes memory from, address payable to, uint amount, bytes32 orderId, uint fromChain, uint toChain)\\n    external checkOrder(orderId) nonReentrant whenNotPaused {\\n        if (token == address(0)) {\\n            TransferHelper.safeWithdraw(wToken, amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else if (checkAuthToken(token)) {\\n            IMAPToken(token).mint(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        emit mapTransferIn(address(0), from, orderId, fromChain, toChain, to, amount);\\n    }\\n\\n\\n    function _transferIn(address token, bytes memory from, address payable to, uint amount, bytes32 orderId, uint fromChain, uint toChain)\\n    internal checkOrder(orderId) {\\n        if (token == address(0)) {\\n            TransferHelper.safeWithdraw(wToken, amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else if (checkAuthToken(token)) {\\n            IMAPToken(token).mint(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        emit mapTransferIn(address(0), from, orderId, fromChain, toChain, to, amount);\\n    }\\n\\n\\n    function withdraw(address token, address payable receiver, uint256 amount) public onlyManager {\\n        if (token == address(0)) {\\n            IWToken(wToken).withdraw(amount);\\n            receiver.transfer(amount);\\n        } else {\\n            IERC20(token).transfer(receiver, amount);\\n        }\\n    }\\n\\n    function _bytesToAddress(bytes memory bys) internal pure returns (address addr){\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    function _addressToBytes(address self) public pure returns (bytes memory b) {\\n        b = abi.encodePacked(self);\\n    }\\n\\n\\n    function decodeTxLog(bytes memory logsHash)\\n    internal\\n    pure\\n    returns (txLog[] memory _txLogs){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n        _txLogs = new txLog[](ls.length);\\n        for (uint256 i = 0; i < ls.length; i++) {\\n            bytes[] memory topic = new bytes[](ls[i].toList()[1].toList().length);\\n            for (uint256 j = 0; j < ls[i].toList()[1].toList().length; j++) {\\n                topic[j] = ls[i].toList()[1].toList()[j].toBytes();\\n            }\\n            _txLogs[i] = txLog({\\n            addr : ls[i].toList()[0].toAddress(),\\n            topics : topic,\\n            data : ls[i].toList()[2].toBytes()\\n            });\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x6d2b02078b9b8ef80fa6c58ec5eca7b527be7094eeb50018dfcaa3f24ccd8ec9\",\"license\":\"MIT\"},\"contracts/interface/IFeeCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeCenter {\\n    struct gasFee{\\n        uint lowest;\\n        uint highest;\\n        //must div 10000\\n        uint proportion;\\n    }\\n\\n    struct Rate{\\n        address feeAddress;\\n        uint rate;\\n    }\\n\\n    function getTokenFee(uint to, address token, uint amount) external view returns (uint fee);\\n    function getVaultToken(address token) external view returns(address vault);\\n    function doDistribute(address token,uint amount) external;\\n    function getDistribute(uint id, address token) external view  returns(address feeAddress, uint rate);\\n}\",\"keccak256\":\"0xa0d5d22e945cdc1231b626e232c547b704ca86a87d1af2a79dd24aecdb403972\",\"license\":\"MIT\"},\"contracts/interface/ILightNode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILogs.sol\\\";\\n\\ninterface ILightNode is ILogs{\\n    function verifyProofData(bytes memory _receiptProof) external returns (bool success, string memory message, bytes memory logs);\\n}\",\"keccak256\":\"0x140a43664d4e12a4b02ae6f5a15098e426301489b0f1607313cc31b6032b7068\",\"license\":\"MIT\"},\"contracts/interface/ILogs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILogs {\\n    struct txLog {\\n        address addr;\\n        bytes[] topics;\\n        bytes data;\\n    }\\n}\",\"keccak256\":\"0x23c68c2eff3872f86ccad82e807851a000d3497f0d4d327387b9dbdd86713c3d\",\"license\":\"MIT\"},\"contracts/interface/IMAPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IMAPToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xc6b2323f7c7d558e1d3c81685f49c8e269cee8673a1720bf067cae477296dfe1\",\"license\":\"MIT\"},\"contracts/interface/IMCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMCS {\\n    function transferIn(uint fromChain, bytes memory receiptProof) external;\\n    function transferOut(address toContract, uint toChain, bytes memory data) external;\\n    function transferOutToken(address token, bytes memory to, uint amount, uint toChain) external;\\n    function transferOutNative(bytes memory to, uint toChain) external payable;\\n    function depositOutToken(address token, address from, address to, uint amount) external payable ;\\n    function depositOutNative(address from, address to) external payable ;\\n}\",\"keccak256\":\"0x9d5a895883c0d9a20569d644d78220a8fc799d96d27f58b338813fe2ccbe145e\",\"license\":\"MIT\"},\"contracts/interface/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWToken {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2da7c3e4a512a8badc708e89e803bdfe2fac82fee398ba7f40796e190a109256\",\"license\":\"MIT\"},\"contracts/utils/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.7.1;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x56fe1a87ad74f53df3f7c9458add3fac6a05eff31787f02aa3fa4608ac194058\",\"license\":\"MIT\"},\"contracts/utils/Role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Role is AccessControl{\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    constructor(){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    modifier onlyManager(){\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Caller is not a manager\\\");\\n        _;\\n    }\\n\\n    function addManager(address manager) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _setupRole(MANAGER_ROLE, manager);\\n    }\\n\\n    function removeManager(address manager) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        _revokeRole(MANAGER_ROLE,manager);\\n    }\\n}\",\"keccak256\":\"0x6fea553cff3c6fd23fc5ebb3ffcb12720a208a23e7e37f7679e163c6702a30ff\",\"license\":\"MIT\"},\"contracts/utils/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary TransferHelper {\\n    function safeWithdraw(address wtoken, uint value) internal {\\n        (bool success, bytes memory data) = wtoken.call(abi.encodeWithSelector(0x2e1a7d4d, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: WiTHDRAW_FAILED');\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0xe2376c5a42fa138426773d1c0e81c4323751ec295c3cee0020fc8be5c25fa0a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x7f6d61705472616e736665724f75742862797465732c62797465732c627974657360a0527f33322c75696e743235362c75696e743235362c62797465732c75696e7432353660c052662c62797465732960c81b60e052604760805260e76040527faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4600f553480156200009057600080fd5b5060016000908155620000a49033620000e2565b620000d07f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0833620000e2565b6002805462ff0000191690556200017a565b620000ee8282620000f2565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000ee5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b613718806200018a6000396000f3fe60806040526004361061024a5760003560e01c806391d1485411610139578063c0c53b8b116100b6578063d431b1ac1161007a578063d431b1ac14610787578063d547741f1461079c578063d9caed12146107bc578063dc3aff90146107dc578063e6984f8d146107ef578063ec87621c1461080557600080fd5b8063c0c53b8b146106ee578063c3543b5c1461070e578063cb0ff83414610724578063cc9e3e8914610751578063d24c69441461076757600080fd5b8063af653636116100fd578063af6536361461063b578063affed0e01461066b578063b2f177b314610681578063bbe35948146106ae578063bf5765ff146106ce57600080fd5b806391d14854146105a65780639485d293146105c6578063981aff4e146105e6578063a217fddf14610606578063ac18de431461061b57600080fd5b806347397cd7116101c75780636af6400d1161018b5780636af6400d146104f45780637d42fd2d14610524578063848cb5c6146105515780638bc67517146105665780638d2e68151461058657600080fd5b806347397cd7146104635780635062cac5146104835780635b6edeea146104a35780635c975abb146104b65780635f670bd3146104d457600080fd5b80632d06177a1161020e5780632d06177a146103d05780632f2ff15d146103f057806336568abe14610410578063367cf0d4146104305780633d4a2f6e1461045057600080fd5b806301ffc9a7146102b55780630babd864146102ea5780630bf1b36a1461032257806315e652c71461035b578063248a9ca31461039157600080fd5b366102b0576006546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792063616e20726563656976652077546f6b656e00000000000000000060448201526064015b60405180910390fd5b005b600080fd5b3480156102c157600080fd5b506102d56102d036600461304f565b610827565b60405190151581526020015b60405180910390f35b3480156102f657600080fd5b5060065461030a906001600160a01b031681565b6040516001600160a01b0390911681526020016102e1565b34801561032e57600080fd5b506102d561033d366004612b5a565b6001600160a01b03166000908152600c602052604090205460ff1690565b34801561036757600080fd5b5061030a610376366004612ff8565b6008602052600090815260409020546001600160a01b031681565b34801561039d57600080fd5b506103c26103ac366004612ff8565b6000908152600160208190526040909120015490565b6040519081526020016102e1565b3480156103dc57600080fd5b506102ae6103eb366004612b5a565b61085e565b3480156103fc57600080fd5b506102ae61040b36600461302a565b610886565b34801561041c57600080fd5b506102ae61042b36600461302a565b6108b2565b34801561043c57600080fd5b506103c261044b366004612c8d565b61092c565b6102ae61045e36600461314c565b610980565b34801561046f57600080fd5b506102ae61047e366004612d00565b610b43565b34801561048f57600080fd5b506102ae61049e366004612e11565b610d68565b6102ae6104b1366004612c3c565b610dd1565b3480156104c257600080fd5b5060025462010000900460ff166102d5565b3480156104e057600080fd5b5060055461030a906001600160a01b031681565b34801561050057600080fd5b506102d561050f366004612ff8565b600a6020526000908152604090205460ff1681565b34801561053057600080fd5b506103c261053f366004612b5a565b600d6020526000908152604090205481565b34801561055d57600080fd5b506102ae610f07565b34801561057257600080fd5b506102ae610581366004612ea0565b610f45565b34801561059257600080fd5b506102ae6105a1366004612de5565b610fe1565b3480156105b257600080fd5b506102d56105c136600461302a565b611031565b3480156105d257600080fd5b5060045461030a906001600160a01b031681565b3480156105f257600080fd5b506102ae610601366004612d86565b61105c565b34801561061257600080fd5b506103c2600081565b34801561062757600080fd5b506102ae610636366004612b5a565b611297565b34801561064757600080fd5b506102d5610656366004612b5a565b600c6020526000908152604090205460ff1681565b34801561067757600080fd5b506103c260035481565b34801561068d57600080fd5b506103c261069c366004612ff8565b60096020526000908152604090205481565b3480156106ba57600080fd5b506102ae6106c9366004612ea0565b6112bb565b3480156106da57600080fd5b506102ae6106e9366004612e48565b611357565b3480156106fa57600080fd5b506102ae610709366004612bf1565b611380565b34801561071a57600080fd5b506103c2600f5481565b34801561073057600080fd5b5061074461073f366004612b5a565b6114a3565b6040516102e19190613335565b34801561075d57600080fd5b506103c260075481565b34801561077357600080fd5b506102ae610782366004613190565b6114d9565b34801561079357600080fd5b506102ae611775565b3480156107a857600080fd5b506102ae6107b736600461302a565b6117b1565b3480156107c857600080fd5b506102ae6107d7366004612bb0565b6117d8565b6102ae6107ea366004612b77565b611930565b3480156107fb57600080fd5b506103c2600b5481565b34801561081157600080fd5b506103c26000805160206136c383398151915281565b60006001600160e01b03198216637965db0b60e01b148061085857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061086a81336119da565b6108826000805160206136c383398151915283611a3e565b5050565b600082815260016020819052604090912001546108a381336119da565b6108ad8383611a44565b505050565b6001600160a01b03811633146109225760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102a5565b6108828282611aaf565b600380546000918261093d8361363f565b91905055858588866007548760405160200161095f9796959493929190613293565b60405160208183030381529060405280519060200120905095945050505050565b60025462010000900460ff16156109a95760405162461bcd60e51b81526004016102a59061341f565b60008181527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c6020526040812054829060ff16610a1f5760405162461bcd60e51b8152602060048201526014602482015273746f6b656e206e6f742063616e2062726964676560601b60448201526064016102a5565b3480610a5f5760405162461bcd60e51b815260206004820152600f60248201526e62616c616e6365206973207a65726f60881b60448201526064016102a5565b6000610a6f60003388858961092c565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b50505050507faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4610b0560006114a3565b610b0e336114a3565b83600754898b88610b1f60006114a3565b604051610b33989796959493929190613348565b60405180910390a1505050505050565b6000838152600a6020526040902054839060ff1615610b925760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b60448201526064016102a5565b6000818152600a60205260408120805460ff191660011790555460021415610bfc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102a5565b600260008190555462010000900460ff1615610c2a5760405162461bcd60e51b81526004016102a59061341f565b6001600160a01b038816610c5d57600654610c4e906001600160a01b031686611b16565b610c588686611c2c565b610cf0565b6001600160a01b0388166000908152600c602052604090205460ff1615610ce5576040516340c10f1960e01b81526001600160a01b038781166004830152602482018790528916906340c10f1990604401600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50505050610cf0565b610cf0888787611cf5565b8387604051610cff9190613202565b60408051918290038220868352602083018690526001600160a01b038a168383015260608301899052905190916000917fd9fedc891b9a6aebd6a4e09cedbcbb83091a18befe79e2f5a26ec3409469cc8d9181900360800190a450506001600055505050505050565b610d806000805160206136c383398151915233611031565b610d9c5760405162461bcd60e51b81526004016102a5906133e8565b6001600160a01b03929092166000908152600e6020908152604080832093835292905220805460ff1916911515919091179055565b60025462010000900460ff1615610dfa5760405162461bcd60e51b81526004016102a59061341f565b6000610e138533610e0a866114a3565b856158f861092c565b6040516370a0823160e01b815233600482015290915082906001600160a01b038716906370a082319060240160206040518083038186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8f9190613011565b1015610ead5760405162461bcd60e51b81526004016102a5906133bf565b610eb985853085611e10565b7f4b8d975c8ba7569b7af88d44a3f4756798777473e8d62263f0df37ff8560588d85610ee4866114a3565b858486604051610ef89594939291906132f7565b60405180910390a15050505050565b610f1f6000805160206136c383398151915233611031565b610f3b5760405162461bcd60e51b81526004016102a5906133e8565b610f43611f40565b565b610f5d6000805160206136c383398151915233611031565b610f795760405162461bcd60e51b81526004016102a5906133e8565b60005b8151811015610882576000600c6000848481518110610f9d57610f9d613670565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610fd98161363f565b915050610f7c565b610ff96000805160206136c383398151915233611031565b6110155760405162461bcd60e51b81526004016102a5906133e8565b6001600160a01b039091166000908152600d6020526040902055565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025462010000900460ff16156110855760405162461bcd60e51b81526004016102a59061341f565b6001600160a01b0384166000908152600e602090815260408083208484529091529020548490829060ff166110f35760405162461bcd60e51b8152602060048201526014602482015273746f6b656e206e6f742063616e2062726964676560601b60448201526064016102a5565b6000611102873388888861092c565b6040516370a0823160e01b815233600482015290915085906001600160a01b038916906370a082319060240160206040518083038186803b15801561114657600080fd5b505afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e9190613011565b101561119c5760405162461bcd60e51b81526004016102a5906133bf565b6001600160a01b0387166000908152600c602052604090205460ff16156112225760405163079cc67960e41b8152336004820152602481018690526001600160a01b038816906379cc679090604401600060405180830381600087803b15801561120557600080fd5b505af1158015611219573d6000803e3d6000fd5b5050505061122e565b61122e87333088611e10565b7faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4611258886114a3565b611261336114a3565b83600754888b8b61127260006114a3565b604051611286989796959493929190613348565b60405180910390a150505050505050565b60006112a381336119da565b6108826000805160206136c383398151915283611aaf565b6112d36000805160206136c383398151915233611031565b6112ef5760405162461bcd60e51b81526004016102a5906133e8565b60005b8151811015610882576001600c600084848151811061131357611313613670565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061134f8161363f565b9150506112f2565b60025462010000900460ff16156108ad5760405162461bcd60e51b81526004016102a59061341f565b600254610100900460ff1661139b5760025460ff161561139f565b303b155b6114025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102a5565b600254610100900460ff16158015611424576002805461ffff19166101011790555b466007819055600680546001600160a01b038088166001600160a01b031992831617909255600480548784169083161790556005805492861692909116919091179055611472600033611a3e565b61148a6000805160206136c383398151915233611a3e565b50801561149d576002805461ff00191690555b50505050565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b6002600054141561152c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102a5565b600260008190555462010000900460ff161561155a5760405162461bcd60e51b81526004016102a59061341f565b60055460405163016dc52760e41b8152600091829182916001600160a01b0316906316dc52709061158f908790600401613335565b600060405180830381600087803b1580156115a957600080fd5b505af11580156115bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e59190810190612f75565b92509250925082829061160b5760405162461bcd60e51b81526004016102a59190613335565b50600061161782611fdb565b905060005b815181101561176757600082828151811061163957611639613670565b602002602001015190506000816020015160008151811061165c5761165c613670565b60200260200101518060200190518101906116779190613011565b9050600f548114156117525781516001600160a01b03166000908152600d60205260409020546116e95760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c206163726f73732074686520636861696e000000000000000060448201526064016102a5565b6000806000806000806000886040015180602001905181019061170c9190613079565b9750975097509750975097509750506000611728826014015190565b90506000611737856014015190565b9050611748828a83878c8c8c61226f565b5050505050505050505b5050808061175f9061363f565b91505061161c565b505060016000555050505050565b61178d6000805160206136c383398151915233611031565b6117a95760405162461bcd60e51b81526004016102a5906133e8565b610f43612410565b600082815260016020819052604090912001546117ce81336119da565b6108ad8383611aaf565b6117f06000805160206136c383398151915233611031565b61180c5760405162461bcd60e51b81526004016102a5906133e8565b6001600160a01b0383166118ae57600654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f1935050505015801561149d573d6000803e3d6000fd5b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190612f58565b60025462010000900460ff16156119595760405162461bcd60e51b81526004016102a59061341f565b34600061196a8133610e0a866114a3565b90508134101561198c5760405162461bcd60e51b81526004016102a5906133bf565b7f4b8d975c8ba7569b7af88d44a3f4756798777473e8d62263f0df37ff8560588d60006119b8866114a3565b8584866040516119cc9594939291906132f7565b60405180910390a150505050565b6119e48282611031565b610882576119fc816001600160a01b03166014612472565b611a07836020612472565b604051602001611a1892919061321e565b60408051601f198184030181529082905262461bcd60e51b82526102a591600401613335565b61088282825b611a4e8282611031565b6108825760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611ab98282611031565b156108825760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080836001600160a01b0316632e1a7d4d84604051602401611b3b91815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611b749190613202565b6000604051808303816000865af19150503d8060008114611bb1576040519150601f19603f3d011682016040523d82523d6000602084013e611bb6565b606091505b5091509150818015611be0575080511580611be0575080806020019051810190611be09190612f58565b61149d5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a2057695448445241575f4641494c45440060448201526064016102a5565b604080516000808252602082019092526001600160a01b038416908390604051611c569190613202565b60006040518083038185875af1925050503d8060008114611c93576040519150601f19603f3d011682016040523d82523d6000602084013e611c98565b606091505b50509050806108ad5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016102a5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611d519190613202565b6000604051808303816000865af19150503d8060008114611d8e576040519150601f19603f3d011682016040523d82523d6000602084013e611d93565b606091505b5091509150818015611dbd575080511580611dbd575080806020019051810190611dbd9190612f58565b611e095760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016102a5565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e749190613202565b6000604051808303816000865af19150503d8060008114611eb1576040519150601f19603f3d011682016040523d82523d6000602084013e611eb6565b606091505b5091509150818015611ee0575080511580611ee0575080806020019051810190611ee09190612f58565b611f385760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016102a5565b505050505050565b60025462010000900460ff16611f8f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a5565b6002805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606060006120186120138460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b612614565b905080516001600160401b0381111561203357612033613686565b60405190808252806020026020018201604052801561209157816020015b61207e604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816120515790505b50915060005b81518110156122685760006120d96120c78484815181106120ba576120ba613670565b6020026020010151612614565b6001815181106120ba576120ba613670565b516001600160401b038111156120f1576120f1613686565b60405190808252806020026020018201604052801561212457816020015b606081526020019060019003908161210f5790505b50905060005b6121426120c78585815181106120ba576120ba613670565b518110156121b3576121836121656120c78686815181106120ba576120ba613670565b828151811061217657612176613670565b6020026020010151612729565b82828151811061219557612195613670565b602002602001018190525080806121ab9061363f565b91505061212a565b5060405180606001604052806121f66121d78686815181106120ba576120ba613670565b6000815181106121e9576121e9613670565b60200260200101516127a6565b6001600160a01b031681526020018281526020016122346122228686815181106120ba576120ba613670565b60028151811061217657612176613670565b81525084838151811061224957612249613670565b60200260200101819052505080806122609061363f565b915050612097565b5050919050565b6000838152600a6020526040902054839060ff16156122be5760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b60448201526064016102a5565b6000818152600a60205260409020805460ff191660011790556001600160a01b03881661230a576006546122fb906001600160a01b031686611b16565b6123058686611c2c565b61239d565b6001600160a01b0388166000908152600c602052604090205460ff1615612392576040516340c10f1960e01b81526001600160a01b038781166004830152602482018790528916906340c10f1990604401600060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b5050505061239d565b61239d888787611cf5565b83876040516123ac9190613202565b60408051918290038220868352602083018690526001600160a01b038a168383015260608301899052905190916000917fd9fedc891b9a6aebd6a4e09cedbcbb83091a18befe79e2f5a26ec3409469cc8d9181900360800190a45050505050505050565b60025462010000900460ff16156124395760405162461bcd60e51b81526004016102a59061341f565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fbe3390565b606060006124818360026135a3565b61248c9060026134a0565b6001600160401b038111156124a3576124a3613686565b6040519080825280601f01601f1916602001820160405280156124cd576020820181803683370190505b509050600360fc1b816000815181106124e8576124e8613670565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061251757612517613670565b60200101906001600160f81b031916908160001a905350600061253b8460026135a3565b6125469060016134a0565b90505b60018111156125be576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061257a5761257a613670565b1a60f81b82828151811061259057612590613670565b60200101906001600160f81b031916908160001a90535060049490941c936125b781613628565b9050612549565b50831561260d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102a5565b9392505050565b606061261f826127c0565b61262857600080fd5b6000612633836127f9565b90506000816001600160401b0381111561264f5761264f613686565b60405190808252806020026020018201604052801561269457816020015b604080518082019091526000808252602082015281526020019060019003908161266d5790505b50905060006126a6856020015161287c565b85602001516126b591906134a0565b90506000805b8481101561271e576126cc836128f7565b91506040518060400160405280838152602001848152508482815181106126f5576126f5613670565b602090810291909101015261270a82846134a0565b9250806127168161363f565b9150506126bb565b509195945050505050565b805160609061273757600080fd5b600080612743846129a0565b915091506000816001600160401b0381111561276157612761613686565b6040519080825280601f01601f19166020018201604052801561278b576020820181803683370190505b5090506020810161279d8482856129e7565b50949350505050565b80516000906015146127b757600080fd5b61085882612a66565b80516000906127d157506000919050565b6020820151805160001a9060c08210156127ef575060009392505050565b5060019392505050565b805160009061280a57506000919050565b60008061281a846020015161287c565b846020015161282991906134a0565b905060008460000151856020015161284191906134a0565b90505b8082101561287357612855826128f7565b61285f90836134a0565b91508261286b8161363f565b935050612844565b50909392505050565b8051600090811a60808110156128955750600092915050565b60b88110806128b0575060c081108015906128b0575060f881105b156128be5750600192915050565b60c08110156128eb576128d3600160b86135d9565b6128e09060ff16826135c2565b61260d9060016134a0565b6128d3600160f86135d9565b80516000908190811a60808110156129125760019150612999565b60b8811015612938576129266080826135c2565b6129319060016134a0565b9150612999565b60c08110156129655760b78103600185019450806020036101000a85510460018201810193505050612999565b60f88110156129795761292660c0826135c2565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b60008060006129b2846020015161287c565b905060008185602001516129c691906134a0565b905060008286600001516129da91906135c2565b9196919550909350505050565b806129f157505050565b60208110612a295782518252612a086020846134a0565b9250612a156020836134a0565b9150612a226020826135c2565b90506129f1565b80156108ad5760006001612a3e8360206135c2565b612a4a906101006134fb565b612a5491906135c2565b84518451821691191617835250505050565b805160009015801590612a7b57508151602110155b612a8457600080fd5b600080612a90846129a0565b815191935091506020821015612aac5760208290036101000a90045b949350505050565b6000612ac7612ac284613479565b613449565b9050828152838383011115612adb57600080fd5b61260d8360208301846135fc565b600082601f830112612afa57600080fd5b8135612b08612ac282613479565b818152846020838601011115612b1d57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612b4b57600080fd5b61260d83835160208501612ab4565b600060208284031215612b6c57600080fd5b813561260d8161369c565b60008060408385031215612b8a57600080fd5b8235612b958161369c565b91506020830135612ba58161369c565b809150509250929050565b600080600060608486031215612bc557600080fd5b8335612bd08161369c565b92506020840135612be08161369c565b929592945050506040919091013590565b600080600060608486031215612c0657600080fd5b8335612c118161369c565b92506020840135612c218161369c565b91506040840135612c318161369c565b809150509250925092565b60008060008060808587031215612c5257600080fd5b8435612c5d8161369c565b93506020850135612c6d8161369c565b92506040850135612c7d8161369c565b9396929550929360600135925050565b600080600080600060a08688031215612ca557600080fd5b8535612cb08161369c565b94506020860135612cc08161369c565b935060408601356001600160401b03811115612cdb57600080fd5b612ce788828901612ae9565b9598949750949560608101359550608001359392505050565b600080600080600080600060e0888a031215612d1b57600080fd5b8735612d268161369c565b965060208801356001600160401b03811115612d4157600080fd5b612d4d8a828b01612ae9565b9650506040880135612d5e8161369c565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60008060008060808587031215612d9c57600080fd5b8435612da78161369c565b935060208501356001600160401b03811115612dc257600080fd5b612dce87828801612ae9565b949794965050505060408301359260600135919050565b60008060408385031215612df857600080fd5b8235612e038161369c565b946020939093013593505050565b600080600060608486031215612e2657600080fd5b8335612e318161369c565b9250602084013591506040840135612c31816136b4565b600080600060608486031215612e5d57600080fd5b8335612e688161369c565b92506020840135915060408401356001600160401b03811115612e8a57600080fd5b612e9686828701612ae9565b9150509250925092565b60006020808385031215612eb357600080fd5b82356001600160401b0380821115612eca57600080fd5b818501915085601f830112612ede57600080fd5b813581811115612ef057612ef0613686565b8060051b9150612f01848301613449565b8181528481019084860184860187018a1015612f1c57600080fd5b600095505b83861015612f4b5780359450612f368561369c565b84835260019590950194918601918601612f21565b5098975050505050505050565b600060208284031215612f6a57600080fd5b815161260d816136b4565b600080600060608486031215612f8a57600080fd5b8351612f95816136b4565b60208501519093506001600160401b0380821115612fb257600080fd5b818601915086601f830112612fc657600080fd5b612fd587835160208501612ab4565b93506040860151915080821115612feb57600080fd5b50612e9686828701612b3a565b60006020828403121561300a57600080fd5b5035919050565b60006020828403121561302357600080fd5b5051919050565b6000806040838503121561303d57600080fd5b823591506020830135612ba58161369c565b60006020828403121561306157600080fd5b81356001600160e01b03198116811461260d57600080fd5b600080600080600080600080610100898b03121561309657600080fd5b88516001600160401b03808211156130ad57600080fd5b6130b98c838d01612b3a565b995060208b01519150808211156130cf57600080fd5b6130db8c838d01612b3a565b985060408b0151975060608b0151965060808b0151955060a08b015191508082111561310657600080fd5b6131128c838d01612b3a565b945060c08b0151935060e08b015191508082111561312f57600080fd5b5061313c8b828c01612b3a565b9150509295985092959890939650565b6000806040838503121561315f57600080fd5b82356001600160401b0381111561317557600080fd5b61318185828601612ae9565b95602094909401359450505050565b600080604083850312156131a357600080fd5b8235915060208301356001600160401b038111156131c057600080fd5b6131cc85828601612ae9565b9150509250929050565b600081518084526131ee8160208601602086016135fc565b601f01601f19169290920160200192915050565b600082516132148184602087016135fc565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132568160178501602088016135fc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132878160288401602088016135fc565b01602801949350505050565b87815260006bffffffffffffffffffffffff19808960601b16602084015287516132c4816034860160208c016135fc565b60609790971b1691909501603481019190915260488101939093526068830191909152608882015260a801949350505050565b600060018060a01b03808816835260a0602084015261331960a08401886131d6565b9516604083015250606081019290925260809091015292915050565b60208152600061260d60208301846131d6565b600061010080835261335c8184018c6131d6565b90508281036020840152613370818b6131d6565b905088604084015287606084015286608084015282810360a084015261339681876131d6565b90508460c084015282810360e08401526133b081856131d6565b9b9a5050505050505050505050565b6020808252600f908201526e62616c616e636520746f6f206c6f7760881b604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f742061206d616e61676572000000000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561347157613471613686565b604052919050565b60006001600160401b0382111561349257613492613686565b50601f01601f191660200190565b600082198211156134b3576134b361365a565b500190565b600181815b808511156134f35781600019048211156134d9576134d961365a565b808516156134e657918102915b93841c93908002906134bd565b509250929050565b600061260d838360008261351157506001610858565b8161351e57506000610858565b8160018114613534576002811461353e5761355a565b6001915050610858565b60ff84111561354f5761354f61365a565b50506001821b610858565b5060208310610133831016604e8410600b841016171561357d575081810a610858565b61358783836134b8565b806000190482111561359b5761359b61365a565b029392505050565b60008160001904831182151516156135bd576135bd61365a565b500290565b6000828210156135d4576135d461365a565b500390565b600060ff821660ff8416808210156135f3576135f361365a565b90039392505050565b60005b838110156136175781810151838201526020016135ff565b8381111561149d5750506000910152565b6000816136375761363761365a565b506000190190565b60006000198214156136535761365361365a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146136b157600080fd5b50565b80151581146136b157600080fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220e5236bca4cc7d2c9a8225a23d7478e8639748e8b19a3c2f10da20577f65a1d2464736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061024a5760003560e01c806391d1485411610139578063c0c53b8b116100b6578063d431b1ac1161007a578063d431b1ac14610787578063d547741f1461079c578063d9caed12146107bc578063dc3aff90146107dc578063e6984f8d146107ef578063ec87621c1461080557600080fd5b8063c0c53b8b146106ee578063c3543b5c1461070e578063cb0ff83414610724578063cc9e3e8914610751578063d24c69441461076757600080fd5b8063af653636116100fd578063af6536361461063b578063affed0e01461066b578063b2f177b314610681578063bbe35948146106ae578063bf5765ff146106ce57600080fd5b806391d14854146105a65780639485d293146105c6578063981aff4e146105e6578063a217fddf14610606578063ac18de431461061b57600080fd5b806347397cd7116101c75780636af6400d1161018b5780636af6400d146104f45780637d42fd2d14610524578063848cb5c6146105515780638bc67517146105665780638d2e68151461058657600080fd5b806347397cd7146104635780635062cac5146104835780635b6edeea146104a35780635c975abb146104b65780635f670bd3146104d457600080fd5b80632d06177a1161020e5780632d06177a146103d05780632f2ff15d146103f057806336568abe14610410578063367cf0d4146104305780633d4a2f6e1461045057600080fd5b806301ffc9a7146102b55780630babd864146102ea5780630bf1b36a1461032257806315e652c71461035b578063248a9ca31461039157600080fd5b366102b0576006546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792063616e20726563656976652077546f6b656e00000000000000000060448201526064015b60405180910390fd5b005b600080fd5b3480156102c157600080fd5b506102d56102d036600461304f565b610827565b60405190151581526020015b60405180910390f35b3480156102f657600080fd5b5060065461030a906001600160a01b031681565b6040516001600160a01b0390911681526020016102e1565b34801561032e57600080fd5b506102d561033d366004612b5a565b6001600160a01b03166000908152600c602052604090205460ff1690565b34801561036757600080fd5b5061030a610376366004612ff8565b6008602052600090815260409020546001600160a01b031681565b34801561039d57600080fd5b506103c26103ac366004612ff8565b6000908152600160208190526040909120015490565b6040519081526020016102e1565b3480156103dc57600080fd5b506102ae6103eb366004612b5a565b61085e565b3480156103fc57600080fd5b506102ae61040b36600461302a565b610886565b34801561041c57600080fd5b506102ae61042b36600461302a565b6108b2565b34801561043c57600080fd5b506103c261044b366004612c8d565b61092c565b6102ae61045e36600461314c565b610980565b34801561046f57600080fd5b506102ae61047e366004612d00565b610b43565b34801561048f57600080fd5b506102ae61049e366004612e11565b610d68565b6102ae6104b1366004612c3c565b610dd1565b3480156104c257600080fd5b5060025462010000900460ff166102d5565b3480156104e057600080fd5b5060055461030a906001600160a01b031681565b34801561050057600080fd5b506102d561050f366004612ff8565b600a6020526000908152604090205460ff1681565b34801561053057600080fd5b506103c261053f366004612b5a565b600d6020526000908152604090205481565b34801561055d57600080fd5b506102ae610f07565b34801561057257600080fd5b506102ae610581366004612ea0565b610f45565b34801561059257600080fd5b506102ae6105a1366004612de5565b610fe1565b3480156105b257600080fd5b506102d56105c136600461302a565b611031565b3480156105d257600080fd5b5060045461030a906001600160a01b031681565b3480156105f257600080fd5b506102ae610601366004612d86565b61105c565b34801561061257600080fd5b506103c2600081565b34801561062757600080fd5b506102ae610636366004612b5a565b611297565b34801561064757600080fd5b506102d5610656366004612b5a565b600c6020526000908152604090205460ff1681565b34801561067757600080fd5b506103c260035481565b34801561068d57600080fd5b506103c261069c366004612ff8565b60096020526000908152604090205481565b3480156106ba57600080fd5b506102ae6106c9366004612ea0565b6112bb565b3480156106da57600080fd5b506102ae6106e9366004612e48565b611357565b3480156106fa57600080fd5b506102ae610709366004612bf1565b611380565b34801561071a57600080fd5b506103c2600f5481565b34801561073057600080fd5b5061074461073f366004612b5a565b6114a3565b6040516102e19190613335565b34801561075d57600080fd5b506103c260075481565b34801561077357600080fd5b506102ae610782366004613190565b6114d9565b34801561079357600080fd5b506102ae611775565b3480156107a857600080fd5b506102ae6107b736600461302a565b6117b1565b3480156107c857600080fd5b506102ae6107d7366004612bb0565b6117d8565b6102ae6107ea366004612b77565b611930565b3480156107fb57600080fd5b506103c2600b5481565b34801561081157600080fd5b506103c26000805160206136c383398151915281565b60006001600160e01b03198216637965db0b60e01b148061085857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061086a81336119da565b6108826000805160206136c383398151915283611a3e565b5050565b600082815260016020819052604090912001546108a381336119da565b6108ad8383611a44565b505050565b6001600160a01b03811633146109225760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102a5565b6108828282611aaf565b600380546000918261093d8361363f565b91905055858588866007548760405160200161095f9796959493929190613293565b60405160208183030381529060405280519060200120905095945050505050565b60025462010000900460ff16156109a95760405162461bcd60e51b81526004016102a59061341f565b60008181527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c6020526040812054829060ff16610a1f5760405162461bcd60e51b8152602060048201526014602482015273746f6b656e206e6f742063616e2062726964676560601b60448201526064016102a5565b3480610a5f5760405162461bcd60e51b815260206004820152600f60248201526e62616c616e6365206973207a65726f60881b60448201526064016102a5565b6000610a6f60003388858961092c565b9050600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ac157600080fd5b505af1158015610ad5573d6000803e3d6000fd5b50505050507faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4610b0560006114a3565b610b0e336114a3565b83600754898b88610b1f60006114a3565b604051610b33989796959493929190613348565b60405180910390a1505050505050565b6000838152600a6020526040902054839060ff1615610b925760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b60448201526064016102a5565b6000818152600a60205260408120805460ff191660011790555460021415610bfc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102a5565b600260008190555462010000900460ff1615610c2a5760405162461bcd60e51b81526004016102a59061341f565b6001600160a01b038816610c5d57600654610c4e906001600160a01b031686611b16565b610c588686611c2c565b610cf0565b6001600160a01b0388166000908152600c602052604090205460ff1615610ce5576040516340c10f1960e01b81526001600160a01b038781166004830152602482018790528916906340c10f1990604401600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50505050610cf0565b610cf0888787611cf5565b8387604051610cff9190613202565b60408051918290038220868352602083018690526001600160a01b038a168383015260608301899052905190916000917fd9fedc891b9a6aebd6a4e09cedbcbb83091a18befe79e2f5a26ec3409469cc8d9181900360800190a450506001600055505050505050565b610d806000805160206136c383398151915233611031565b610d9c5760405162461bcd60e51b81526004016102a5906133e8565b6001600160a01b03929092166000908152600e6020908152604080832093835292905220805460ff1916911515919091179055565b60025462010000900460ff1615610dfa5760405162461bcd60e51b81526004016102a59061341f565b6000610e138533610e0a866114a3565b856158f861092c565b6040516370a0823160e01b815233600482015290915082906001600160a01b038716906370a082319060240160206040518083038186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8f9190613011565b1015610ead5760405162461bcd60e51b81526004016102a5906133bf565b610eb985853085611e10565b7f4b8d975c8ba7569b7af88d44a3f4756798777473e8d62263f0df37ff8560588d85610ee4866114a3565b858486604051610ef89594939291906132f7565b60405180910390a15050505050565b610f1f6000805160206136c383398151915233611031565b610f3b5760405162461bcd60e51b81526004016102a5906133e8565b610f43611f40565b565b610f5d6000805160206136c383398151915233611031565b610f795760405162461bcd60e51b81526004016102a5906133e8565b60005b8151811015610882576000600c6000848481518110610f9d57610f9d613670565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610fd98161363f565b915050610f7c565b610ff96000805160206136c383398151915233611031565b6110155760405162461bcd60e51b81526004016102a5906133e8565b6001600160a01b039091166000908152600d6020526040902055565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025462010000900460ff16156110855760405162461bcd60e51b81526004016102a59061341f565b6001600160a01b0384166000908152600e602090815260408083208484529091529020548490829060ff166110f35760405162461bcd60e51b8152602060048201526014602482015273746f6b656e206e6f742063616e2062726964676560601b60448201526064016102a5565b6000611102873388888861092c565b6040516370a0823160e01b815233600482015290915085906001600160a01b038916906370a082319060240160206040518083038186803b15801561114657600080fd5b505afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e9190613011565b101561119c5760405162461bcd60e51b81526004016102a5906133bf565b6001600160a01b0387166000908152600c602052604090205460ff16156112225760405163079cc67960e41b8152336004820152602481018690526001600160a01b038816906379cc679090604401600060405180830381600087803b15801561120557600080fd5b505af1158015611219573d6000803e3d6000fd5b5050505061122e565b61122e87333088611e10565b7faca0a1067548270e80c1209ec69b5381d80bdaf345ad70cf7f00af9c6ed3f9b4611258886114a3565b611261336114a3565b83600754888b8b61127260006114a3565b604051611286989796959493929190613348565b60405180910390a150505050505050565b60006112a381336119da565b6108826000805160206136c383398151915283611aaf565b6112d36000805160206136c383398151915233611031565b6112ef5760405162461bcd60e51b81526004016102a5906133e8565b60005b8151811015610882576001600c600084848151811061131357611313613670565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061134f8161363f565b9150506112f2565b60025462010000900460ff16156108ad5760405162461bcd60e51b81526004016102a59061341f565b600254610100900460ff1661139b5760025460ff161561139f565b303b155b6114025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102a5565b600254610100900460ff16158015611424576002805461ffff19166101011790555b466007819055600680546001600160a01b038088166001600160a01b031992831617909255600480548784169083161790556005805492861692909116919091179055611472600033611a3e565b61148a6000805160206136c383398151915233611a3e565b50801561149d576002805461ff00191690555b50505050565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b6002600054141561152c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102a5565b600260008190555462010000900460ff161561155a5760405162461bcd60e51b81526004016102a59061341f565b60055460405163016dc52760e41b8152600091829182916001600160a01b0316906316dc52709061158f908790600401613335565b600060405180830381600087803b1580156115a957600080fd5b505af11580156115bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e59190810190612f75565b92509250925082829061160b5760405162461bcd60e51b81526004016102a59190613335565b50600061161782611fdb565b905060005b815181101561176757600082828151811061163957611639613670565b602002602001015190506000816020015160008151811061165c5761165c613670565b60200260200101518060200190518101906116779190613011565b9050600f548114156117525781516001600160a01b03166000908152600d60205260409020546116e95760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c206163726f73732074686520636861696e000000000000000060448201526064016102a5565b6000806000806000806000886040015180602001905181019061170c9190613079565b9750975097509750975097509750506000611728826014015190565b90506000611737856014015190565b9050611748828a83878c8c8c61226f565b5050505050505050505b5050808061175f9061363f565b91505061161c565b505060016000555050505050565b61178d6000805160206136c383398151915233611031565b6117a95760405162461bcd60e51b81526004016102a5906133e8565b610f43612410565b600082815260016020819052604090912001546117ce81336119da565b6108ad8383611aaf565b6117f06000805160206136c383398151915233611031565b61180c5760405162461bcd60e51b81526004016102a5906133e8565b6001600160a01b0383166118ae57600654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f1935050505015801561149d573d6000803e3d6000fd5b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190612f58565b60025462010000900460ff16156119595760405162461bcd60e51b81526004016102a59061341f565b34600061196a8133610e0a866114a3565b90508134101561198c5760405162461bcd60e51b81526004016102a5906133bf565b7f4b8d975c8ba7569b7af88d44a3f4756798777473e8d62263f0df37ff8560588d60006119b8866114a3565b8584866040516119cc9594939291906132f7565b60405180910390a150505050565b6119e48282611031565b610882576119fc816001600160a01b03166014612472565b611a07836020612472565b604051602001611a1892919061321e565b60408051601f198184030181529082905262461bcd60e51b82526102a591600401613335565b61088282825b611a4e8282611031565b6108825760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611ab98282611031565b156108825760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080836001600160a01b0316632e1a7d4d84604051602401611b3b91815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611b749190613202565b6000604051808303816000865af19150503d8060008114611bb1576040519150601f19603f3d011682016040523d82523d6000602084013e611bb6565b606091505b5091509150818015611be0575080511580611be0575080806020019051810190611be09190612f58565b61149d5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a2057695448445241575f4641494c45440060448201526064016102a5565b604080516000808252602082019092526001600160a01b038416908390604051611c569190613202565b60006040518083038185875af1925050503d8060008114611c93576040519150601f19603f3d011682016040523d82523d6000602084013e611c98565b606091505b50509050806108ad5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016102a5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611d519190613202565b6000604051808303816000865af19150503d8060008114611d8e576040519150601f19603f3d011682016040523d82523d6000602084013e611d93565b606091505b5091509150818015611dbd575080511580611dbd575080806020019051810190611dbd9190612f58565b611e095760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016102a5565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e749190613202565b6000604051808303816000865af19150503d8060008114611eb1576040519150601f19603f3d011682016040523d82523d6000602084013e611eb6565b606091505b5091509150818015611ee0575080511580611ee0575080806020019051810190611ee09190612f58565b611f385760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016102a5565b505050505050565b60025462010000900460ff16611f8f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a5565b6002805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606060006120186120138460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b612614565b905080516001600160401b0381111561203357612033613686565b60405190808252806020026020018201604052801561209157816020015b61207e604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816120515790505b50915060005b81518110156122685760006120d96120c78484815181106120ba576120ba613670565b6020026020010151612614565b6001815181106120ba576120ba613670565b516001600160401b038111156120f1576120f1613686565b60405190808252806020026020018201604052801561212457816020015b606081526020019060019003908161210f5790505b50905060005b6121426120c78585815181106120ba576120ba613670565b518110156121b3576121836121656120c78686815181106120ba576120ba613670565b828151811061217657612176613670565b6020026020010151612729565b82828151811061219557612195613670565b602002602001018190525080806121ab9061363f565b91505061212a565b5060405180606001604052806121f66121d78686815181106120ba576120ba613670565b6000815181106121e9576121e9613670565b60200260200101516127a6565b6001600160a01b031681526020018281526020016122346122228686815181106120ba576120ba613670565b60028151811061217657612176613670565b81525084838151811061224957612249613670565b60200260200101819052505080806122609061363f565b915050612097565b5050919050565b6000838152600a6020526040902054839060ff16156122be5760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b60448201526064016102a5565b6000818152600a60205260409020805460ff191660011790556001600160a01b03881661230a576006546122fb906001600160a01b031686611b16565b6123058686611c2c565b61239d565b6001600160a01b0388166000908152600c602052604090205460ff1615612392576040516340c10f1960e01b81526001600160a01b038781166004830152602482018790528916906340c10f1990604401600060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b5050505061239d565b61239d888787611cf5565b83876040516123ac9190613202565b60408051918290038220868352602083018690526001600160a01b038a168383015260608301899052905190916000917fd9fedc891b9a6aebd6a4e09cedbcbb83091a18befe79e2f5a26ec3409469cc8d9181900360800190a45050505050505050565b60025462010000900460ff16156124395760405162461bcd60e51b81526004016102a59061341f565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fbe3390565b606060006124818360026135a3565b61248c9060026134a0565b6001600160401b038111156124a3576124a3613686565b6040519080825280601f01601f1916602001820160405280156124cd576020820181803683370190505b509050600360fc1b816000815181106124e8576124e8613670565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061251757612517613670565b60200101906001600160f81b031916908160001a905350600061253b8460026135a3565b6125469060016134a0565b90505b60018111156125be576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061257a5761257a613670565b1a60f81b82828151811061259057612590613670565b60200101906001600160f81b031916908160001a90535060049490941c936125b781613628565b9050612549565b50831561260d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102a5565b9392505050565b606061261f826127c0565b61262857600080fd5b6000612633836127f9565b90506000816001600160401b0381111561264f5761264f613686565b60405190808252806020026020018201604052801561269457816020015b604080518082019091526000808252602082015281526020019060019003908161266d5790505b50905060006126a6856020015161287c565b85602001516126b591906134a0565b90506000805b8481101561271e576126cc836128f7565b91506040518060400160405280838152602001848152508482815181106126f5576126f5613670565b602090810291909101015261270a82846134a0565b9250806127168161363f565b9150506126bb565b509195945050505050565b805160609061273757600080fd5b600080612743846129a0565b915091506000816001600160401b0381111561276157612761613686565b6040519080825280601f01601f19166020018201604052801561278b576020820181803683370190505b5090506020810161279d8482856129e7565b50949350505050565b80516000906015146127b757600080fd5b61085882612a66565b80516000906127d157506000919050565b6020820151805160001a9060c08210156127ef575060009392505050565b5060019392505050565b805160009061280a57506000919050565b60008061281a846020015161287c565b846020015161282991906134a0565b905060008460000151856020015161284191906134a0565b90505b8082101561287357612855826128f7565b61285f90836134a0565b91508261286b8161363f565b935050612844565b50909392505050565b8051600090811a60808110156128955750600092915050565b60b88110806128b0575060c081108015906128b0575060f881105b156128be5750600192915050565b60c08110156128eb576128d3600160b86135d9565b6128e09060ff16826135c2565b61260d9060016134a0565b6128d3600160f86135d9565b80516000908190811a60808110156129125760019150612999565b60b8811015612938576129266080826135c2565b6129319060016134a0565b9150612999565b60c08110156129655760b78103600185019450806020036101000a85510460018201810193505050612999565b60f88110156129795761292660c0826135c2565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b60008060006129b2846020015161287c565b905060008185602001516129c691906134a0565b905060008286600001516129da91906135c2565b9196919550909350505050565b806129f157505050565b60208110612a295782518252612a086020846134a0565b9250612a156020836134a0565b9150612a226020826135c2565b90506129f1565b80156108ad5760006001612a3e8360206135c2565b612a4a906101006134fb565b612a5491906135c2565b84518451821691191617835250505050565b805160009015801590612a7b57508151602110155b612a8457600080fd5b600080612a90846129a0565b815191935091506020821015612aac5760208290036101000a90045b949350505050565b6000612ac7612ac284613479565b613449565b9050828152838383011115612adb57600080fd5b61260d8360208301846135fc565b600082601f830112612afa57600080fd5b8135612b08612ac282613479565b818152846020838601011115612b1d57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612b4b57600080fd5b61260d83835160208501612ab4565b600060208284031215612b6c57600080fd5b813561260d8161369c565b60008060408385031215612b8a57600080fd5b8235612b958161369c565b91506020830135612ba58161369c565b809150509250929050565b600080600060608486031215612bc557600080fd5b8335612bd08161369c565b92506020840135612be08161369c565b929592945050506040919091013590565b600080600060608486031215612c0657600080fd5b8335612c118161369c565b92506020840135612c218161369c565b91506040840135612c318161369c565b809150509250925092565b60008060008060808587031215612c5257600080fd5b8435612c5d8161369c565b93506020850135612c6d8161369c565b92506040850135612c7d8161369c565b9396929550929360600135925050565b600080600080600060a08688031215612ca557600080fd5b8535612cb08161369c565b94506020860135612cc08161369c565b935060408601356001600160401b03811115612cdb57600080fd5b612ce788828901612ae9565b9598949750949560608101359550608001359392505050565b600080600080600080600060e0888a031215612d1b57600080fd5b8735612d268161369c565b965060208801356001600160401b03811115612d4157600080fd5b612d4d8a828b01612ae9565b9650506040880135612d5e8161369c565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60008060008060808587031215612d9c57600080fd5b8435612da78161369c565b935060208501356001600160401b03811115612dc257600080fd5b612dce87828801612ae9565b949794965050505060408301359260600135919050565b60008060408385031215612df857600080fd5b8235612e038161369c565b946020939093013593505050565b600080600060608486031215612e2657600080fd5b8335612e318161369c565b9250602084013591506040840135612c31816136b4565b600080600060608486031215612e5d57600080fd5b8335612e688161369c565b92506020840135915060408401356001600160401b03811115612e8a57600080fd5b612e9686828701612ae9565b9150509250925092565b60006020808385031215612eb357600080fd5b82356001600160401b0380821115612eca57600080fd5b818501915085601f830112612ede57600080fd5b813581811115612ef057612ef0613686565b8060051b9150612f01848301613449565b8181528481019084860184860187018a1015612f1c57600080fd5b600095505b83861015612f4b5780359450612f368561369c565b84835260019590950194918601918601612f21565b5098975050505050505050565b600060208284031215612f6a57600080fd5b815161260d816136b4565b600080600060608486031215612f8a57600080fd5b8351612f95816136b4565b60208501519093506001600160401b0380821115612fb257600080fd5b818601915086601f830112612fc657600080fd5b612fd587835160208501612ab4565b93506040860151915080821115612feb57600080fd5b50612e9686828701612b3a565b60006020828403121561300a57600080fd5b5035919050565b60006020828403121561302357600080fd5b5051919050565b6000806040838503121561303d57600080fd5b823591506020830135612ba58161369c565b60006020828403121561306157600080fd5b81356001600160e01b03198116811461260d57600080fd5b600080600080600080600080610100898b03121561309657600080fd5b88516001600160401b03808211156130ad57600080fd5b6130b98c838d01612b3a565b995060208b01519150808211156130cf57600080fd5b6130db8c838d01612b3a565b985060408b0151975060608b0151965060808b0151955060a08b015191508082111561310657600080fd5b6131128c838d01612b3a565b945060c08b0151935060e08b015191508082111561312f57600080fd5b5061313c8b828c01612b3a565b9150509295985092959890939650565b6000806040838503121561315f57600080fd5b82356001600160401b0381111561317557600080fd5b61318185828601612ae9565b95602094909401359450505050565b600080604083850312156131a357600080fd5b8235915060208301356001600160401b038111156131c057600080fd5b6131cc85828601612ae9565b9150509250929050565b600081518084526131ee8160208601602086016135fc565b601f01601f19169290920160200192915050565b600082516132148184602087016135fc565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132568160178501602088016135fc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132878160288401602088016135fc565b01602801949350505050565b87815260006bffffffffffffffffffffffff19808960601b16602084015287516132c4816034860160208c016135fc565b60609790971b1691909501603481019190915260488101939093526068830191909152608882015260a801949350505050565b600060018060a01b03808816835260a0602084015261331960a08401886131d6565b9516604083015250606081019290925260809091015292915050565b60208152600061260d60208301846131d6565b600061010080835261335c8184018c6131d6565b90508281036020840152613370818b6131d6565b905088604084015287606084015286608084015282810360a084015261339681876131d6565b90508460c084015282810360e08401526133b081856131d6565b9b9a5050505050505050505050565b6020808252600f908201526e62616c616e636520746f6f206c6f7760881b604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f742061206d616e61676572000000000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561347157613471613686565b604052919050565b60006001600160401b0382111561349257613492613686565b50601f01601f191660200190565b600082198211156134b3576134b361365a565b500190565b600181815b808511156134f35781600019048211156134d9576134d961365a565b808516156134e657918102915b93841c93908002906134bd565b509250929050565b600061260d838360008261351157506001610858565b8161351e57506000610858565b8160018114613534576002811461353e5761355a565b6001915050610858565b60ff84111561354f5761354f61365a565b50506001821b610858565b5060208310610133831016604e8410600b841016171561357d575081810a610858565b61358783836134b8565b806000190482111561359b5761359b61365a565b029392505050565b60008160001904831182151516156135bd576135bd61365a565b500290565b6000828210156135d4576135d461365a565b500390565b600060ff821660ff8416808210156135f3576135f361365a565b90039392505050565b60005b838110156136175781810151838201526020016135ff565b8381111561149d5750506000910152565b6000816136375761363761365a565b506000190190565b60006000198214156136535761365361365a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146136b157600080fd5b50565b80151581146136b157600080fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220e5236bca4cc7d2c9a8225a23d7478e8639748e8b19a3c2f10da20577f65a1d2464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 558,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 388,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 391,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 473,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "_paused",
        "offset": 2,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2146,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2149,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "mapToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1211"
      },
      {
        "astId": 2152,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "lightNode",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ILightNode)3403"
      },
      {
        "astId": 2154,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "wToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2156,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "selfChainId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2160,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "tokenRegister",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2164,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "chainGasFee",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2168,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "orderList",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2170,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "chainGasFees",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2174,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "authToken",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2178,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "bridgeAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2184,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "canBridgeToken",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2280,
        "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
        "label": "mapTransferOutTopic",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1211": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILightNode)3403": {
        "encoding": "inplace",
        "label": "contract ILightNode",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MapCrossChainService.sol:MapCrossChainService",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}