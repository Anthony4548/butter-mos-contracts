{
  "address": "0x41ce369Ea24cb5568ff5A88d6AC5d114627EFA48",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "checkMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getRelayChainAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_fromToken",
          "type": "bytes"
        }
      ],
      "name": "getRelayChainToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "getToChainAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "getToChainToken",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_toChainToken",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "getToChainTokenInfo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "toChainToken",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenRegisterV2.FeeRate",
          "name": "feeRate",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "getTokenFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getVaultToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_fromToken",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "mapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_mintable",
          "type": "bool"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lowest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_highest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setTokenFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "vaultToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokenMappingList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x344461d6f66cbbabf18d218cedcdeec7ff59eeafc7439a7acbf3ce393069ec80",
  "receipt": {
    "to": null,
    "from": "0x8c9b3cAf7DedD3003f53312779c1b92ba1625D94",
    "contractAddress": "0x41ce369Ea24cb5568ff5A88d6AC5d114627EFA48",
    "transactionIndex": 0,
    "gasUsed": "1738726",
    "logsBloom": "0x
    "blockHash": "0xbb6efb45eaeebdcdd6af85267c9bc09df044711489a70bb456ece4bdadadde53",
    "transactionHash": "0x344461d6f66cbbabf18d218cedcdeec7ff59eeafc7439a7acbf3ce393069ec80",
    "logs": [],
    "blockNumber": 606060,
    "cumulativeGasUsed": "1738726",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8585bbe8893d9d3afe41ff28fc8523ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRelayChainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_fromToken\",\"type\":\"bytes\"}],\"name\":\"getRelayChainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"getToChainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"getToChainToken\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_toChainToken\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"getToChainTokenInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"toChainToken\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenRegisterV2.FeeRate\",\"name\":\"feeRate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"getTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getVaultToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_fromToken\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"mapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mintable\",\"type\":\"bool\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"vaultToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenMappingList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenRegisterV2.sol\":\"TokenRegisterV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/TokenRegisterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interface/ITokenRegisterV2.sol\\\";\\nimport \\\"./interface/IVaultTokenV2.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\n\\ncontract TokenRegisterV2 is ITokenRegisterV2,Initializable,UUPSUpgradeable {\\n    using SafeMath for uint;\\n\\n    uint256 constant MAX_RATE_UNI = 1000000;\\n\\n    struct FeeRate {\\n        uint256     lowest;\\n        uint256     highest;\\n        uint256     rate;      // unit is parts per million\\n    }\\n\\n    struct Token {\\n        bool        mintable;\\n        uint8       decimals;\\n        address     vaultToken;\\n\\n        mapping(uint256 => FeeRate) fees;\\n        // chain_id => decimals\\n        mapping(uint256 => uint8) tokenDecimals;\\n        // chain_id => token\\n        mapping(uint256 => bytes) mappingTokens;\\n    }\\n\\n    uint public immutable selfChainId = block.chainid;\\n\\n    //Source chain to Relay chain address\\n    // [chain_id => [source_token => map_token]]\\n    mapping(uint256 => mapping(bytes => address)) public tokenMappingList;\\n\\n    mapping(address => Token) public tokenList;\\n\\n    modifier checkAddress(address _address){\\n        require(_address != address(0), \\\"address is zero\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _getAdmin(), \\\"register only owner\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer\\n    {\\n        _changeAdmin(msg.sender);\\n    }\\n\\n\\n    function registerToken(address _token, address _vaultToken, bool _mintable)\\n    external\\n    onlyOwner checkAddress(_token) checkAddress(_vaultToken) {\\n        Token storage token = tokenList[_token];\\n        address tokenAddress = IVaultTokenV2(_vaultToken).getTokenAddress();\\n        require(_token == tokenAddress, \\\"invalid vault token\\\");\\n\\n        token.vaultToken = _vaultToken;\\n        token.decimals = IERC20Metadata(_token).decimals();\\n        token.mintable = _mintable;\\n    }\\n\\n    function mapToken(address _token, uint256 _fromChain, bytes memory _fromToken, uint8 _decimals)\\n    external\\n    onlyOwner\\n    checkAddress(_token)\\n    {\\n        require(!Utils.checkBytes(_fromToken, bytes(\\\"\\\")), \\\"invalid from token\\\");\\n        Token storage token = tokenList[_token];\\n        require(token.vaultToken != address(0), \\\"invalid map token\\\");\\n        token.tokenDecimals[_fromChain] = _decimals;\\n        token.mappingTokens[_fromChain] = _fromToken;\\n        tokenMappingList[_fromChain][_fromToken] = _token;\\n    }\\n\\n    function setTokenFee( address _token, uint256 _toChain, uint _lowest, uint _highest,uint _rate) \\n    external \\n    onlyOwner\\n    checkAddress(_token)\\n    {\\n        Token storage token = tokenList[_token];\\n        require(token.vaultToken != address(0), \\\"invalid map token\\\");\\n        require(_highest >= _lowest, 'invalid highest and lowest');\\n        require(_rate <= MAX_RATE_UNI, 'invalid proportion value');\\n\\n        token.fees[_toChain] = FeeRate(_lowest, _highest, _rate);\\n    }\\n\\n\\n    function getToChainToken(address _token, uint256 _toChain)\\n    external \\n    override\\n    view\\n    returns (bytes memory _toChainToken){\\n        if (_toChain == selfChainId) {\\n            _toChainToken = Utils.toBytes(_token);\\n        } else {\\n            _toChainToken = tokenList[_token].mappingTokens[_toChain];\\n        }\\n    }\\n\\n    function getToChainAmount(address _token, uint256 _amount, uint256 _toChain)\\n    external \\n    override\\n    view\\n    returns (uint256){\\n        if (_toChain == selfChainId) {\\n            return _amount;\\n        }\\n        uint256 decimalsFrom = tokenList[_token].decimals;\\n\\n        uint256 decimalsTo = tokenList[_token].tokenDecimals[_toChain];\\n        if (decimalsFrom == decimalsTo) {\\n            return _amount;\\n        }\\n        return _amount.mul(10 ** decimalsTo).div(10 ** decimalsFrom);\\n    }\\n\\n    function getRelayChainToken(uint256 _fromChain, bytes memory _fromToken)\\n    external \\n    override\\n    view\\n    returns (address token){\\n        if (_fromChain == selfChainId) {\\n            token = Utils.fromBytes(_fromToken);\\n        } else {\\n            token = tokenMappingList[_fromChain][_fromToken];\\n        }\\n    }\\n\\n    function getRelayChainAmount(address _token, uint256 _fromChain, uint256 _amount)\\n    external \\n    override \\n    view \\n    returns (uint256){\\n        if (_fromChain == selfChainId) {\\n            return _amount;\\n        }\\n        uint256 decimalsFrom = tokenList[_token].tokenDecimals[_fromChain];\\n        uint256 decimalsTo = tokenList[_token].decimals;\\n        if (decimalsFrom == decimalsTo) {\\n            return _amount;\\n        }\\n        return _amount.mul(10 ** decimalsTo).div(10 ** decimalsFrom);\\n    }\\n\\n    function checkMintable(address _token)\\n    external \\n    override \\n    view \\n    returns (bool) {\\n        return tokenList[_token].mintable;\\n    }\\n\\n    function getVaultToken(address _token)\\n    external \\n    override \\n    view \\n    returns (address) {\\n        return tokenList[_token].vaultToken;\\n    }\\n\\n    function getTokenFee(address _token, uint256 _amount, uint256 _toChain)\\n    external \\n    view \\n    override \\n    returns (uint256) {\\n        FeeRate memory feeRate = tokenList[_token].fees[_toChain];\\n\\n        uint256 fee = _amount.mul(feeRate.rate).div(MAX_RATE_UNI);\\n        if (fee > feeRate.highest){\\n            return feeRate.highest;\\n        }else if (fee < feeRate.lowest){\\n            return feeRate.lowest;\\n        }\\n        return fee;\\n    }\\n\\n    function getToChainTokenInfo(address _token, uint256 _toChain)\\n    external\\n    view\\n    returns (bytes memory toChainToken, uint8 decimals, FeeRate memory feeRate){\\n        if (_toChain == selfChainId) {\\n            toChainToken = Utils.toBytes(_token);\\n            decimals = tokenList[_token].decimals;\\n        } else {\\n            toChainToken = tokenList[_token].mappingTokens[_toChain];\\n            decimals = tokenList[_token].tokenDecimals[_toChain];\\n        }\\n\\n        feeRate = tokenList[_token].fees[_toChain];\\n    }\\n\\n    /** UUPS *********************************************************/\\n    function _authorizeUpgrade(address) internal view override {\\n        require(msg.sender == _getAdmin(), \\\"TokenRegister: only Admin can upgrade\\\");\\n    }\\n\\n    function changeAdmin(address _admin) external onlyOwner checkAddress(_admin) {\\n        _changeAdmin(_admin);\\n    }\\n\\n    function getAdmin() external view returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n}\",\"keccak256\":\"0xcb0452392078fa6aaa184cd08b85523ce656db28a075aa2030b0901d0b17df29\",\"license\":\"MIT\"},\"contracts/interface/ITokenRegisterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface ITokenRegisterV2 {\\n\\n    // Get token address on target chain\\n    function getToChainToken(address _token, uint256 _toChain) external view returns (bytes memory _toChainToken);\\n\\n    // Get token amount on target chain\\n    function getToChainAmount(address _token, uint256 _amount, uint256 _toChain) external view returns (uint256);\\n\\n    // Get token and vault token address on relay chain\\n    function getRelayChainToken(uint256 _fromChain, bytes memory _fromToken) external view returns (address);\\n\\n    // Get token amount on relay chain\\n    function getRelayChainAmount(address _token, uint256 _fromChain, uint256 _amount) external view returns (uint256);\\n\\n    function checkMintable(address _token) external view returns (bool);\\n\\n    function getVaultToken(address _token) external view returns (address);\\n\\n    function getTokenFee(address _token, uint256 _amount, uint256 _toChain) external view returns (uint256);\\n}\",\"keccak256\":\"0xf103fda6eabf36719668b090a768ee50f203c7a7562063ee4f26c733e1571dd7\",\"license\":\"MIT\"},\"contracts/interface/IVaultTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface IVaultTokenV2 {\\n\\n    function deposit(uint256 _fromChain, uint256 _amount, address _to) external;\\n\\n    function withdraw(uint256 _toChain, uint256 _vaultAmount, address _to) external;\\n\\n    function transferToken(uint256 _fromChain, uint256 _amount,  uint256 _toChain, uint256 _outAmount, uint256 _relayChain, uint256 _fee) external;\\n\\n    function getTokenAmount(uint256 _amount) external view returns (uint256);\\n\\n    function getTokenAddress() external view returns (address);\\n}\",\"keccak256\":\"0x1bd68baeadec98f72fb552d8fc1ae20a53030a19da53faae5e0dfbbb6caaeba0\",\"license\":\"MIT\"},\"contracts/utils/ButterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary ButterLib {\\n    struct SwapParam {\\n        uint256 amountIn;\\n        uint256 minAmountOut;\\n        bytes path; //evm, or tokenIn'X'tokenOut on near\\n        uint64 routerIndex; // pool id on near or router index on evm\\n    }\\n\\n    struct SwapData {\\n        SwapParam[] swapParams;\\n        bytes targetToken;\\n        address mapTargetToken;\\n    }\\n\\n    struct ButterCoreSwapParam {\\n        uint256[]  amountInArr;\\n        bytes[]    paramsArr;\\n        uint32[]  routerIndex;\\n        address[2]  inputOutAddre; // 0 -input  1- Out\\n    }\\n\\n}\",\"keccak256\":\"0x685a6724b52028d4ed36b349d47130ed1bfa6effc72c9b9110a54d0bc55e810c\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./ButterLib.sol\\\";\\n\\nlibrary Utils {\\n    function assembleButterCoreParam(\\n        address _tokenIn,\\n        uint _actualAmountIn,\\n        uint _predicatedAmountIn,\\n        bytes memory _to,\\n        ButterLib.SwapData memory _swapData\\n    )\\n    internal\\n    view\\n    returns (ButterLib.ButterCoreSwapParam memory) {\\n        ButterLib.SwapParam[] memory swapParams = _swapData.swapParams;\\n        uint256[]  memory amountInArr = new uint256[](swapParams.length);\\n        bytes[]  memory paramsArr = new bytes[](swapParams.length);\\n        uint32[]  memory routerIndex = new uint32[](swapParams.length);\\n\\n\\n        // modify swapParam amount in, compensate the difference between actual and predicted amount.\\n        if (_actualAmountIn >= _predicatedAmountIn) {\\n            swapParams[0].amountIn += (_actualAmountIn - _predicatedAmountIn);\\n        }\\n\\n        for (uint i = 0; i < swapParams.length; i++) {\\n\\n            amountInArr[i] = swapParams[i].amountIn;\\n\\n            routerIndex[i] = uint32(swapParams[i].routerIndex);\\n\\n            paramsArr[i] = abi.encode(\\n                amountInArr[i],\\n                swapParams[i].minAmountOut,\\n                abi.decode(swapParams[i].path, (address[])),\\n                Utils.fromBytes(_to),\\n                block.timestamp + 1000,\\n                _tokenIn,\\n                Utils.fromBytes(_swapData.targetToken)\\n            );\\n        }\\n\\n        ButterLib.ButterCoreSwapParam memory params = ButterLib.ButterCoreSwapParam({\\n            amountInArr : amountInArr,\\n            paramsArr : paramsArr,\\n            routerIndex : routerIndex,\\n            inputOutAddre : [_tokenIn, Utils.fromBytes(_swapData.targetToken)]\\n        });\\n        return params;\\n\\n    }\\n\\n    function getAmountInSumFromSwapParams(ButterLib.SwapParam[] memory swapParams)\\n    internal\\n    pure\\n    returns (uint sum_)\\n    {\\n        sum_ = 0;\\n        for (uint i = 0; i < swapParams.length; i++) {\\n            sum_ += swapParams[i].amountIn;\\n        }\\n    }\\n\\n    function checkBytes(bytes memory b1, bytes memory b2) internal pure returns (bool){\\n        return keccak256(b1) == keccak256(b2);\\n    }\\n\\n    function fromBytes(bytes memory bys) internal pure returns (address addr){\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n\\n    function toBytes(address self) internal pure returns (bytes memory b) {\\n        b = abi.encodePacked(self);\\n    }\\n\\n    function splitExtra(bytes memory extra)\\n    internal\\n    pure\\n    returns (bytes memory newExtra){\\n        require(extra.length >= 64, \\\"Invalid extra result type\\\");\\n        newExtra = new bytes(64);\\n        for (uint256 i = 0; i < 64; i++) {\\n            newExtra[i] = extra[i];\\n        }\\n    }\\n\\n\\n    function hexStrToBytes(bytes memory _hexStr)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            _hexStr.length % 2 != 0 ||\\n            _hexStr.length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes(_hexStr.length / 2 - 32);\\n\\n        for (uint256 i = 64; i < _hexStr.length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(_hexStr[i]) >= 48 && uint8(_hexStr[i]) <= 57\\n            ) tetrad1 = uint8(_hexStr[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(_hexStr[i + 1]) >= 48 &&\\n                uint8(_hexStr[i + 1]) <= 57\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(_hexStr[i]) >= 65 && uint8(_hexStr[i]) <= 70\\n            ) tetrad1 = uint8(_hexStr[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(_hexStr[i + 1]) >= 65 &&\\n                uint8(_hexStr[i + 1]) <= 70\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(_hexStr[i]) >= 97 &&\\n                uint8(_hexStr[i]) <= 102\\n            ) tetrad1 = uint8(_hexStr[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(_hexStr[i + 1]) >= 97 &&\\n                uint8(_hexStr[i + 1]) <= 102\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 32] = bytes1(16 * tetrad1 + tetrad2);\\n\\n\\n        }\\n\\n        return bytes_array;\\n    }\\n\\n\\n}\",\"keccak256\":\"0x94c7968d9df33a62df6ed969187363d8a18aa329a6f7e35d141ad5e7ce4d6ce1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523060601b6080524660a05234801561001b57600080fd5b5060805160601c60a051611e8761007c600039600081816103f5015281816105420152818161065a01528181611052015281816110f701526111970152600081816107e80152818161083101528181610a640152610aa40152611e876000f3fe60806040526004361061011f5760003560e01c8063764d6c8c116100a0578063c6c7b9fc11610064578063c6c7b9fc146103c3578063cc9e3e89146103e3578063ceec8cb914610417578063eead8e7c14610460578063fb9e6c131461048057600080fd5b8063764d6c8c1461031a5780638129fc1c1461033a5780638f2839701461034f5780639dc6108f1461036f578063aaf10f42146103ae57600080fd5b80634bdb4eed116100e75780634bdb4eed1461023f5780634f1ef2861461025f57806364e9f35f146102725780636e9960c3146102e55780636eddb671146102fa57600080fd5b8063140dbf2a146101245780631917961714610193578063204f4877146101c157806324ec643e146101ee5780633659cfe61461021d575b600080fd5b34801561013057600080fd5b5061017661013f366004611a6b565b600160209081526000928352604090922081518083018401805192815290840192909301919091209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019f57600080fd5b506101b36101ae3660046119f2565b6104a0565b60405190815260200161018a565b3480156101cd57600080fd5b506101e16101dc36600461195a565b61053e565b60405161018a9190611b01565b3480156101fa57600080fd5b5061020e61020936600461195a565b610630565b60405161018a93929190611b14565b34801561022957600080fd5b5061023d610238366004611880565b6107dd565b005b34801561024b57600080fd5b5061023d61025a366004611a27565b6108af565b61023d61026d36600461190a565b610a59565b34801561027e57600080fd5b506102bd61028d366004611880565b60026020526000908152604090205460ff808216916101008104909116906201000090046001600160a01b031683565b60408051931515845260ff90921660208401526001600160a01b03169082015260600161018a565b3480156102f157600080fd5b50610176610b13565b34801561030657600080fd5b5061023d610315366004611986565b610b22565b34801561032657600080fd5b5061023d6103353660046118ba565b610cf1565b34801561034657600080fd5b5061023d610f1b565b34801561035b57600080fd5b5061023d61036a366004611880565b610fdc565b34801561037b57600080fd5b5061017661038a366004611880565b6001600160a01b039081166000908152600260205260409020546201000090041690565b3480156103ba57600080fd5b50610176611044565b3480156103cf57600080fd5b506101b36103de3660046119f2565b61104e565b3480156103ef57600080fd5b506101b37f000000000000000000000000000000000000000000000000000000000000000081565b34801561042357600080fd5b50610450610432366004611880565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200161018a565b34801561046c57600080fd5b506101b361047b3660046119f2565b6110f3565b34801561048c57600080fd5b5061017661049b366004611a6b565b611193565b6001600160a01b0383166000908152600260208181526040808420858552600190810183528185208251606081018452815481529181015493820193909352919092015491810182905290829061050790620f424090610501908890611205565b90611211565b905081602001518111156105215750602001519050610537565b81518110156105335750519050610537565b9150505b9392505050565b60607f0000000000000000000000000000000000000000000000000000000000000000821415610578576105718361121d565b905061062a565b6001600160a01b0383166000908152600260209081526040808320858452600301909152902080546105a990611d9f565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590611d9f565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b505050505090505b92915050565b6060600061065860405180606001604052806000815260200160008152602001600081525090565b7f00000000000000000000000000000000000000000000000000000000000000008414156106b4576106898561121d565b6001600160a01b038616600090815260026020526040902054909350610100900460ff169150610792565b6001600160a01b0385166000908152600260209081526040808320878452600301909152902080546106e590611d9f565b80601f016020809104026020016040519081016040528092919081815260200182805461071190611d9f565b801561075e5780601f106107335761010080835404028352916020019161075e565b820191906000526020600020905b81548152906001019060200180831161074157829003601f168201915b505050506001600160a01b03871660009081526002602081815260408084208a855290920190529020549194505060ff1691505b506001600160a01b0390931660009081526002602081815260408084209584526001958601825292839020835160608101855281548152958101549186019190915201549083015292565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561082f5760405162461bcd60e51b815260040161082690611b82565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610861611253565b6001600160a01b0316146108875760405162461bcd60e51b815260040161082690611bce565b61089081611286565b604080516000808252602082019092526108ac918391906112fc565b50565b6108b7611447565b6001600160a01b0316336001600160a01b0316146108e75760405162461bcd60e51b815260040161082690611b55565b846001600160a01b03811661090e5760405162461bcd60e51b815260040161082690611c1a565b6001600160a01b0380871660009081526002602052604090208054909162010000909104166109735760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b21036b0b8103a37b5b2b760791b6044820152606401610826565b848410156109c35760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206869676865737420616e64206c6f776573740000000000006044820152606401610826565b620f4240831115610a165760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642070726f706f7274696f6e2076616c756500000000000000006044820152606401610826565b6040805160608101825295865260208087019586528682019485526000978852600192830190529095209351845550905192820192909255905160029091015550565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610aa25760405162461bcd60e51b815260040161082690611b82565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ad4611253565b6001600160a01b031614610afa5760405162461bcd60e51b815260040161082690611bce565b610b0382611286565b610b0f828260016112fc565b5050565b6000610b1d611447565b905090565b610b2a611447565b6001600160a01b0316336001600160a01b031614610b5a5760405162461bcd60e51b815260040161082690611b55565b836001600160a01b038116610b815760405162461bcd60e51b815260040161082690611c1a565b604080516020808201909252600090528351908401207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701415610bfb5760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b210333937b6903a37b5b2b760711b6044820152606401610826565b6001600160a01b038086166000908152600260205260409020805490916201000090910416610c605760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b21036b0b8103a37b5b2b760791b6044820152606401610826565b60008581526002820160209081526040808320805460ff191660ff88161790556003840182529091208551610c979287019061175a565b50856001600087815260200190815260200160002085604051610cba9190611ae5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050505050565b610cf9611447565b6001600160a01b0316336001600160a01b031614610d295760405162461bcd60e51b815260040161082690611b55565b826001600160a01b038116610d505760405162461bcd60e51b815260040161082690611c1a565b826001600160a01b038116610d775760405162461bcd60e51b815260040161082690611c1a565b6001600160a01b038086166000908152600260209081526040808320815163021fd35d60e31b8152915190948916926310fe9ae89260048082019391829003018186803b158015610dc757600080fd5b505afa158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff919061189d565b9050806001600160a01b0316876001600160a01b031614610e585760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b2103b30bab63a103a37b5b2b760691b6044820152606401610826565b858260000160026101000a8154816001600160a01b0302191690836001600160a01b03160217905550866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eba57600080fd5b505afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef29190611a9c565b825461ffff191661010060ff929092169190910260ff1916179415159490941790555050505050565b600054610100900460ff16610f365760005460ff1615610f3a565b303b155b610f9d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610826565b600054610100900460ff16158015610fbf576000805461ffff19166101011790555b610fc83361146f565b80156108ac576000805461ff001916905550565b610fe4611447565b6001600160a01b0316336001600160a01b0316146110145760405162461bcd60e51b815260040161082690611b55565b806001600160a01b03811661103b5760405162461bcd60e51b815260040161082690611c1a565b610b0f8261146f565b6000610b1d611253565b60007f000000000000000000000000000000000000000000000000000000000000000082141561107f575081610537565b6001600160a01b0384166000908152600260208181526040808420805487865293019091529091205460ff61010090920482169116808214156110c6578492505050610537565b6110e96110d483600a611ca8565b6105016110e284600a611ca8565b8890611205565b9695505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000831415611124575080610537565b6001600160a01b038416600081815260026020818152604080842088855280840183529084205494909352525460ff918216916101009091041680821415611170578392505050610537565b6110e961117e83600a611ca8565b61050161118c84600a611ca8565b8790611205565b60007f00000000000000000000000000000000000000000000000000000000000000008314156111c7576014820151610571565b6000838152600160205260409081902090516111e4908490611ae5565b908152604051908190036020019020546001600160a01b0316905092915050565b60006105378284611d50565b60006105378284611c43565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b61128e611447565b6001600160a01b0316336001600160a01b0316146108ac5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e52656769737465723a206f6e6c792041646d696e2063616e207570604482015264677261646560d81b6064820152608401610826565b6000611306611253565b9050611311846114c3565b60008351118061131e5750815b1561132f5761132d848461156b565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661144057805460ff191660011781556040516001600160a01b03831660248201526113ae90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261156b565b50805460ff191681556113bf611253565b6001600160a01b0316826001600160a01b0316146114375760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610826565b61144085611590565b5050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103611277565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f611498611447565b604080516001600160a01b03928316815291841660208301520160405180910390a16108ac816115d0565b803b6115275760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610826565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606105378383604051806060016040528060278152602001611e2b6027913961165c565b611599816114c3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166116355760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610826565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361154a565b6060833b6116bb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610826565b600080856001600160a01b0316856040516116d69190611ae5565b600060405180830381855af49150503d8060008114611711576040519150601f19603f3d011682016040523d82523d6000602084013e611716565b606091505b50915091506110e982828660608315611730575081610537565b8251156117405782518084602001fd5b8160405162461bcd60e51b81526004016108269190611b01565b82805461176690611d9f565b90600052602060002090601f01602090048101928261178857600085556117ce565b82601f106117a157805160ff19168380011785556117ce565b828001600101855582156117ce579182015b828111156117ce5782518255916020019190600101906117b3565b506117da9291506117de565b5090565b5b808211156117da57600081556001016117df565b600082601f83011261180457600080fd5b813567ffffffffffffffff8082111561181f5761181f611df0565b604051601f8301601f19908116603f0116810190828211818310171561184757611847611df0565b8160405283815286602085880101111561186057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561189257600080fd5b813561053781611e06565b6000602082840312156118af57600080fd5b815161053781611e06565b6000806000606084860312156118cf57600080fd5b83356118da81611e06565b925060208401356118ea81611e06565b9150604084013580151581146118ff57600080fd5b809150509250925092565b6000806040838503121561191d57600080fd5b823561192881611e06565b9150602083013567ffffffffffffffff81111561194457600080fd5b611950858286016117f3565b9150509250929050565b6000806040838503121561196d57600080fd5b823561197881611e06565b946020939093013593505050565b6000806000806080858703121561199c57600080fd5b84356119a781611e06565b935060208501359250604085013567ffffffffffffffff8111156119ca57600080fd5b6119d6878288016117f3565b92505060608501356119e781611e1b565b939692955090935050565b600080600060608486031215611a0757600080fd5b8335611a1281611e06565b95602085013595506040909401359392505050565b600080600080600060a08688031215611a3f57600080fd5b8535611a4a81611e06565b97602087013597506040870135966060810135965060800135945092505050565b60008060408385031215611a7e57600080fd5b82359150602083013567ffffffffffffffff81111561194457600080fd5b600060208284031215611aae57600080fd5b815161053781611e1b565b60008151808452611ad1816020860160208601611d6f565b601f01601f19169290920160200192915050565b60008251611af7818460208701611d6f565b9190910192915050565b6020815260006105376020830184611ab9565b60a081526000611b2760a0830186611ab9565b905060ff84166020830152825160408301526020830151606083015260408301516080830152949350505050565b6020808252601390820152723932b3b4b9ba32b91037b7363c9037bbb732b960691b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b600082611c6057634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611ca0578160001904821115611c8657611c86611dda565b80851615611c9357918102915b93841c9390800290611c6a565b509250929050565b60006105378383600082611cbe5750600161062a565b81611ccb5750600061062a565b8160018114611ce15760028114611ceb57611d07565b600191505061062a565b60ff841115611cfc57611cfc611dda565b50506001821b61062a565b5060208310610133831016604e8410600b8410161715611d2a575081810a61062a565b611d348383611c65565b8060001904821115611d4857611d48611dda565b029392505050565b6000816000190483118215151615611d6a57611d6a611dda565b500290565b60005b83811015611d8a578181015183820152602001611d72565b83811115611d99576000848401525b50505050565b600181811c90821680611db357607f821691505b60208210811415611dd457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108ac57600080fd5b60ff811681146108ac57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207004a6d81bc031cd01af8124d835b8ad57493a9102dbf11e8620536367394b0864736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c8063764d6c8c116100a0578063c6c7b9fc11610064578063c6c7b9fc146103c3578063cc9e3e89146103e3578063ceec8cb914610417578063eead8e7c14610460578063fb9e6c131461048057600080fd5b8063764d6c8c1461031a5780638129fc1c1461033a5780638f2839701461034f5780639dc6108f1461036f578063aaf10f42146103ae57600080fd5b80634bdb4eed116100e75780634bdb4eed1461023f5780634f1ef2861461025f57806364e9f35f146102725780636e9960c3146102e55780636eddb671146102fa57600080fd5b8063140dbf2a146101245780631917961714610193578063204f4877146101c157806324ec643e146101ee5780633659cfe61461021d575b600080fd5b34801561013057600080fd5b5061017661013f366004611a6b565b600160209081526000928352604090922081518083018401805192815290840192909301919091209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019f57600080fd5b506101b36101ae3660046119f2565b6104a0565b60405190815260200161018a565b3480156101cd57600080fd5b506101e16101dc36600461195a565b61053e565b60405161018a9190611b01565b3480156101fa57600080fd5b5061020e61020936600461195a565b610630565b60405161018a93929190611b14565b34801561022957600080fd5b5061023d610238366004611880565b6107dd565b005b34801561024b57600080fd5b5061023d61025a366004611a27565b6108af565b61023d61026d36600461190a565b610a59565b34801561027e57600080fd5b506102bd61028d366004611880565b60026020526000908152604090205460ff808216916101008104909116906201000090046001600160a01b031683565b60408051931515845260ff90921660208401526001600160a01b03169082015260600161018a565b3480156102f157600080fd5b50610176610b13565b34801561030657600080fd5b5061023d610315366004611986565b610b22565b34801561032657600080fd5b5061023d6103353660046118ba565b610cf1565b34801561034657600080fd5b5061023d610f1b565b34801561035b57600080fd5b5061023d61036a366004611880565b610fdc565b34801561037b57600080fd5b5061017661038a366004611880565b6001600160a01b039081166000908152600260205260409020546201000090041690565b3480156103ba57600080fd5b50610176611044565b3480156103cf57600080fd5b506101b36103de3660046119f2565b61104e565b3480156103ef57600080fd5b506101b37f000000000000000000000000000000000000000000000000000000000000000081565b34801561042357600080fd5b50610450610432366004611880565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200161018a565b34801561046c57600080fd5b506101b361047b3660046119f2565b6110f3565b34801561048c57600080fd5b5061017661049b366004611a6b565b611193565b6001600160a01b0383166000908152600260208181526040808420858552600190810183528185208251606081018452815481529181015493820193909352919092015491810182905290829061050790620f424090610501908890611205565b90611211565b905081602001518111156105215750602001519050610537565b81518110156105335750519050610537565b9150505b9392505050565b60607f0000000000000000000000000000000000000000000000000000000000000000821415610578576105718361121d565b905061062a565b6001600160a01b0383166000908152600260209081526040808320858452600301909152902080546105a990611d9f565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590611d9f565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b505050505090505b92915050565b6060600061065860405180606001604052806000815260200160008152602001600081525090565b7f00000000000000000000000000000000000000000000000000000000000000008414156106b4576106898561121d565b6001600160a01b038616600090815260026020526040902054909350610100900460ff169150610792565b6001600160a01b0385166000908152600260209081526040808320878452600301909152902080546106e590611d9f565b80601f016020809104026020016040519081016040528092919081815260200182805461071190611d9f565b801561075e5780601f106107335761010080835404028352916020019161075e565b820191906000526020600020905b81548152906001019060200180831161074157829003601f168201915b505050506001600160a01b03871660009081526002602081815260408084208a855290920190529020549194505060ff1691505b506001600160a01b0390931660009081526002602081815260408084209584526001958601825292839020835160608101855281548152958101549186019190915201549083015292565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561082f5760405162461bcd60e51b815260040161082690611b82565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610861611253565b6001600160a01b0316146108875760405162461bcd60e51b815260040161082690611bce565b61089081611286565b604080516000808252602082019092526108ac918391906112fc565b50565b6108b7611447565b6001600160a01b0316336001600160a01b0316146108e75760405162461bcd60e51b815260040161082690611b55565b846001600160a01b03811661090e5760405162461bcd60e51b815260040161082690611c1a565b6001600160a01b0380871660009081526002602052604090208054909162010000909104166109735760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b21036b0b8103a37b5b2b760791b6044820152606401610826565b848410156109c35760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206869676865737420616e64206c6f776573740000000000006044820152606401610826565b620f4240831115610a165760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642070726f706f7274696f6e2076616c756500000000000000006044820152606401610826565b6040805160608101825295865260208087019586528682019485526000978852600192830190529095209351845550905192820192909255905160029091015550565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610aa25760405162461bcd60e51b815260040161082690611b82565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ad4611253565b6001600160a01b031614610afa5760405162461bcd60e51b815260040161082690611bce565b610b0382611286565b610b0f828260016112fc565b5050565b6000610b1d611447565b905090565b610b2a611447565b6001600160a01b0316336001600160a01b031614610b5a5760405162461bcd60e51b815260040161082690611b55565b836001600160a01b038116610b815760405162461bcd60e51b815260040161082690611c1a565b604080516020808201909252600090528351908401207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701415610bfb5760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b210333937b6903a37b5b2b760711b6044820152606401610826565b6001600160a01b038086166000908152600260205260409020805490916201000090910416610c605760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b21036b0b8103a37b5b2b760791b6044820152606401610826565b60008581526002820160209081526040808320805460ff191660ff88161790556003840182529091208551610c979287019061175a565b50856001600087815260200190815260200160002085604051610cba9190611ae5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050505050565b610cf9611447565b6001600160a01b0316336001600160a01b031614610d295760405162461bcd60e51b815260040161082690611b55565b826001600160a01b038116610d505760405162461bcd60e51b815260040161082690611c1a565b826001600160a01b038116610d775760405162461bcd60e51b815260040161082690611c1a565b6001600160a01b038086166000908152600260209081526040808320815163021fd35d60e31b8152915190948916926310fe9ae89260048082019391829003018186803b158015610dc757600080fd5b505afa158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dff919061189d565b9050806001600160a01b0316876001600160a01b031614610e585760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b2103b30bab63a103a37b5b2b760691b6044820152606401610826565b858260000160026101000a8154816001600160a01b0302191690836001600160a01b03160217905550866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eba57600080fd5b505afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef29190611a9c565b825461ffff191661010060ff929092169190910260ff1916179415159490941790555050505050565b600054610100900460ff16610f365760005460ff1615610f3a565b303b155b610f9d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610826565b600054610100900460ff16158015610fbf576000805461ffff19166101011790555b610fc83361146f565b80156108ac576000805461ff001916905550565b610fe4611447565b6001600160a01b0316336001600160a01b0316146110145760405162461bcd60e51b815260040161082690611b55565b806001600160a01b03811661103b5760405162461bcd60e51b815260040161082690611c1a565b610b0f8261146f565b6000610b1d611253565b60007f000000000000000000000000000000000000000000000000000000000000000082141561107f575081610537565b6001600160a01b0384166000908152600260208181526040808420805487865293019091529091205460ff61010090920482169116808214156110c6578492505050610537565b6110e96110d483600a611ca8565b6105016110e284600a611ca8565b8890611205565b9695505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000831415611124575080610537565b6001600160a01b038416600081815260026020818152604080842088855280840183529084205494909352525460ff918216916101009091041680821415611170578392505050610537565b6110e961117e83600a611ca8565b61050161118c84600a611ca8565b8790611205565b60007f00000000000000000000000000000000000000000000000000000000000000008314156111c7576014820151610571565b6000838152600160205260409081902090516111e4908490611ae5565b908152604051908190036020019020546001600160a01b0316905092915050565b60006105378284611d50565b60006105378284611c43565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b61128e611447565b6001600160a01b0316336001600160a01b0316146108ac5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e52656769737465723a206f6e6c792041646d696e2063616e207570604482015264677261646560d81b6064820152608401610826565b6000611306611253565b9050611311846114c3565b60008351118061131e5750815b1561132f5761132d848461156b565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661144057805460ff191660011781556040516001600160a01b03831660248201526113ae90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261156b565b50805460ff191681556113bf611253565b6001600160a01b0316826001600160a01b0316146114375760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610826565b61144085611590565b5050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103611277565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f611498611447565b604080516001600160a01b03928316815291841660208301520160405180910390a16108ac816115d0565b803b6115275760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610826565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606105378383604051806060016040528060278152602001611e2b6027913961165c565b611599816114c3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166116355760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610826565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361154a565b6060833b6116bb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610826565b600080856001600160a01b0316856040516116d69190611ae5565b600060405180830381855af49150503d8060008114611711576040519150601f19603f3d011682016040523d82523d6000602084013e611716565b606091505b50915091506110e982828660608315611730575081610537565b8251156117405782518084602001fd5b8160405162461bcd60e51b81526004016108269190611b01565b82805461176690611d9f565b90600052602060002090601f01602090048101928261178857600085556117ce565b82601f106117a157805160ff19168380011785556117ce565b828001600101855582156117ce579182015b828111156117ce5782518255916020019190600101906117b3565b506117da9291506117de565b5090565b5b808211156117da57600081556001016117df565b600082601f83011261180457600080fd5b813567ffffffffffffffff8082111561181f5761181f611df0565b604051601f8301601f19908116603f0116810190828211818310171561184757611847611df0565b8160405283815286602085880101111561186057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561189257600080fd5b813561053781611e06565b6000602082840312156118af57600080fd5b815161053781611e06565b6000806000606084860312156118cf57600080fd5b83356118da81611e06565b925060208401356118ea81611e06565b9150604084013580151581146118ff57600080fd5b809150509250925092565b6000806040838503121561191d57600080fd5b823561192881611e06565b9150602083013567ffffffffffffffff81111561194457600080fd5b611950858286016117f3565b9150509250929050565b6000806040838503121561196d57600080fd5b823561197881611e06565b946020939093013593505050565b6000806000806080858703121561199c57600080fd5b84356119a781611e06565b935060208501359250604085013567ffffffffffffffff8111156119ca57600080fd5b6119d6878288016117f3565b92505060608501356119e781611e1b565b939692955090935050565b600080600060608486031215611a0757600080fd5b8335611a1281611e06565b95602085013595506040909401359392505050565b600080600080600060a08688031215611a3f57600080fd5b8535611a4a81611e06565b97602087013597506040870135966060810135965060800135945092505050565b60008060408385031215611a7e57600080fd5b82359150602083013567ffffffffffffffff81111561194457600080fd5b600060208284031215611aae57600080fd5b815161053781611e1b565b60008151808452611ad1816020860160208601611d6f565b601f01601f19169290920160200192915050565b60008251611af7818460208701611d6f565b9190910192915050565b6020815260006105376020830184611ab9565b60a081526000611b2760a0830186611ab9565b905060ff84166020830152825160408301526020830151606083015260408301516080830152949350505050565b6020808252601390820152723932b3b4b9ba32b91037b7363c9037bbb732b960691b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b600082611c6057634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611ca0578160001904821115611c8657611c86611dda565b80851615611c9357918102915b93841c9390800290611c6a565b509250929050565b60006105378383600082611cbe5750600161062a565b81611ccb5750600061062a565b8160018114611ce15760028114611ceb57611d07565b600191505061062a565b60ff841115611cfc57611cfc611dda565b50506001821b61062a565b5060208310610133831016604e8410600b8410161715611d2a575081810a61062a565b611d348383611c65565b8060001904821115611d4857611d48611dda565b029392505050565b6000816000190483118215151615611d6a57611d6a611dda565b500290565b60005b83811015611d8a578181015183820152602001611d72565b83811115611d99576000848401525b50505050565b600181811c90821680611db357607f821691505b60208210811415611dd457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108ac57600080fd5b60ff811681146108ac57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207004a6d81bc031cd01af8124d835b8ad57493a9102dbf11e8620536367394b0864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1107,
        "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1110,
        "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8113,
        "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
        "label": "tokenMappingList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_address))"
      },
      {
        "astId": 8118,
        "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
        "label": "tokenList",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Token)8103_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Token)8103_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenRegisterV2.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)8103_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_address)"
      },
      "t_mapping(t_uint256,t_struct(FeeRate)8083_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenRegisterV2.FeeRate)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeRate)8083_storage"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(FeeRate)8083_storage": {
        "encoding": "inplace",
        "label": "struct TokenRegisterV2.FeeRate",
        "members": [
          {
            "astId": 8078,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "lowest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8080,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "highest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8082,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "rate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Token)8103_storage": {
        "encoding": "inplace",
        "label": "struct TokenRegisterV2.Token",
        "members": [
          {
            "astId": 8085,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "mintable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8087,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "decimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8089,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "vaultToken",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8094,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "fees",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(FeeRate)8083_storage)"
          },
          {
            "astId": 8098,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint8)"
          },
          {
            "astId": 8102,
            "contract": "contracts/TokenRegisterV2.sol:TokenRegisterV2",
            "label": "mappingTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_bytes_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}