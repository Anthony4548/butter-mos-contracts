{
  "address": "0x15445027Aa62C51B4F6E0C5560d2109288aF1699",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapDepositOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "mapSwapExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "mapSwapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "mapSwapOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "mapTransferExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapTransferIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "toChainToken",
          "type": "bytes"
        }
      ],
      "name": "mapTransferOut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        }
      ],
      "name": "addMintableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "butterCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lightNode",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "isBridgeable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightNode",
      "outputs": [
        {
          "internalType": "contract ILightNode",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orderList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token",
          "type": "address[]"
        }
      ],
      "name": "removeMintableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_butterCoreAddress",
          "type": "address"
        }
      ],
      "name": "setButterCoreAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lightNode",
          "type": "address"
        }
      ],
      "name": "setLightClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelayContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_receiptProof",
          "type": "bytes"
        }
      ],
      "name": "swapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "swapOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "swapOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenMappingList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_receiptProof",
          "type": "bytes"
        }
      ],
      "name": "transferIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "transferOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "transferOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf325cddeb4c08f5c7b44b30dd1df2cdfc25ea4678992ca510016315937776a46",
  "receipt": {
    "to": null,
    "from": "0x8c9b3cAf7DedD3003f53312779c1b92ba1625D94",
    "contractAddress": "0x15445027Aa62C51B4F6E0C5560d2109288aF1699",
    "transactionIndex": 1,
    "gasUsed": "4635373",
    "logsBloom": "0x
    "blockHash": "0x419c229e8096ea818a1cb91d0a18194e324a4e8f31d49980d0317878d46a3191",
    "transactionHash": "0xf325cddeb4c08f5c7b44b30dd1df2cdfc25ea4678992ca510016315937776a46",
    "logs": [],
    "blockNumber": 25377712,
    "cumulativeGasUsed": "4835675",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "abbc1a2b704d71b844fb6c4f334a109c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapDepositOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mapSwapExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"mapSwapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"mapSwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mapTransferExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapTransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toChainToken\",\"type\":\"bytes\"}],\"name\":\"mapTransferOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"}],\"name\":\"addMintableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"butterCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lightNode\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"isBridgeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightNode\",\"outputs\":[{\"internalType\":\"contract ILightNode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"}],\"name\":\"removeMintableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_butterCoreAddress\",\"type\":\"address\"}],\"name\":\"setButterCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightNode\",\"type\":\"address\"}],\"name\":\"setLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelayContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiptProof\",\"type\":\"bytes\"}],\"name\":\"swapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"swapOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"swapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMappingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiptProof\",\"type\":\"bytes\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"transferOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MAPOmnichainServiceV2.sol\":\"MAPOmnichainServiceV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MAPOmnichainServiceV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interface/IWToken.sol\\\";\\nimport \\\"./utils/ButterLib.sol\\\";\\nimport \\\"./interface/IMAPToken.sol\\\";\\nimport \\\"./utils/TransferHelper.sol\\\";\\nimport \\\"./interface/IMOSV2.sol\\\";\\nimport \\\"./interface/ILightNode.sol\\\";\\nimport \\\"./utils/RLPReader.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\nimport \\\"./utils/EvmDecoder.sol\\\";\\n\\n\\ncontract MAPOmnichainServiceV2 is ReentrancyGuard, Initializable, Pausable, IMOSV2, UUPSUpgradeable {\\n    using SafeMath for uint;\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    uint public immutable selfChainId = block.chainid;\\n    uint public nonce;\\n    address public wToken;          // native wrapped token\\n    address public relayContract;\\n    uint256 public relayChainId;\\n    ILightNode public lightNode;\\n\\n    mapping(bytes32 => bool) public orderList;\\n    mapping(address => bool) public mintableTokens;\\n    mapping(uint256 => mapping(address => bool)) public tokenMappingList;\\n\\n    address public butterCore;\\n\\n    event mapTransferExecute(uint256 indexed fromChain, uint256 indexed toChain, address indexed from);\\n    event mapSwapExecute(uint256 indexed fromChain, uint256 indexed toChain, address indexed from);\\n\\n    function initialize(address _wToken, address _lightNode)\\n    public initializer checkAddress(_wToken) checkAddress(_lightNode) {\\n        wToken = _wToken;\\n        lightNode = ILightNode(_lightNode);\\n        _changeAdmin(msg.sender);\\n    }\\n\\n\\n    receive() external payable {}\\n\\n\\n    modifier checkOrder(bytes32 _orderId) {\\n        require(!orderList[_orderId], \\\"order exist\\\");\\n        orderList[_orderId] = true;\\n        _;\\n    }\\n\\n    modifier checkBridgeable(address _token, uint _chainId) {\\n        require(tokenMappingList[_chainId][_token], \\\"token not registered\\\");\\n        _;\\n    }\\n\\n    modifier checkAddress(address _address) {\\n        require(_address != address(0), \\\"address is zero\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _getAdmin(), \\\"mos :: only admin\\\");\\n        _;\\n    }\\n\\n    function setPause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function setUnpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setLightClient(address _lightNode) external onlyOwner checkAddress(_lightNode) {\\n        lightNode = ILightNode(_lightNode);\\n    }\\n\\n    function addMintableToken(address[] memory _token) external onlyOwner {\\n        for (uint i = 0; i < _token.length; i++) {\\n            mintableTokens[_token[i]] = true;\\n        }\\n    }\\n\\n    function removeMintableToken(address[] memory _token) external onlyOwner {\\n        for (uint i = 0; i < _token.length; i++) {\\n            mintableTokens[_token[i]] = false;\\n        }\\n    }\\n\\n    function setRelayContract(uint256 _chainId, address _relay) external onlyOwner checkAddress(_relay) {\\n        relayContract = _relay;\\n        relayChainId = _chainId;\\n    }\\n\\n    function setButterCoreAddress(address _butterCoreAddress) external onlyOwner checkAddress(_butterCoreAddress) {\\n        butterCore = _butterCoreAddress;\\n    }\\n\\n    function registerToken(address _token, uint _toChain, bool _enable) external onlyOwner {\\n        tokenMappingList[_toChain][_token] = _enable;\\n    }\\n\\n    function emergencyWithdraw(address _token, address payable _receiver, uint256 _amount) external onlyOwner checkAddress(_receiver) {\\n        if (_token == wToken) {\\n            TransferHelper.safeWithdraw(wToken, _amount);\\n            TransferHelper.safeTransferETH(_receiver, _amount);\\n        } else if (_token == address(0)) {\\n            TransferHelper.safeTransferETH(_receiver, _amount);\\n        } else {\\n            TransferHelper.safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function transferOutToken(address _token, bytes memory _to, uint256 _amount, uint256 _toChain) external override nonReentrant whenNotPaused\\n    checkBridgeable(_token, _toChain) {\\n        require(_toChain != selfChainId, \\\"only other chain\\\");\\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \\\"balance too low\\\");\\n\\n        if (isMintable(_token)) {\\n            IMAPToken(_token).burnFrom(msg.sender, _amount);\\n        } else {\\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\\n        }\\n        bytes32 orderId = _getOrderID(msg.sender, _to, _toChain);\\n        emit mapTransferOut(selfChainId, _toChain, orderId, Utils.toBytes(_token), Utils.toBytes(msg.sender), _to, _amount, Utils.toBytes(address(0)));\\n    }\\n\\n    function transferOutNative(bytes memory _to, uint _toChain) external override payable nonReentrant whenNotPaused\\n    checkBridgeable(wToken, _toChain) {\\n        require(_toChain != selfChainId, \\\"only other chain\\\");\\n        uint amount = msg.value;\\n        require(amount > 0, \\\"balance is zero\\\");\\n        IWToken(wToken).deposit{value : amount}();\\n        bytes32 orderId = _getOrderID(msg.sender, _to, _toChain);\\n        emit mapTransferOut(selfChainId, _toChain, orderId, Utils.toBytes(wToken), Utils.toBytes(msg.sender), _to, amount, Utils.toBytes(address(0)));\\n    }\\n\\n    function swapOutToken(\\n        address _token, // src token\\n        bytes memory _to,\\n        uint256 _amount,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    checkBridgeable(_token, _toChain)\\n    {\\n        require(_toChain != selfChainId, \\\"Cannot swap to self chain\\\");\\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \\\"Insufficient token balance\\\");\\n\\n        if (isMintable(_token)) {\\n            IMAPToken(_token).burnFrom(msg.sender, _amount);\\n        } else {\\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\\n        }\\n\\n        bytes32 orderId = _getOrderID(msg.sender, _to, _toChain);\\n\\n        emit mapSwapOut(\\n            selfChainId,\\n            _toChain,\\n            orderId,\\n            Utils.toBytes(_token),\\n            Utils.toBytes(msg.sender),\\n            _to,\\n            _amount,\\n            swapData\\n        );\\n    }\\n\\n    function swapOutNative(\\n        bytes memory _to,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    )\\n    external\\n    override\\n    payable\\n    nonReentrant\\n    whenNotPaused\\n    checkBridgeable(wToken, _toChain)\\n    {\\n        require(_toChain != selfChainId, \\\"Cannot swap to self chain\\\");\\n        uint amount = msg.value;\\n        require(amount > 0, \\\"Sending value is zero\\\");\\n        IWToken(wToken).deposit{value : amount}();\\n        bytes32 orderId = _getOrderID(msg.sender, _to, _toChain);\\n        emit mapSwapOut(\\n            selfChainId,\\n            _toChain,\\n            orderId,\\n            Utils.toBytes(wToken),\\n            Utils.toBytes(msg.sender),\\n            _to,\\n            amount,\\n            swapData\\n        );\\n\\n    }\\n\\n    function depositToken(address _token, address _to, uint _amount) external override nonReentrant whenNotPaused\\n    checkBridgeable(_token, relayChainId) {\\n        address from = msg.sender;\\n        //require(IERC20(token).balanceOf(_from) >= _amount, \\\"balance too low\\\");\\n\\n        if (isMintable(_token)) {\\n            IMAPToken(_token).burnFrom(from, _amount);\\n        } else {\\n            TransferHelper.safeTransferFrom(_token, from, address(this), _amount);\\n        }\\n\\n        bytes32 orderId = _getOrderID(from, Utils.toBytes(_to), relayChainId);\\n        emit mapDepositOut(selfChainId, relayChainId, orderId, _token, Utils.toBytes(from), _to, _amount);\\n    }\\n\\n    function depositNative(address _to) external override payable nonReentrant whenNotPaused\\n    checkBridgeable(wToken, relayChainId) {\\n        address from = msg.sender;\\n        uint amount = msg.value;\\n        bytes32 orderId = _getOrderID(from, Utils.toBytes(_to), relayChainId);\\n\\n        IWToken(wToken).deposit{value : amount}();\\n        emit mapDepositOut(selfChainId, relayChainId, orderId, wToken, Utils.toBytes(from), _to, amount);\\n    }\\n\\n    function transferIn(uint256 _chainId, bytes memory _receiptProof) external nonReentrant whenNotPaused {\\n        require(_chainId == relayChainId, \\\"invalid chain id\\\");\\n        (bool sucess, string memory message, bytes memory logArray) = lightNode.verifyProofData(_receiptProof);\\n        require(sucess, message);\\n        IEvent.txLog[] memory logs = EvmDecoder.decodeTxLogs(logArray);\\n\\n        for (uint i = 0; i < logs.length; i++) {\\n            IEvent.txLog memory log = logs[i];\\n            bytes32 topic = abi.decode(log.topics[0], (bytes32));\\n\\n            if (topic == EvmDecoder.MAP_TRANSFEROUT_TOPIC && relayContract == log.addr) {\\n                (, IEvent.transferOutEvent memory outEvent) = EvmDecoder.decodeTransferOutLog(log);\\n                // there might be more than on events to multi-chains\\n                // only process the event for this chain\\n                if (selfChainId == outEvent.toChain) {\\n                    _transferIn(outEvent);\\n                }\\n            }\\n        }\\n        emit mapTransferExecute(_chainId, selfChainId, msg.sender);\\n    }\\n\\n    function swapIn(uint256 _chainId, bytes memory _receiptProof) external nonReentrant whenNotPaused {\\n        require(_chainId == relayChainId, \\\"invalid chain id\\\");\\n        (bool success, string memory message, bytes memory logArray) = lightNode.verifyProofData(_receiptProof);\\n        require(success, message);\\n        IEvent.txLog[] memory logs = EvmDecoder.decodeTxLogs(logArray);\\n        for (uint i = 0; i < logs.length; i++) {\\n            IEvent.txLog memory log = logs[i];\\n            bytes32 topic = abi.decode(log.topics[0], (bytes32));\\n            if (topic == EvmDecoder.MAP_SWAPOUT_TOPIC && relayContract == log.addr) {\\n                (, IEvent.swapOutEvent memory outEvent) = EvmDecoder.decodeSwapOutLog(log);\\n                // there might be more than one events to multi-chains\\n                // only process the event for this chain\\n                if (selfChainId == outEvent.toChain) {\\n                    _swapIn(outEvent);\\n                }\\n            }\\n        }\\n\\n        emit mapSwapExecute(_chainId, selfChainId, msg.sender);\\n    }\\n\\n    function isMintable(address _token) public view returns (bool) {\\n        return mintableTokens[_token];\\n    }\\n\\n    function isBridgeable(address _token, uint256 _toChain) public view returns (bool) {\\n        return tokenMappingList[_toChain][_token];\\n    }\\n\\n    function _getOrderID(address _from, bytes memory _to, uint _toChain) internal returns (bytes32){\\n        return keccak256(abi.encodePacked(address(this), nonce++, selfChainId, _toChain, _from, _to));\\n    }\\n\\n    function _transferIn(IEvent.transferOutEvent memory _outEvent)\\n    internal checkOrder(_outEvent.orderId) {\\n        //require(_chainId == _outEvent.toChain, \\\"invalid chain id\\\");\\n        address token = Utils.fromBytes(_outEvent.toChainToken);\\n        address payable toAddress = payable(Utils.fromBytes(_outEvent.to));\\n        uint256 amount = _outEvent.amount;\\n        if (token == wToken) {\\n            TransferHelper.safeWithdraw(wToken, amount);\\n            TransferHelper.safeTransferETH(toAddress, amount);\\n        } else if (isMintable(token)) {\\n            IMAPToken(token).mint(toAddress, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, toAddress, amount);\\n        }\\n\\n        emit mapTransferIn(_outEvent.fromChain, _outEvent.toChain, _outEvent.orderId, token, _outEvent.from, toAddress, amount);\\n    }\\n\\n    function _swapIn(IEvent.swapOutEvent memory _outEvent) internal checkOrder(_outEvent.orderId) {\\n        address tokenIn = Utils.fromBytes(_outEvent.token);\\n\\n        // decode params\\n        ButterLib.SwapData memory swapData;\\n        (swapData.swapParams, swapData.targetToken, swapData.mapTargetToken) = abi.decode(_outEvent.swapData,\\n            ((ButterLib.SwapParam)[], bytes, address));\\n\\n        address tokenOut = Utils.fromBytes(swapData.targetToken);\\n\\n        // receiving address\\n        address payable toAddress = payable(Utils.fromBytes(_outEvent.to));\\n        // amount of token need to be sent\\n        uint actualAmountIn = _outEvent.amount;\\n\\n        ButterLib.SwapParam[] memory swapParams = swapData.swapParams;\\n        // if swap params is not empty, then we need to do swap on current chain\\n        if (swapParams.length > 0) {\\n            if (isMintable(tokenIn)) {\\n                IMAPToken(tokenIn).mint(address(this), actualAmountIn);\\n            }\\n            uint predicatedAmountIn = Utils.getAmountInSumFromSwapParams(swapParams);\\n            // assemble request to call butter core\\n            ButterLib.ButterCoreSwapParam memory butterCoreSwapParam =\\n            Utils.assembleButterCoreParam(tokenIn, actualAmountIn, predicatedAmountIn, _outEvent.to, swapData);\\n            // low-level call butter core to finish swap\\n            TransferHelper.safeApprove(tokenIn, butterCore, actualAmountIn);\\n            (bool success,) = address(butterCore).call(\\n                abi.encodeWithSignature(\\\"multiSwap((uint256[],bytes[],uint32[],address[2]))\\\", butterCoreSwapParam)\\n            );\\n\\n            // if swap succeed, just return\\n            if (success) {\\n                emit mapSwapIn(_outEvent.fromChain, selfChainId, _outEvent.orderId, tokenOut, _outEvent.from, toAddress, actualAmountIn);\\n                return;\\n            }\\n\\n            // if swap not succeed or swap not happened, give user the source token\\n            tokenOut = tokenIn;\\n        }\\n\\n        // transfer token if swap did not happen\\n        if (tokenOut == wToken) {\\n            TransferHelper.safeWithdraw(wToken, actualAmountIn);\\n            TransferHelper.safeTransferETH(toAddress, actualAmountIn);\\n        } else if (isMintable(tokenOut) && swapParams.length == 0) {\\n            IMAPToken(tokenOut).mint(toAddress, actualAmountIn);\\n        } else {\\n            TransferHelper.safeTransfer(tokenOut, toAddress, actualAmountIn);\\n        }\\n        emit mapSwapIn(_outEvent.fromChain, selfChainId, _outEvent.orderId, tokenOut, _outEvent.from, toAddress, actualAmountIn);\\n    }\\n\\n    /** UUPS *********************************************************/\\n    function _authorizeUpgrade(address) internal view override {\\n        require(msg.sender == _getAdmin(), \\\"MAPOmnichainService: only Admin can upgrade\\\");\\n    }\\n\\n    function changeAdmin(address _admin) external onlyOwner checkAddress(_admin) {\\n        _changeAdmin(_admin);\\n    }\\n\\n    function getAdmin() external view returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n}\",\"keccak256\":\"0x4dd509943e4f442d0a8f1126b9af148660c6e6373d249f2ee8b06a29c0b0a9b0\",\"license\":\"MIT\"},\"contracts/interface/IEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\nimport \\\"../utils/ButterLib.sol\\\";\\n\\ninterface IEvent {\\n\\n    struct transferOutEvent {\\n        bytes token;\\n        bytes from;\\n        bytes32 orderId;\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes to;\\n        uint256 amount;\\n        bytes toChainToken;\\n    }\\n\\n    struct depositOutEvent {\\n        bytes token;\\n        bytes from;\\n        bytes32 orderId;\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes to;\\n        uint256 amount;\\n    }\\n\\n    struct swapOutEvent {\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes32 orderId;\\n        bytes token; // token to transfer\\n        bytes from;\\n        bytes to;\\n        uint256 amount;\\n        bytes swapData;\\n    }\\n\\n    struct txLog {\\n        address addr;\\n        bytes[] topics;\\n        bytes data;\\n    }\\n}\",\"keccak256\":\"0x95159409d2b69bb060442655ad08187cdd9c5bdd0ef11ca2c4b5659a0d59485c\",\"license\":\"MIT\"},\"contracts/interface/ILightNode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface ILightNode{\\n    function verifyProofData(bytes memory _receiptProof) external returns (bool success, string memory message, bytes memory logs);\\n\\n    function updateBlockHeader(bytes memory _blackHeader) external;\\n\\n    function headerHeight() external view returns (uint256);\\n\\n    function currentNumberAndHash(uint256 number) external view returns(uint256 ,bytes memory);\\n}\",\"keccak256\":\"0x8a3887c0f8bfc76e3853175124870b5b7909172616a2683ded79d55cc4baddc6\",\"license\":\"MIT\"},\"contracts/interface/IMAPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n\\ninterface IMAPToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xc75a01ca47a7a0621b9673c468fbfa036c05cd8ed1909add795d2503ab5bab34\",\"license\":\"MIT\"},\"contracts/interface/IMOSV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../utils/ButterLib.sol\\\";\\npragma solidity 0.8.7;\\n\\ninterface IMOSV2 {\\n    function transferOutToken(address _token, bytes memory _to, uint _amount, uint _toChain) external;\\n    function transferOutNative(bytes memory _to, uint _toChain) external payable;\\n\\n    function swapOutToken(\\n        address _token, // src token\\n        bytes memory _to,\\n        uint256 _amount,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) external;\\n\\n    function swapOutNative(\\n        bytes memory _to,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) external payable;\\n\\n    function depositToken(address _token, address to, uint _amount) external;\\n    function depositNative(address _to) external payable ;\\n\\n\\n    event mapTransferOut(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 orderId,\\n        bytes token,\\n        bytes from,\\n        bytes to,\\n        uint256 amount,\\n        bytes toChainToken\\n    );\\n\\n    event mapTransferIn(uint256 indexed fromChain, uint256 indexed toChain, bytes32 orderId,\\n        address token, bytes from,  address to, uint256 amount);\\n\\n    event mapDepositOut(uint256 indexed fromChain, uint256 indexed toChain, bytes32 orderId,\\n        address token, bytes from, address to, uint256 amount);\\n\\n    event mapSwapOut(\\n        uint256 indexed fromChain, // from chain\\n        uint256 indexed toChain, // to chain\\n        bytes32 orderId, // order id\\n        bytes token, // token to transfer\\n        bytes from, // source chain from address\\n        bytes to,\\n        uint256 amount,\\n        bytes swapData // swap data, used on target chain dex.\\n    );\\n\\n    event mapSwapIn(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 indexed orderId,\\n        address token,\\n        bytes from,\\n        address toAddress,\\n        uint256 amountOut\\n    );\\n\\n}\",\"keccak256\":\"0x8c8644adb7e71146b1c195091b23d19ec00623bbfa72c6b92dfd421f1b9b0736\",\"license\":\"MIT\"},\"contracts/interface/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface IWToken {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x964d8d14b24da8a10151f28c503d139810b4c65319b015f53a8c3d39f8531582\",\"license\":\"MIT\"},\"contracts/utils/ButterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary ButterLib {\\n    struct SwapParam {\\n        uint256 amountIn;\\n        uint256 minAmountOut;\\n        bytes path; //evm, or tokenIn'X'tokenOut on near\\n        uint64 routerIndex; // pool id on near or router index on evm\\n    }\\n\\n    struct SwapData {\\n        SwapParam[] swapParams;\\n        bytes targetToken;\\n        address mapTargetToken;\\n    }\\n\\n    struct ButterCoreSwapParam {\\n        uint256[]  amountInArr;\\n        bytes[]    paramsArr;\\n        uint32[]  routerIndex;\\n        address[2]  inputOutAddre; // 0 -input  1- Out\\n    }\\n\\n}\",\"keccak256\":\"0x685a6724b52028d4ed36b349d47130ed1bfa6effc72c9b9110a54d0bc55e810c\",\"license\":\"MIT\"},\"contracts/utils/EvmDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/ButterLib.sol\\\";\\nimport \\\"./RLPReader.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"../interface/IEvent.sol\\\";\\nlibrary EvmDecoder {\\n\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 constant MAP_TRANSFEROUT_TOPIC = keccak256(bytes('mapTransferOut(uint256,uint256,bytes32,bytes,bytes,bytes,uint256,bytes)'));\\n    bytes32 constant MAP_DEPOSITOUT_TOPIC = keccak256(bytes('mapDepositOut(uint256,uint256,bytes32,address,bytes,address,uint256)'));\\n    bytes32 constant MAP_SWAPOUT_TOPIC = keccak256(bytes('mapSwapOut(uint256,uint256,bytes32,bytes,bytes,bytes,uint256,bytes)'));\\n\\n\\n    function decodeTxLogs(bytes memory logsHash)\\n    internal\\n    pure\\n    returns (IEvent.txLog[] memory _txLogs){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n        _txLogs = new IEvent.txLog[](ls.length);\\n        for (uint256 i = 0; i < ls.length; i++) {\\n            RLPReader.RLPItem[] memory item = ls[i].toList();\\n\\n            require(item.length >= 3, \\\"log length to low\\\");\\n\\n            RLPReader.RLPItem[] memory firstItemList = item[1].toList();\\n            bytes[] memory topic = new bytes[](firstItemList.length);\\n            for (uint256 j = 0; j < firstItemList.length; j++) {\\n                topic[j] = firstItemList[j].toBytes();\\n            }\\n            _txLogs[i] = IEvent.txLog({\\n            addr : item[0].toAddress(),\\n            topics : topic,\\n            data : item[2].toBytes()\\n            });\\n        }\\n    }\\n\\n    function decodeTransferOutLog(IEvent.txLog memory log)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.transferOutEvent memory outEvent) {\\n        executorId = Utils.toBytes(log.addr);\\n        outEvent.fromChain = abi.decode(log.topics[1], (uint256));\\n        outEvent.toChain = abi.decode(log.topics[2], (uint256));\\n\\n        (outEvent.orderId, outEvent.token, outEvent.from, outEvent.to, outEvent.amount, outEvent.toChainToken)\\n        = abi.decode(log.data, (bytes32, bytes, bytes, bytes, uint256, bytes));\\n    }\\n\\n    function decodeSwapOutLog(IEvent.txLog memory log)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.swapOutEvent memory outEvent) {\\n        executorId = Utils.toBytes(log.addr);\\n        outEvent.fromChain = abi.decode(log.topics[1], (uint256));\\n        outEvent.toChain = abi.decode(log.topics[2], (uint256));\\n\\n        (outEvent.orderId, outEvent.token, outEvent.from, outEvent.to, outEvent.amount,outEvent.swapData)\\n        = abi.decode(log.data, (bytes32, bytes, bytes, bytes, uint256, bytes));\\n    }\\n\\n    function decodeDepositOutLog(IEvent.txLog memory log)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.depositOutEvent memory depositEvent){\\n        executorId = Utils.toBytes(log.addr);\\n\\n        depositEvent.fromChain = abi.decode(log.topics[1], (uint256));\\n        depositEvent.toChain = abi.decode(log.topics[2], (uint256));\\n\\n        address token;\\n        address toAddress;\\n        (depositEvent.orderId, token, depositEvent.from, toAddress, depositEvent.amount)\\n        = abi.decode(log.data, (bytes32, address, bytes, address, uint256));\\n\\n        depositEvent.token = Utils.toBytes(token);\\n        depositEvent.to = Utils.toBytes(toAddress);\\n\\n    }\\n}\\n\",\"keccak256\":\"0xd1a3b1e411838384a8f9cfa44564fe769909d428b2c13bc40c1e9edf5e38c1f4\",\"license\":\"MIT\"},\"contracts/utils/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity 0.8.7;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self), \\\"not have next\\\");\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n    internal\\n    pure\\n    returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n    internal\\n    pure\\n    returns (Iterator memory)\\n    {\\n        require(isList(self), \\\"check self list fail\\\");\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset;\\n        // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n    internal\\n    pure\\n    returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"is list fail\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1, \\\"item len is not one\\\");\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"item len is not 21\\\");\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33, \\\"item len is not uint\\\");\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n        // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33, \\\"item is not uint strict\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0, \\\"item len is zero\\\");\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n            /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n        // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0651b1bc29f1d6ec5816efe6e276b247b4129a79614c2201f6904888b03a2149\",\"license\":\"MIT\"},\"contracts/utils/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary TransferHelper {\\n    function safeWithdraw(address wtoken, uint value) internal {\\n        (bool success, bytes memory data) = wtoken.call(abi.encodeWithSelector(0x2e1a7d4d, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: WITHDRAW_FAILED');\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x2e6b00d9fad81ec553bea52bb73ae5ec1db35a3a6aa604da944ac8c6167b3473\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./ButterLib.sol\\\";\\n\\nlibrary Utils {\\n    function assembleButterCoreParam(\\n        address _tokenIn,\\n        uint _actualAmountIn,\\n        uint _predicatedAmountIn,\\n        bytes memory _to,\\n        ButterLib.SwapData memory _swapData\\n    )\\n    internal\\n    view\\n    returns (ButterLib.ButterCoreSwapParam memory) {\\n        ButterLib.SwapParam[] memory swapParams = _swapData.swapParams;\\n        uint256[]  memory amountInArr = new uint256[](swapParams.length);\\n        bytes[]  memory paramsArr = new bytes[](swapParams.length);\\n        uint32[]  memory routerIndex = new uint32[](swapParams.length);\\n\\n\\n        // modify swapParam amount in, compensate the difference between actual and predicted amount.\\n        if (_actualAmountIn >= _predicatedAmountIn) {\\n            swapParams[0].amountIn += (_actualAmountIn - _predicatedAmountIn);\\n        } else {\\n            swapParams[0].amountIn -= (_predicatedAmountIn - _actualAmountIn);\\n        }\\n\\n        for (uint i = 0; i < swapParams.length; i++) {\\n\\n            amountInArr[i] = swapParams[i].amountIn;\\n\\n            routerIndex[i] = uint32(swapParams[i].routerIndex);\\n\\n            paramsArr[i] = abi.encode(\\n                amountInArr[i],\\n                swapParams[i].minAmountOut,\\n                abi.decode(swapParams[i].path, (address[])),\\n                Utils.fromBytes(_to),\\n                block.timestamp + 100,\\n                _tokenIn,\\n                Utils.fromBytes(_swapData.targetToken)\\n            );\\n        }\\n\\n        ButterLib.ButterCoreSwapParam memory params = ButterLib.ButterCoreSwapParam({\\n            amountInArr : amountInArr,\\n            paramsArr : paramsArr,\\n            routerIndex : routerIndex,\\n            inputOutAddre : [_tokenIn, Utils.fromBytes(_swapData.targetToken)]\\n        });\\n        return params;\\n\\n    }\\n\\n    function getAmountInSumFromSwapParams(ButterLib.SwapParam[] memory swapParams)\\n    internal\\n    pure\\n    returns (uint sum_)\\n    {\\n        sum_ = 0;\\n        for (uint i = 0; i < swapParams.length; i++) {\\n            sum_ += swapParams[i].amountIn;\\n        }\\n    }\\n\\n    function checkBytes(bytes memory b1, bytes memory b2) internal pure returns (bool){\\n        return keccak256(b1) == keccak256(b2);\\n    }\\n\\n    function fromBytes(bytes memory bys) internal pure returns (address addr){\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n\\n    function toBytes(address self) internal pure returns (bytes memory b) {\\n        b = abi.encodePacked(self);\\n    }\\n\\n    function splitExtra(bytes memory extra)\\n    internal\\n    pure\\n    returns (bytes memory newExtra){\\n        require(extra.length >= 64, \\\"Invalid extra result type\\\");\\n        newExtra = new bytes(64);\\n        for (uint256 i = 0; i < 64; i++) {\\n            newExtra[i] = extra[i];\\n        }\\n    }\\n\\n\\n    function hexStrToBytes(bytes memory _hexStr)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            _hexStr.length % 2 != 0 ||\\n            _hexStr.length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes(_hexStr.length / 2 - 32);\\n\\n        for (uint256 i = 64; i < _hexStr.length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(_hexStr[i]) >= 48 && uint8(_hexStr[i]) <= 57\\n            ) tetrad1 = uint8(_hexStr[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(_hexStr[i + 1]) >= 48 &&\\n                uint8(_hexStr[i + 1]) <= 57\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(_hexStr[i]) >= 65 && uint8(_hexStr[i]) <= 70\\n            ) tetrad1 = uint8(_hexStr[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(_hexStr[i + 1]) >= 65 &&\\n                uint8(_hexStr[i + 1]) <= 70\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(_hexStr[i]) >= 97 &&\\n                uint8(_hexStr[i]) <= 102\\n            ) tetrad1 = uint8(_hexStr[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(_hexStr[i + 1]) >= 97 &&\\n                uint8(_hexStr[i + 1]) <= 102\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 32] = bytes1(16 * tetrad1 + tetrad2);\\n\\n\\n        }\\n\\n        return bytes_array;\\n    }\\n\\n\\n}\",\"keccak256\":\"0xe6647fe1807817c88add5c3a56525128b78dc2d3d6d09d1fedbad7e6ac9c4ca5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102135760003560e01c80636af6400d11610118578063bdff6d1e116100a0578063d33a28a21161006f578063d33a28a214610605578063d431b1ac14610625578063e63ea4081461063a578063ee9592b91461065a578063fb0f97a81461069557600080fd5b8063bdff6d1e14610571578063cc9e3e8914610591578063ccb3f442146105c5578063d24c6944146105e557600080fd5b80638df0dcde116100e75780638df0dcde146104e25780638f28397014610506578063981aff4e14610526578063aaf10f4214610546578063affed0e01461055b57600080fd5b80636af6400d146104755780636d5ff479146104a55780636e9960c3146104b8578063848cb5c6146104cd57600080fd5b806345711d481161019b57806355b355601161016a57806355b35560146103d757806355d35a40146103f75780635c550ac2146104175780635c975abb146104375780635f670bd31461045557600080fd5b806345711d4814610354578063485cc955146103845780634f1ef286146103a457806352edfcdf146103b757600080fd5b80632f12d7ef116101e25780632f12d7ef146102ce57806333bb7f91146102ee5780633659cfe6146103015780633d4a2f6e146103215780633e553bab1461033457600080fd5b80630babd8641461021f5780631a19a6281461025c578063222b15fb1461027e5780632b585db4146102ae57600080fd5b3661021a57005b600080fd5b34801561022b57600080fd5b5060035461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b5061027c61027736600461447d565b6106b5565b005b34801561028a57600080fd5b5061029e61029936600461423b565b610762565b6040519015158152602001610253565b3480156102ba57600080fd5b5061029e6102c936600461440f565b610780565b3480156102da57600080fd5b5061027c6102e9366004614380565b6107ad565b61027c6102fc36600461423b565b610a8a565b34801561030d57600080fd5b5061027c61031c36600461423b565b610c32565b61027c61032f36600461489e565b610cfb565b34801561034057600080fd5b5061027c61034f36600461423b565b610f36565b34801561036057600080fd5b5061029e61036f36600461423b565b60086020526000908152604090205460ff1681565b34801561039057600080fd5b5061027c61039f366004614258565b610fb8565b61027c6103b23660046142d2565b6110fc565b3480156103c357600080fd5b5061027c6103d236600461423b565b6111b2565b3480156103e357600080fd5b5061027c6103f236600461443b565b611234565b34801561040357600080fd5b5061027c610412366004614951565b6112a2565b34801561042357600080fd5b5060045461023f906001600160a01b031681565b34801561044357600080fd5b5060015462010000900460ff1661029e565b34801561046157600080fd5b5060065461023f906001600160a01b031681565b34801561048157600080fd5b5061029e6104903660046147ae565b60076020526000908152604090205460ff1681565b61027c6104b33660046148e2565b611327565b3480156104c457600080fd5b5061023f611581565b3480156104d957600080fd5b5061027c611590565b3480156104ee57600080fd5b506104f860055481565b604051908152602001610253565b34801561051257600080fd5b5061027c61052136600461423b565b6115d2565b34801561053257600080fd5b5061027c610541366004614321565b61163a565b34801561055257600080fd5b5061023f611905565b34801561056757600080fd5b506104f860025481565b34801561057d57600080fd5b50600a5461023f906001600160a01b031681565b34801561059d57600080fd5b506104f87f000000000000000000000000000000000000000000000000000000000000000081565b3480156105d157600080fd5b5061027c6105e036600461447d565b61190f565b3480156105f157600080fd5b5061027c610600366004614976565b6119af565b34801561061157600080fd5b5061027c610620366004614976565b611c5c565b34801561063157600080fd5b5061027c611f09565b34801561064657600080fd5b5061027c610655366004614291565b611f49565b34801561066657600080fd5b5061029e610675366004614951565b600960209081526000928352604080842090915290825290205460ff1681565b3480156106a157600080fd5b5061027c6106b0366004614291565b61200c565b6106bd61219b565b6001600160a01b0316336001600160a01b0316146106f65760405162461bcd60e51b81526004016106ed90614d8a565b60405180910390fd5b60005b815181101561075e5760006008600084848151811061071a5761071a61515e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806107568161512d565b9150506106f9565b5050565b6001600160a01b031660009081526008602052604090205460ff1690565b60008181526009602090815260408083206001600160a01b038616845290915290205460ff165b92915050565b600260005414156107d05760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff16156107fe5760405162461bcd60e51b81526004016106ed90614d60565b60008381526009602090815260408083206001600160a01b038a1684529091529020548690849060ff166108445760405162461bcd60e51b81526004016106ed90614cbd565b7f00000000000000000000000000000000000000000000000000000000000000008514156108b05760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b60448201526064016106ed565b6040516370a0823160e01b815233600482015286906001600160a01b038a16906370a082319060240160206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092991906147c7565b10156109775760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016106ed565b61098088610762565b156109ea5760405163079cc67960e41b8152336004820152602481018790526001600160a01b038916906379cc679090604401600060405180830381600087803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505050506109f6565b6109f6883330896121ce565b6000610a033389886122fe565b9050857f00000000000000000000000000000000000000000000000000000000000000007fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a583610a528d61236f565b610a5b3361236f565b8d8d8c8c604051610a729796959493929190614b7a565b60405180910390a35050600160005550505050505050565b60026000541415610aad5760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff1615610adb5760405162461bcd60e51b81526004016106ed90614d60565b60035460055460008181526009602090815260408083206001600160a01b039095168084529490915290205460ff16610b265760405162461bcd60e51b81526004016106ed90614cbd565b33346000610b3f83610b378861236f565b6005546122fe565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b50506005546003549093507f000000000000000000000000000000000000000000000000000000000000000092507fb7100086a8e13ebae772a0f09b07046e389a6b036406d22b86f2d2e5b860a8d9915084906001600160a01b0316610c0a8861236f565b8b88604051610c1d959493929190614b3f565b60405180910390a35050600160005550505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c7b5760405162461bcd60e51b81526004016106ed90614c71565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cad6123a5565b6001600160a01b031614610cd35760405162461bcd60e51b81526004016106ed90614ceb565b610cdc816123cd565b60408051600080825260208201909252610cf891839190612449565b50565b60026000541415610d1e5760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff1615610d4c5760405162461bcd60e51b81526004016106ed90614d60565b60035460008281526009602090815260408083206001600160a01b0390941680845293909152902054829060ff16610d965760405162461bcd60e51b81526004016106ed90614cbd565b7f0000000000000000000000000000000000000000000000000000000000000000831415610df95760405162461bcd60e51b815260206004820152601060248201526f37b7363c9037ba3432b91031b430b4b760811b60448201526064016106ed565b3480610e395760405162461bcd60e51b815260206004820152600f60248201526e62616c616e6365206973207a65726f60881b60448201526064016106ed565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b50505050506000610eaf3387876122fe565b60035490915085907f0000000000000000000000000000000000000000000000000000000000000000907f44ff77018688dad4b245e8ab97358ed57ed92269952ece7ffd321366ce078622908490610f0f906001600160a01b031661236f565b610f183361236f565b8b88610f24600061236f565b604051610c1d96959493929190614bf8565b610f3e61219b565b6001600160a01b0316336001600160a01b031614610f6e5760405162461bcd60e51b81526004016106ed90614d8a565b806001600160a01b038116610f955760405162461bcd60e51b81526004016106ed90614d37565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b600154610100900460ff16610fd35760015460ff1615610fd7565b303b155b61103a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106ed565b600154610100900460ff1615801561105c576001805461ffff19166101011790555b826001600160a01b0381166110835760405162461bcd60e51b81526004016106ed90614d37565b826001600160a01b0381166110aa5760405162461bcd60e51b81526004016106ed90614d37565b600380546001600160a01b038088166001600160a01b03199283161790925560068054928716929091169190911790556110e333612594565b505080156110f7576001805461ff00191690555b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111455760405162461bcd60e51b81526004016106ed90614c71565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111776123a5565b6001600160a01b03161461119d5760405162461bcd60e51b81526004016106ed90614ceb565b6111a6826123cd565b61075e82826001612449565b6111ba61219b565b6001600160a01b0316336001600160a01b0316146111ea5760405162461bcd60e51b81526004016106ed90614d8a565b806001600160a01b0381166112115760405162461bcd60e51b81526004016106ed90614d37565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61123c61219b565b6001600160a01b0316336001600160a01b03161461126c5760405162461bcd60e51b81526004016106ed90614d8a565b60009182526009602090815260408084206001600160a01b03959095168452939052919020805460ff1916911515919091179055565b6112aa61219b565b6001600160a01b0316336001600160a01b0316146112da5760405162461bcd60e51b81526004016106ed90614d8a565b806001600160a01b0381166113015760405162461bcd60e51b81526004016106ed90614d37565b50600480546001600160a01b0319166001600160a01b0392909216919091179055600555565b6002600054141561134a5760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff16156113785760405162461bcd60e51b81526004016106ed90614d60565b60035460008481526009602090815260408083206001600160a01b0390941680845293909152902054849060ff166113c25760405162461bcd60e51b81526004016106ed90614cbd565b7f000000000000000000000000000000000000000000000000000000000000000085141561142e5760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b60448201526064016106ed565b34806114745760405162461bcd60e51b815260206004820152601560248201527453656e64696e672076616c7565206973207a65726f60581b60448201526064016106ed565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050505060006114ea3389896122fe565b60035490915087907f0000000000000000000000000000000000000000000000000000000000000000907fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a590849061154a906001600160a01b031661236f565b6115533361236f565b8d888d8d60405161156a9796959493929190614b7a565b60405180910390a350506001600055505050505050565b600061158b61219b565b905090565b61159861219b565b6001600160a01b0316336001600160a01b0316146115c85760405162461bcd60e51b81526004016106ed90614d8a565b6115d06125e8565b565b6115da61219b565b6001600160a01b0316336001600160a01b03161461160a5760405162461bcd60e51b81526004016106ed90614d8a565b806001600160a01b0381166116315760405162461bcd60e51b81526004016106ed90614d37565b61075e82612594565b6002600054141561165d5760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff161561168b5760405162461bcd60e51b81526004016106ed90614d60565b60008181526009602090815260408083206001600160a01b03881684529091529020548490829060ff166116d15760405162461bcd60e51b81526004016106ed90614cbd565b7f00000000000000000000000000000000000000000000000000000000000000008314156117345760405162461bcd60e51b815260206004820152601060248201526f37b7363c9037ba3432b91031b430b4b760811b60448201526064016106ed565b6040516370a0823160e01b815233600482015284906001600160a01b038816906370a082319060240160206040518083038186803b15801561177557600080fd5b505afa158015611789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ad91906147c7565b10156117ed5760405162461bcd60e51b815260206004820152600f60248201526e62616c616e636520746f6f206c6f7760881b60448201526064016106ed565b6117f686610762565b156118605760405163079cc67960e41b8152336004820152602481018590526001600160a01b038716906379cc679090604401600060405180830381600087803b15801561184357600080fd5b505af1158015611857573d6000803e3d6000fd5b5050505061186c565b61186c863330876121ce565b60006118793387866122fe565b9050837f00000000000000000000000000000000000000000000000000000000000000007f44ff77018688dad4b245e8ab97358ed57ed92269952ece7ffd321366ce078622836118c88b61236f565b6118d13361236f565b8b8b6118dd600061236f565b6040516118ef96959493929190614bf8565b60405180910390a3505060016000555050505050565b600061158b6123a5565b61191761219b565b6001600160a01b0316336001600160a01b0316146119475760405162461bcd60e51b81526004016106ed90614d8a565b60005b815181101561075e5760016008600084848151811061196b5761196b61515e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806119a78161512d565b91505061194a565b600260005414156119d25760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff1615611a005760405162461bcd60e51b81526004016106ed90614d60565b6005548214611a445760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a590818da185a5b881a5960821b60448201526064016106ed565b60065460405163016dc52760e41b8152600091829182916001600160a01b0316906316dc527090611a79908790600401614c5e565b600060405180830381600087803b158015611a9357600080fd5b505af1158015611aa7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611acf9190810190614721565b925092509250828290611af55760405162461bcd60e51b81526004016106ed9190614c5e565b506000611b0182612683565b905060005b8151811015611bff576000828281518110611b2357611b2361515e565b6020026020010151905060008160200151600081518110611b4657611b4661515e565b6020026020010151806020019051810190611b6191906147c7565b90506040518060800160405280604781526020016151ae604791398051906020012081148015611ba0575081516004546001600160a01b039081169116145b15611bea576000611bb083612913565b91505080608001517f00000000000000000000000000000000000000000000000000000000000000001415611be857611be881612a17565b505b50508080611bf79061512d565b915050611b06565b5060405133907f00000000000000000000000000000000000000000000000000000000000000009088907f8c991a6f7ef9e9e8c0cc7f34d5ce0b20ff23538ec4d944e9d065b833982fc78390600090a45050600160005550505050565b60026000541415611c7f5760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff1615611cad5760405162461bcd60e51b81526004016106ed90614d60565b6005548214611cf15760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a590818da185a5b881a5960821b60448201526064016106ed565b60065460405163016dc52760e41b8152600091829182916001600160a01b0316906316dc527090611d26908790600401614c5e565b600060405180830381600087803b158015611d4057600080fd5b505af1158015611d54573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d7c9190810190614721565b925092509250828290611da25760405162461bcd60e51b81526004016106ed9190614c5e565b506000611dae82612683565b905060005b8151811015611eac576000828281518110611dd057611dd061515e565b6020026020010151905060008160200151600081518110611df357611df361515e565b6020026020010151806020019051810190611e0e91906147c7565b905060405180608001604052806043815260200161521c604391398051906020012081148015611e4d575081516004546001600160a01b039081169116145b15611e97576000611e5d83612bc2565b91505080602001517f00000000000000000000000000000000000000000000000000000000000000001415611e9557611e9581612cc9565b505b50508080611ea49061512d565b915050611db3565b5060405133907f00000000000000000000000000000000000000000000000000000000000000009088907f8131e5b107f7021b0773c1108755872d7b94bb31532fdf2256e0a3ef2c890a3d90600090a45050600160005550505050565b611f1161219b565b6001600160a01b0316336001600160a01b031614611f415760405162461bcd60e51b81526004016106ed90614d8a565b6115d06130d4565b611f5161219b565b6001600160a01b0316336001600160a01b031614611f815760405162461bcd60e51b81526004016106ed90614d8a565b816001600160a01b038116611fa85760405162461bcd60e51b81526004016106ed90614d37565b6003546001600160a01b0385811691161415611fe357600354611fd4906001600160a01b031683613136565b611fde838361324c565b612006565b6001600160a01b038416611ffb57611fde838361324c565b612006848484613315565b50505050565b6002600054141561202f5760405162461bcd60e51b81526004016106ed90614db5565b600260005560015462010000900460ff161561205d5760405162461bcd60e51b81526004016106ed90614d60565b60055460008181526009602090815260408083206001600160a01b038816845290915290205484919060ff166120a55760405162461bcd60e51b81526004016106ed90614cbd565b336120af86610762565b1561211b5760405163079cc67960e41b81526001600160a01b038281166004830152602482018690528716906379cc679090604401600060405180830381600087803b1580156120fe57600080fd5b505af1158015612112573d6000803e3d6000fd5b50505050612127565b612127868230876121ce565b600061213682610b378861236f565b90506005547f00000000000000000000000000000000000000000000000000000000000000007fb7100086a8e13ebae772a0f09b07046e389a6b036406d22b86f2d2e5b860a8d9838a6121888761236f565b8b8b6040516118ef959493929190614b3f565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916122329190614aef565b6000604051808303816000865af19150503d806000811461226f576040519150601f19603f3d011682016040523d82523d6000602084013e612274565b606091505b509150915081801561229e57508051158061229e57508080602001905181019061229e9190614704565b6122f65760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016106ed565b505050505050565b60028054600091309190836123128361512d565b919050557f000000000000000000000000000000000000000000000000000000000000000084878760405160200161234f96959493929190614a94565b6040516020818303038152906040528051906020012090505b9392505050565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6121bf565b6123d561219b565b6001600160a01b0316336001600160a01b031614610cf85760405162461bcd60e51b815260206004820152602b60248201527f4d41504f6d6e69636861696e536572766963653a206f6e6c792041646d696e2060448201526a63616e207570677261646560a81b60648201526084016106ed565b60006124536123a5565b905061245e84613429565b60008351118061246b5750815b1561247c5761247a84846134d1565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661258d57805460ff191660011781556040516001600160a01b03831660248201526124fb90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526134d1565b50805460ff1916815561250c6123a5565b6001600160a01b0316826001600160a01b0316146125845760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106ed565b61258d856134f6565b5050505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6125bd61219b565b604080516001600160a01b03928316815291841660208301520160405180910390a1610cf881613536565b60015462010000900460ff166126375760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6001805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606060006126c06126bb8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6135c2565b905080516001600160401b038111156126db576126db615174565b60405190808252806020026020018201604052801561273957816020015b612726604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816126f95790505b50915060005b815181101561290c57600061276c83838151811061275f5761275f61515e565b60200260200101516135c2565b90506003815110156127b45760405162461bcd60e51b81526020600482015260116024820152706c6f67206c656e67746820746f206c6f7760781b60448201526064016106ed565b60006127cc8260018151811061275f5761275f61515e565b9050600081516001600160401b038111156127e9576127e9615174565b60405190808252806020026020018201604052801561281c57816020015b60608152602001906001900390816128075790505b50905060005b825181101561287d5761284d8382815181106128405761284061515e565b6020026020010151613709565b82828151811061285f5761285f61515e565b602002602001018190525080806128759061512d565b915050612822565b5060405180606001604052806128ac8560008151811061289f5761289f61515e565b60200260200101516137bc565b6001600160a01b031681526020018281526020016128d6856002815181106128405761284061515e565b8152508685815181106128eb576128eb61515e565b602002602001018190525050505080806129049061512d565b91505061273f565b5050919050565b606061296060405180610100016040528060608152602001606081526020016000801916815260200160008152602001600081526020016060815260200160008152602001606081525090565b825161296b9061236f565b915082602001516001815181106129845761298461515e565b602002602001015180602001905181019061299f91906147c7565b60608201526020830151805160029081106129bc576129bc61515e565b60200260200101518060200190518101906129d791906147c7565b6080820152604083015180516129f5916020918101820191016147e0565b60e087015260c086015260a08501526020840152825260408201529092909150565b60408082015160008181526007602052919091205460ff1615612a6a5760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b60448201526064016106ed565b6000818152600760205260408120805460ff1916600117905560e0830151612a93906014015190565b90506000612aa68460a001516014015190565b60c0850151600354919250906001600160a01b0384811691161415612aea57600354612adb906001600160a01b031682613136565b612ae5828261324c565b612b6a565b612af383610762565b15612b5f576040516340c10f1960e01b81526001600160a01b038381166004830152602482018390528416906340c10f1990604401600060405180830381600087803b158015612b4257600080fd5b505af1158015612b56573d6000803e3d6000fd5b50505050612b6a565b612b6a838383613315565b846080015185606001517f3790accbe9ce42658f962f7e7cfa0e6ae7acbb46014c6e01e1219a087816137587604001518689602001518787604051612bb3959493929190614b3f565b60405180910390a35050505050565b6060612c0f60405180610100016040528060008152602001600081526020016000801916815260200160608152602001606081526020016060815260200160008152602001606081525090565b8251612c1a9061236f565b91508260200151600181518110612c3357612c3361515e565b6020026020010151806020019051810190612c4e91906147c7565b8152602083015180516002908110612c6857612c6861515e565b6020026020010151806020019051810190612c8391906147c7565b8160200181815250508260400151806020019051810190612ca491906147e0565b60e087015260c086015260a08501526080840152606083015260408201529092909150565b60408082015160008181526007602052919091205460ff1615612d1c5760405162461bcd60e51b815260206004820152600b60248201526a1bdc99195c88195e1a5cdd60aa1b60448201526064016106ed565b6000818152600760205260408120805460ff191660011790556060830151612d45906014015190565b9050612d746040518060600160405280606081526020016060815260200160006001600160a01b031681525090565b8360e00151806020019051810190612d8c91906145b1565b6001600160a01b0316604084015260208301819052908252601401516000612db98660a001516014015190565b60c087015184518051929350909115612f9857612dd586610762565b15612e3b576040516340c10f1960e01b8152306004820152602481018390526001600160a01b038716906340c10f1990604401600060405180830381600087803b158015612e2257600080fd5b505af1158015612e36573d6000803e3d6000fd5b505050505b6000612e468261380e565b90506000612e5b8885848d60a001518b61385e565b600a54909150612e769089906001600160a01b031686613ba3565b600a546040516000916001600160a01b031690612e97908490602401614dec565b60408051601f198184030181529181526020820180516001600160e01b0316630856506160e31b17905251612ecc9190614aef565b6000604051808303816000865af19150503d8060008114612f09576040519150601f19603f3d011682016040523d82523d6000602084013e612f0e565b606091505b505090508015612f91578a604001517f00000000000000000000000000000000000000000000000000000000000000008c600001517f2a945137b011d4aadec6425788c652197d107fc33f6cdccbb0c269273be9c1c98a8f608001518b8b604051612f7c9493929190614b0b565b60405180910390a45050505050505050505050565b8896505050505b6003546001600160a01b0385811691161415612fd357600354612fc4906001600160a01b031683613136565b612fce838361324c565b61305e565b612fdc84610762565b8015612fe757508051155b15613053576040516340c10f1960e01b81526001600160a01b038481166004830152602482018490528516906340c10f1990604401600060405180830381600087803b15801561303657600080fd5b505af115801561304a573d6000803e3d6000fd5b5050505061305e565b61305e848484613315565b87604001517f000000000000000000000000000000000000000000000000000000000000000089600001517f2a945137b011d4aadec6425788c652197d107fc33f6cdccbb0c269273be9c1c9878c6080015188886040516130c29493929190614b0b565b60405180910390a45050505050505050565b60015462010000900460ff16156130fd5760405162461bcd60e51b81526004016106ed90614d60565b6001805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126663390565b600080836001600160a01b0316632e1a7d4d8460405160240161315b91815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516131949190614aef565b6000604051808303816000865af19150503d80600081146131d1576040519150601f19603f3d011682016040523d82523d6000602084013e6131d6565b606091505b50915091508180156132005750805115806132005750808060200190518101906132009190614704565b6120065760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a2057495448445241575f4641494c45440060448201526064016106ed565b604080516000808252602082019092526001600160a01b0384169083906040516132769190614aef565b60006040518083038185875af1925050503d80600081146132b3576040519150601f19603f3d011682016040523d82523d6000602084013e6132b8565b606091505b50509050806110f75760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016106ed565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916133719190614aef565b6000604051808303816000865af19150503d80600081146133ae576040519150601f19603f3d011682016040523d82523d6000602084013e6133b3565b606091505b50915091508180156133dd5750805115806133dd5750808060200190518101906133dd9190614704565b61258d5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016106ed565b803b61348d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106ed565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b606061236883836040518060600160405280602781526020016151f560279139613cb7565b6134ff81613429565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661359b5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ed565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036134b0565b60606135cd82613d8b565b6136085760405162461bcd60e51b815260206004820152600c60248201526b1a5cc81b1a5cdd0819985a5b60a21b60448201526064016106ed565b600061361383613dc4565b90506000816001600160401b0381111561362f5761362f615174565b60405190808252806020026020018201604052801561367457816020015b604080518082019091526000808252602082015281526020019060019003908161364d5790505b50905060006136868560200151613e47565b85602001516136959190614fc4565b90506000805b848110156136fe576136ac83613ec2565b91506040518060400160405280838152602001848152508482815181106136d5576136d561515e565b60209081029190910101526136ea8284614fc4565b9250806136f68161512d565b91505061369b565b509195945050505050565b805160609061374d5760405162461bcd60e51b815260206004820152601060248201526f6974656d206c656e206973207a65726f60801b60448201526064016106ed565b60008061375984613f6b565b915091506000816001600160401b0381111561377757613777615174565b6040519080825280601f01601f1916602001820160405280156137a1576020820181803683370190505b509050602081016137b3848285613fb2565b50949350505050565b80516000906015146138055760405162461bcd60e51b81526020600482015260126024820152716974656d206c656e206973206e6f7420323160701b60448201526064016106ed565b6107a782614031565b6000805b82518110156138585782818151811061382d5761382d61515e565b602002602001015160000151826138449190614fc4565b9150806138508161512d565b915050613812565b50919050565b6138666140f2565b815180516000906001600160401b0381111561388457613884615174565b6040519080825280602002602001820160405280156138ad578160200160208202803683370190505b509050600082516001600160401b038111156138cb576138cb615174565b6040519080825280602002602001820160405280156138fe57816020015b60608152602001906001900390816138e95790505b509050600083516001600160401b0381111561391c5761391c615174565b604051908082528060200260200182016040528015613945578160200160208202803683370190505b50905087891061398c57613959888a6150c7565b8460008151811061396c5761396c61515e565b60200260200101516000018181516139849190614fc4565b9052506139c5565b61399689896150c7565b846000815181106139a9576139a961515e565b60200260200101516000018181516139c191906150c7565b9052505b60005b8451811015613b35578481815181106139e3576139e361515e565b602002602001015160000151848281518110613a0157613a0161515e565b602002602001018181525050848181518110613a1f57613a1f61515e565b602002602001015160600151828281518110613a3d57613a3d61515e565b602002602001019063ffffffff16908163ffffffff1681525050838181518110613a6957613a6961515e565b6020026020010151858281518110613a8357613a8361515e565b602002602001015160200151868381518110613aa157613aa161515e565b602002602001015160400151806020019051810190613ac0919061451d565b60148b0151613ad0426064614fc4565b8f613ae08d602001516014015190565b604051602001613af69796959493929190614e8c565b604051602081830303815290604052838281518110613b1757613b1761515e565b60200260200101819052508080613b2d9061512d565b9150506139c8565b506000604051806080016040528085815260200184815260200183815260200160405180604001604052808e6001600160a01b03166001600160a01b03168152602001613b878b602001516014015190565b6001600160a01b0316905290529b9a5050505050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691613bff9190614aef565b6000604051808303816000865af19150503d8060008114613c3c576040519150601f19603f3d011682016040523d82523d6000602084013e613c41565b606091505b5091509150818015613c6b575080511580613c6b575080806020019051810190613c6b9190614704565b61258d5760405162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c4544000060448201526064016106ed565b6060833b613d165760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106ed565b600080856001600160a01b031685604051613d319190614aef565b600060405180830381855af49150503d8060008114613d6c576040519150601f19603f3d011682016040523d82523d6000602084013e613d71565b606091505b5091509150613d818282866140b9565b9695505050505050565b8051600090613d9c57506000919050565b6020820151805160001a9060c0821015613dba575060009392505050565b5060019392505050565b8051600090613dd557506000919050565b600080613de58460200151613e47565b8460200151613df49190614fc4565b9050600084600001518560200151613e0c9190614fc4565b90505b80821015613e3e57613e2082613ec2565b613e2a9083614fc4565b915082613e368161512d565b935050613e0f565b50909392505050565b8051600090811a6080811015613e605750600092915050565b60b8811080613e7b575060c08110801590613e7b575060f881105b15613e895750600192915050565b60c0811015613eb657613e9e600160b86150de565b613eab9060ff16826150c7565b612368906001614fc4565b613e9e600160f86150de565b80516000908190811a6080811015613edd5760019150613f64565b60b8811015613f0357613ef16080826150c7565b613efc906001614fc4565b9150613f64565b60c0811015613f305760b78103600185019450806020036101000a85510460018201810193505050613f64565b60f8811015613f4457613ef160c0826150c7565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6000806000613f7d8460200151613e47565b90506000818560200151613f919190614fc4565b90506000828660000151613fa591906150c7565b9196919550909350505050565b80613fbc57505050565b60208110613ff45782518252613fd3602084614fc4565b9250613fe0602083614fc4565b9150613fed6020826150c7565b9050613fbc565b80156110f757600060016140098360206150c7565b6140159061010061501f565b61401f91906150c7565b84518451821691191617835250505050565b80516000901580159061404657508151602110155b6140895760405162461bcd60e51b81526020600482015260146024820152731a5d195b481b195b881a5cc81b9bdd081d5a5b9d60621b60448201526064016106ed565b60008061409584613f6b565b8151919350915060208210156140b15760208290036101000a90045b949350505050565b606083156140c8575081612368565b8251156140d85782518084602001fd5b8160405162461bcd60e51b81526004016106ed9190614c5e565b604051806080016040528060608152602001606081526020016060815260200161411a61411f565b905290565b60405180604001604052806002906020820280368337509192915050565b600061415061414b84614f9d565b614f4a565b905082815283838301111561416457600080fd5b612368836020830184615101565b805161417d8161518a565b919050565b60008083601f84011261419457600080fd5b5081356001600160401b038111156141ab57600080fd5b6020830191508360208285010111156141c357600080fd5b9250929050565b600082601f8301126141db57600080fd5b81356141e961414b82614f9d565b8181528460208386010111156141fe57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261422c57600080fd5b6123688383516020850161413d565b60006020828403121561424d57600080fd5b81356123688161518a565b6000806040838503121561426b57600080fd5b82356142768161518a565b915060208301356142868161518a565b809150509250929050565b6000806000606084860312156142a657600080fd5b83356142b18161518a565b925060208401356142c18161518a565b929592945050506040919091013590565b600080604083850312156142e557600080fd5b82356142f08161518a565b915060208301356001600160401b0381111561430b57600080fd5b614317858286016141ca565b9150509250929050565b6000806000806080858703121561433757600080fd5b84356143428161518a565b935060208501356001600160401b0381111561435d57600080fd5b614369878288016141ca565b949794965050505060408301359260600135919050565b60008060008060008060a0878903121561439957600080fd5b86356143a48161518a565b955060208701356001600160401b03808211156143c057600080fd5b6143cc8a838b016141ca565b9650604089013595506060890135945060808901359150808211156143f057600080fd5b506143fd89828a01614182565b979a9699509497509295939492505050565b6000806040838503121561442257600080fd5b823561442d8161518a565b946020939093013593505050565b60008060006060848603121561445057600080fd5b833561445b8161518a565b92506020840135915060408401356144728161519f565b809150509250925092565b6000602080838503121561449057600080fd5b82356001600160401b038111156144a657600080fd5b8301601f810185136144b757600080fd5b80356144c561414b82614f7a565b80828252848201915084840188868560051b87010111156144e557600080fd5b600094505b838510156145115780356144fd8161518a565b8352600194909401939185019185016144ea565b50979650505050505050565b6000602080838503121561453057600080fd5b82516001600160401b0381111561454657600080fd5b8301601f8101851361455757600080fd5b805161456561414b82614f7a565b80828252848201915084840188868560051b870101111561458557600080fd5b600094505b8385101561451157805161459d8161518a565b83526001949094019391850191850161458a565b6000806000606084860312156145c657600080fd5b83516001600160401b03808211156145dd57600080fd5b818601915086601f8301126145f157600080fd5b81516145ff61414b82614f7a565b80828252602082019150602085018a60208560051b880101111561462257600080fd5b60005b848110156146c45781518681111561463c57600080fd5b87016080818e03601f1901121561465257600080fd5b61465a614f22565b602082015181526040820151602082015260608201518881111561467d57600080fd5b61468c8f60208386010161421b565b6040830152506080820151915087821682146146a757600080fd5b606081019190915284526020938401939190910190600101614625565b5050602089015190975093505050808211156146df57600080fd5b506146ec8682870161421b565b9250506146fb60408501614172565b90509250925092565b60006020828403121561471657600080fd5b81516123688161519f565b60008060006060848603121561473657600080fd5b83516147418161519f565b60208501519093506001600160401b038082111561475e57600080fd5b818601915086601f83011261477257600080fd5b6147818783516020850161413d565b9350604086015191508082111561479757600080fd5b506147a48682870161421b565b9150509250925092565b6000602082840312156147c057600080fd5b5035919050565b6000602082840312156147d957600080fd5b5051919050565b60008060008060008060c087890312156147f957600080fd5b8651955060208701516001600160401b038082111561481757600080fd5b6148238a838b0161421b565b9650604089015191508082111561483957600080fd5b6148458a838b0161421b565b9550606089015191508082111561485b57600080fd5b6148678a838b0161421b565b94506080890151935060a089015191508082111561488457600080fd5b5061489189828a0161421b565b9150509295509295509295565b600080604083850312156148b157600080fd5b82356001600160401b038111156148c757600080fd5b6148d3858286016141ca565b95602094909401359450505050565b600080600080606085870312156148f857600080fd5b84356001600160401b038082111561490f57600080fd5b61491b888389016141ca565b955060208701359450604087013591508082111561493857600080fd5b5061494587828801614182565b95989497509550505050565b6000806040838503121561496457600080fd5b8235915060208301356142868161518a565b6000806040838503121561498957600080fd5b8235915060208301356001600160401b0381111561430b57600080fd5b8060005b60028110156120065781516001600160a01b03168452602093840193909101906001016149aa565b600081518084526020808501808196508360051b8101915082860160005b85811015614a1a578284038952614a08848351614a68565b988501989350908401906001016149f0565b5091979650505050505050565b600081518084526020808501945080840160005b83811015614a5d57815163ffffffff1687529582019590820190600101614a3b565b509495945050505050565b60008151808452614a80816020860160208601615101565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152856054840152808560601b166074840152508251614add816088850160208701615101565b91909101608801979650505050505050565b60008251614b01818460208701615101565b9190910192915050565b600060018060a01b03808716835260806020840152614b2d6080840187614a68565b94166040830152506060015292915050565b858152600060018060a01b03808716602084015260a06040840152614b6760a0840187614a68565b9416606083015250608001529392505050565b87815260c060208201526000614b9360c0830189614a68565b8281036040840152614ba58189614a68565b90508281036060840152614bb98188614a68565b905085608084015282810360a0840152838152838560208301376000602085830101526020601f19601f86011682010191505098975050505050505050565b86815260c060208201526000614c1160c0830188614a68565b8281036040840152614c238188614a68565b90508281036060840152614c378187614a68565b905084608084015282810360a0840152614c518185614a68565b9998505050505050505050565b6020815260006123686020830184614a68565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252601490820152731d1bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526011908201527036b7b9901d1d1037b7363c9030b236b4b760791b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252825160a083830152805160c0840181905260009291820190839060e08601905b80831015614e315783518252928401926001929092019190840190614e11565b50838701519350601f19925082868203016040870152614e5181856149d2565b93505050604085015181858403016060860152614e6e8382614a27565b925050506060840151614e8460808501826149a6565b509392505050565b600060e082018983526020898185015260e0604085015281895180845261010086019150828b01935060005b81811015614edd5784516001600160a01b031683529383019391830191600101614eb8565b50506001600160a01b03898116606087015260808601899052871660a08601529250614f07915050565b6001600160a01b03831660c083015298975050505050505050565b604051608081016001600160401b0381118282101715614f4457614f44615174565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614f7257614f72615174565b604052919050565b60006001600160401b03821115614f9357614f93615174565b5060051b60200190565b60006001600160401b03821115614fb657614fb6615174565b50601f01601f191660200190565b60008219821115614fd757614fd7615148565b500190565b600181815b80851115615017578160001904821115614ffd57614ffd615148565b8085161561500a57918102915b93841c9390800290614fe1565b509250929050565b60006123688383600082615035575060016107a7565b81615042575060006107a7565b816001811461505857600281146150625761507e565b60019150506107a7565b60ff84111561507357615073615148565b50506001821b6107a7565b5060208310610133831016604e8410600b84101617156150a1575081810a6107a7565b6150ab8383614fdc565b80600019048211156150bf576150bf615148565b029392505050565b6000828210156150d9576150d9615148565b500390565b600060ff821660ff8416808210156150f8576150f8615148565b90039392505050565b60005b8381101561511c578181015183820152602001615104565b838111156120065750506000910152565b600060001982141561514157615141615148565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610cf857600080fd5b8015158114610cf857600080fdfe6d61705472616e736665724f75742875696e743235362c75696e743235362c627974657333322c62797465732c62797465732c62797465732c75696e743235362c627974657329416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65646d6170537761704f75742875696e743235362c75696e743235362c627974657333322c62797465732c62797465732c62797465732c75696e743235362c627974657329a2646970667358221220ee78e2c88496cb663867fa7bb8f682f1348d4031a4c96fae1f15f4d261e2a9cd64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1003,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 747,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 750,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 918,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "_paused",
        "offset": 2,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5136,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5138,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "wToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5140,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "relayContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5142,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "relayChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5145,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "lightNode",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILightNode)7443"
      },
      {
        "astId": 5149,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "orderList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5153,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "mintableTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5159,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "tokenMappingList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5161,
        "contract": "contracts/MAPOmnichainServiceV2.sol:MAPOmnichainServiceV2",
        "label": "butterCore",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILightNode)7443": {
        "encoding": "inplace",
        "label": "contract ILightNode",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}