{
  "address": "0x08553258DDF93e108F180bAC0Fa68fc06856B92B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapDepositIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapDepositOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "mapSwapExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "mapSwapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "mapSwapOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "mapTransferExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapTransferIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "toChainToken",
          "type": "bytes"
        }
      ],
      "name": "mapTransferOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "from",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mapTransferRelay",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainTypes",
      "outputs": [
        {
          "internalType": "enum MAPOmnichainServiceRelayV2.chainType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_receiptProof",
          "type": "bytes"
        }
      ],
      "name": "depositIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributeRate",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_managerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lightClientManager",
      "outputs": [
        {
          "internalType": "contract ILightClientManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mosContracts",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orderList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_address",
          "type": "bytes"
        },
        {
          "internalType": "enum MAPOmnichainServiceRelayV2.chainType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "registerChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setDistributeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_managerAddress",
          "type": "address"
        }
      ],
      "name": "setLightClientManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_register",
          "type": "address"
        }
      ],
      "name": "setTokenManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_receiptProof",
          "type": "bytes"
        }
      ],
      "name": "swapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initiatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "swapOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initiatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "swapOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegister",
      "outputs": [
        {
          "internalType": "contract ITokenRegisterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_receiptProof",
          "type": "bytes"
        }
      ],
      "name": "transferIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "transferOutNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChain",
          "type": "uint256"
        }
      ],
      "name": "transferOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vaultAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbb980a3d62eaf5abb20fd5718045432846df7727c9e8bf4318f3028f8f967ab9",
  "receipt": {
    "to": null,
    "from": "0x8c9b3cAf7DedD3003f53312779c1b92ba1625D94",
    "contractAddress": "0x08553258DDF93e108F180bAC0Fa68fc06856B92B",
    "transactionIndex": 0,
    "gasUsed": "6766961",
    "logsBloom": "0x
    "blockHash": "0x545693f05c31c7d27bd294cee054d3c5538a323a71865911f3e0b5fc6058a7c2",
    "transactionHash": "0xbb980a3d62eaf5abb20fd5718045432846df7727c9e8bf4318f3028f8f967ab9",
    "logs": [],
    "blockNumber": 1108904,
    "cumulativeGasUsed": "6766961",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9117a20fbac876cb1da82d013de9f5e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapDepositIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapDepositOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mapSwapExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"mapSwapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"mapSwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"mapTransferExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapTransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"toChainToken\",\"type\":\"bytes\"}],\"name\":\"mapTransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mapTransferRelay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainTypes\",\"outputs\":[{\"internalType\":\"enum MAPOmnichainServiceRelayV2.chainType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiptProof\",\"type\":\"bytes\"}],\"name\":\"depositIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributeRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightClientManager\",\"outputs\":[{\"internalType\":\"contract ILightClientManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mosContracts\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_address\",\"type\":\"bytes\"},{\"internalType\":\"enum MAPOmnichainServiceRelayV2.chainType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setDistributeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddress\",\"type\":\"address\"}],\"name\":\"setLightClientManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_register\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiptProof\",\"type\":\"bytes\"}],\"name\":\"swapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"swapOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"swapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegister\",\"outputs\":[{\"internalType\":\"contract ITokenRegisterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_receiptProof\",\"type\":\"bytes\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChain\",\"type\":\"uint256\"}],\"name\":\"transferOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MAPOmnichainServiceRelayV2.sol\":\"MAPOmnichainServiceRelayV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x9e98afb371699f94278d7a3ab3c1d9f740b0dc5939c5b3658aa152a2c247254b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MAPOmnichainServiceRelayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interface/IWToken.sol\\\";\\nimport \\\"./interface/IMAPToken.sol\\\";\\nimport \\\"./interface/IVaultTokenV2.sol\\\";\\nimport \\\"./interface/ITokenRegisterV2.sol\\\";\\nimport \\\"./interface/ILightClientManager.sol\\\";\\nimport \\\"./interface/IMOSV2.sol\\\";\\nimport \\\"./utils/TransferHelper.sol\\\";\\nimport \\\"./utils/EvmDecoder.sol\\\";\\nimport \\\"./utils/NearDecoder.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\n\\n\\ncontract MAPOmnichainServiceRelayV2 is ReentrancyGuard, Initializable, Pausable, IMOSV2, UUPSUpgradeable {\\n    using SafeMath for uint256;\\n\\n    struct Rate {\\n        address receiver;\\n        uint rate;\\n    }\\n\\n    enum chainType {\\n        NULL,\\n        EVM,\\n        NEAR\\n    }\\n\\n    uint256 public immutable selfChainId = block.chainid;\\n    uint256 public nonce;\\n    address public wToken;        // native wrapped token\\n    //id : 0 VToken  1:relayer\\n    ITokenRegisterV2 public tokenRegister;\\n    ILightClientManager public lightClientManager;\\n\\n    mapping(uint => Rate) public distributeRate;\\n    mapping(bytes32 => bool) public orderList;\\n    mapping(uint256 => bytes) public mosContracts;\\n    mapping(uint256 => chainType) public chainTypes;\\n\\n    event mapTransferRelay(uint256 indexed fromChain, uint256 indexed toChain, bytes32 orderId,\\n        address token, bytes from, bytes to, uint256 amount);\\n\\n    event mapDepositIn(uint256 indexed fromChain, uint256 indexed toChain, address indexed token, bytes32 orderId,\\n        bytes from, address to, uint256 amount);\\n\\n    event mapTransferExecute(uint256 indexed fromChain, uint256 indexed toChain, address indexed from);\\n\\n    event mapSwapExecute(uint256 indexed fromChain, uint256 indexed toChain, address indexed from);\\n\\n    function initialize(address _wToken, address _managerAddress) public initializer\\n    checkAddress(_wToken) checkAddress(_managerAddress) {\\n        wToken = _wToken;\\n        lightClientManager = ILightClientManager(_managerAddress);\\n        _changeAdmin(msg.sender);\\n    }\\n\\n\\n    receive() external payable {\\n        require(msg.sender == wToken, \\\"only wToken\\\");\\n    }\\n\\n\\n    modifier checkOrder(bytes32 orderId) {\\n        require(!orderList[orderId], \\\"order exist\\\");\\n        orderList[orderId] = true;\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _getAdmin(), \\\"mosRelay :: only admin\\\");\\n        _;\\n    }\\n\\n    modifier checkAddress(address _address){\\n        require(_address != address(0), \\\"address is zero\\\");\\n        _;\\n    }\\n\\n\\n    function setPause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function setUnpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setTokenManager(address _register) external onlyOwner checkAddress(_register) {\\n        tokenRegister = ITokenRegisterV2(_register);\\n    }\\n\\n    function setLightClientManager(address _managerAddress) external onlyOwner checkAddress(_managerAddress) {\\n        lightClientManager = ILightClientManager(_managerAddress);\\n    }\\n\\n    function registerChain(uint256 _chainId, bytes memory _address, chainType _type) external onlyOwner {\\n        mosContracts[_chainId] = _address;\\n        chainTypes[_chainId] = _type;\\n    }\\n\\n    // withdraw deposit token using vault token.\\n    function withdraw(address _vaultToken, uint256 _vaultAmount) external {\\n        require(_vaultToken != address(0), \\\"vault token not registered\\\");\\n        address token = IVaultTokenV2(_vaultToken).getTokenAddress();\\n        address vaultToken = tokenRegister.getVaultToken(token);\\n        require(_vaultToken == vaultToken, \\\"Invalid vault token\\\");\\n\\n        uint256 amount = IVaultTokenV2(vaultToken).getTokenAmount(_vaultAmount);\\n        IVaultTokenV2(vaultToken).withdraw(selfChainId, _vaultAmount, msg.sender);\\n        _withdraw(token, payable(msg.sender), amount);\\n    }\\n\\n    function emergencyWithdraw(address _token, address payable _receiver, uint256 _amount) external onlyOwner checkAddress(_receiver) {\\n        _withdraw(_token, _receiver, _amount);\\n    }\\n\\n    function setDistributeRate(uint _id, address _to, uint _rate) external onlyOwner checkAddress(_to) {\\n        require(_id < 3, \\\"Invalid rate id\\\");\\n\\n        distributeRate[_id] = Rate(_to, _rate);\\n\\n        require((distributeRate[0].rate).add(distributeRate[1].rate).add(distributeRate[2].rate) <= 1000000, 'invalid rate value');\\n    }\\n\\n    function transferOutToken(address _token, bytes memory _to, uint256 _amount, uint256 _toChain) external override whenNotPaused {\\n        require(_toChain != selfChainId, \\\"only other chain\\\");\\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \\\"balance too low\\\");\\n\\n        TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\\n        _transferOut(_token, msg.sender, _to, _amount, _toChain);\\n    }\\n\\n    function transferOutNative(bytes memory _to, uint256 _toChain) external override payable whenNotPaused {\\n        require(_toChain != selfChainId, \\\"only other chain\\\");\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"value too low\\\");\\n        IWToken(wToken).deposit{value : amount}();\\n        _transferOut(wToken, msg.sender, _to, amount, _toChain);\\n    }\\n\\n    function swapOutToken(\\n        address _initiatorAddress,\\n        address _token, // src token\\n        bytes memory _to,\\n        uint256 _amount,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) external override whenNotPaused {\\n        require(_toChain != selfChainId, \\\"Cannot swap to self chain\\\");\\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \\\"Insufficient token balance\\\");\\n\\n        TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\\n        _swapOut(_token, _to, _initiatorAddress, _amount, _toChain, swapData);\\n    }\\n\\n    function swapOutNative(\\n        address _initiatorAddress,\\n        bytes memory _to,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) external override payable whenNotPaused {\\n        require(_toChain != selfChainId, \\\"Cannot swap to self chain\\\");\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"Sending value is zero\\\");\\n        IWToken(wToken).deposit{value : amount}();\\n        _swapOut(wToken, _to, _initiatorAddress, amount, _toChain, swapData);\\n    }\\n\\n    function depositToken(address _token, address _to, uint _amount) external override nonReentrant whenNotPaused {\\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \\\"balance too low\\\");\\n\\n        TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _amount);\\n\\n        _deposit(_token, Utils.toBytes(msg.sender), _to, _amount, bytes32(\\\"\\\"), selfChainId);\\n    }\\n\\n    function depositNative(address _to) external override payable nonReentrant whenNotPaused {\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"value too low\\\");\\n        IWToken(wToken).deposit{value : amount}();\\n        _deposit(wToken, Utils.toBytes(msg.sender), _to, amount, bytes32(\\\"\\\"), selfChainId);\\n    }\\n\\n    function transferIn(uint256 _chainId, bytes memory _receiptProof) external nonReentrant whenNotPaused {\\n        (bool success,string memory message,bytes memory logArray) = lightClientManager.verifyProofData(_chainId, _receiptProof);\\n        require(success, message);\\n        if (chainTypes[_chainId] == chainType.NEAR) {\\n            (bytes memory mosContract, IEvent.transferOutEvent[] memory outEvents) = NearDecoder.decodeNearLog(logArray);\\n            for (uint i = 0; i < outEvents.length; i++) {\\n                IEvent.transferOutEvent memory outEvent = outEvents[i];\\n                if (outEvent.toChain == 0){continue;}\\n                require(Utils.checkBytes(mosContract, mosContracts[_chainId]), \\\"invalid mos contract\\\");\\n                _transferIn(_chainId, outEvent);\\n            }\\n        } else if (chainTypes[_chainId] == chainType.EVM) {\\n            IEvent.txLog[] memory logs = EvmDecoder.decodeTxLogs(logArray);\\n            for (uint256 i = 0; i < logs.length; i++) {\\n                IEvent.txLog memory log = logs[i];\\n                bytes32 topic = abi.decode(log.topics[0], (bytes32));\\n                if (topic == EvmDecoder.MAP_TRANSFEROUT_TOPIC) {\\n                    (bytes memory mosContract, IEvent.transferOutEvent memory outEvent) = EvmDecoder.decodeTransferOutLog(log);\\n                    //require(Utils.checkBytes(mosContract, mosContracts[_chainId]), \\\"invalid mos contract\\\");\\n                    if (Utils.checkBytes(mosContract, mosContracts[_chainId])) {\\n                        _transferIn(_chainId, outEvent);\\n                    }\\n                }\\n            }\\n        } else {\\n            require(false, \\\"chain type error\\\");\\n        }\\n        emit mapTransferExecute(_chainId, selfChainId, msg.sender);\\n    }\\n\\n    function swapIn(uint256 _chainId, bytes memory _receiptProof) external nonReentrant whenNotPaused {\\n        (bool success,string memory message,bytes memory logArray) = lightClientManager.verifyProofData(_chainId, _receiptProof);\\n        require(success, message);\\n        if (chainTypes[_chainId] == chainType.NEAR) {\\n            (bytes memory mosContract, IEvent.swapOutEvent[] memory outEvents) = NearDecoder.decodeNearSwapLog(logArray);\\n            for (uint i = 0; i < outEvents.length; i++) {\\n                IEvent.swapOutEvent memory outEvent = outEvents[i];\\n                if (outEvent.toChain == 0){continue;}\\n                require(Utils.checkBytes(mosContract, mosContracts[_chainId]), \\\"invalid mos contract\\\");\\n                _swapIn(_chainId, outEvent);\\n            }\\n        } else if (chainTypes[_chainId] == chainType.EVM) {\\n            IEvent.txLog[] memory logs = EvmDecoder.decodeTxLogs(logArray);\\n            for (uint256 i = 0; i < logs.length; i++) {\\n                IEvent.txLog memory log = logs[i];\\n                bytes32 topic = abi.decode(log.topics[0], (bytes32));\\n                if (topic == EvmDecoder.MAP_SWAPOUT_TOPIC) {\\n                    (bytes memory mosContract, IEvent.swapOutEvent memory outEvent) = EvmDecoder.decodeSwapOutLog(log);\\n                    require(Utils.checkBytes(mosContract, mosContracts[_chainId]), \\\"invalid mos contract\\\");\\n                    if (Utils.checkBytes(mosContract, mosContracts[_chainId])) {\\n                        _swapIn(_chainId, outEvent);\\n                    }\\n                }\\n            }\\n        } else {\\n            require(false, \\\"chain type error\\\");\\n        }\\n        emit mapSwapExecute(_chainId, selfChainId, msg.sender);\\n    }\\n\\n    function depositIn(uint256 _chainId, bytes memory _receiptProof) external payable nonReentrant whenNotPaused {\\n        (bool success,string memory message,bytes memory logArray) = lightClientManager.verifyProofData(_chainId, _receiptProof);\\n        require(success, message);\\n        if (chainTypes[_chainId] == chainType.NEAR) {\\n            (bytes memory mosContract, IEvent.depositOutEvent[] memory depositEvents) = NearDecoder.decodeNearDepositLog(logArray);\\n\\n            for(uint i = 0;i< depositEvents.length;i++){\\n                IEvent.depositOutEvent memory depositEvent = depositEvents[i];\\n                if (depositEvent.toChain == 0){continue;}\\n                require(Utils.checkBytes(mosContract, mosContracts[_chainId]), \\\"invalid mos contract\\\");\\n                _depositIn(_chainId, depositEvent);\\n            }\\n        } else if (chainTypes[_chainId] == chainType.EVM) {\\n            IEvent.txLog[] memory logs = EvmDecoder.decodeTxLogs(logArray);\\n            for (uint256 i = 0; i < logs.length; i++) {\\n                if (abi.decode(logs[i].topics[0], (bytes32)) == EvmDecoder.MAP_DEPOSITOUT_TOPIC) {\\n                    (bytes memory mosContract, IEvent.depositOutEvent memory depositEvent) = EvmDecoder.decodeDepositOutLog(logs[i]);\\n                    if (Utils.checkBytes(mosContract, mosContracts[_chainId])) {\\n                        _depositIn(_chainId, depositEvent);\\n                    }\\n                }\\n            }\\n        } else {\\n            require(false, \\\"chain type error\\\");\\n        }\\n        emit mapTransferExecute(_chainId, selfChainId, msg.sender);\\n    }\\n\\n\\n    function getFee(uint256 _id, uint256 _amount) view public returns (uint256, address){\\n        Rate memory rate = distributeRate[_id];\\n        return (_amount.mul(rate.rate).div(1000000), rate.receiver);\\n    }\\n\\n\\n    function _getOrderId(address _from, bytes memory _to, uint256 _toChain) internal returns (bytes32){\\n        return keccak256(abi.encodePacked(address(this), nonce++, selfChainId, _toChain, _from, _to));\\n    }\\n\\n    function _collectFee(address _token, uint256 _mapAmount, uint256 _fromChain, uint256 _toChain) internal returns (uint256, uint256) {\\n        address token = _token;\\n        address vaultToken = tokenRegister.getVaultToken(token);\\n        require(vaultToken != address(0), \\\"vault token not registered\\\");\\n\\n        uint256 fee = tokenRegister.getTokenFee(token, _mapAmount, _toChain);\\n\\n        uint256 mapOutAmount = 0;\\n        uint256 outAmount = 0;\\n        if (_mapAmount > fee) {\\n            mapOutAmount = _mapAmount - fee;\\n            outAmount = tokenRegister.getToChainAmount(token, mapOutAmount, _toChain);\\n        } else {\\n            fee = _mapAmount;\\n        }\\n\\n        uint256 otherFee = 0;\\n        if (fee > 0) {\\n            (uint256 vaultFee,) = getFee(0, fee);\\n            otherFee = fee - vaultFee;\\n\\n            (uint256 out, address receiver) = getFee(1, fee);\\n            if (out > 0 && receiver != address(0)) {\\n                _withdraw(token, payable(receiver), out);\\n            }\\n\\n            (uint256 protocolFee, address protocolReceiver) = getFee(2, fee);\\n            if (protocolFee > 0 && protocolReceiver != address(0)) {\\n                _withdraw(token, payable(protocolReceiver), protocolFee);\\n            }\\n        }\\n\\n        IVaultTokenV2(vaultToken).transferToken(_fromChain, _mapAmount, _toChain, mapOutAmount, selfChainId, otherFee);\\n\\n        return (mapOutAmount, outAmount);\\n    }\\n\\n    function _transferOut(address _token, address _from, bytes memory _to, uint256 _amount, uint256 _toChain) internal {\\n        bytes memory toToken = tokenRegister.getToChainToken(_token, _toChain);\\n        require(!Utils.checkBytes(toToken, bytes(\\\"\\\")), \\\"out token not registered\\\");\\n\\n        bytes32 orderId = _getOrderId(_from, _to, _toChain);\\n        emit mapTransferRelay(selfChainId, _toChain, orderId, _token, Utils.toBytes(_from), _to, _amount);\\n\\n        (uint256 mapOutAmount, uint256 outAmount) = _collectFee(_token, _amount, selfChainId, _toChain);\\n\\n        if (tokenRegister.checkMintable(_token)) {\\n            IMAPToken(_token).burn(mapOutAmount);\\n        }\\n\\n        emit mapTransferOut(selfChainId, _toChain, orderId, Utils.toBytes(_token), Utils.toBytes(_from), _to, outAmount, toToken);\\n    }\\n\\n    function _transferIn(uint256 _chainId, IEvent.transferOutEvent memory _outEvent)\\n    internal checkOrder(_outEvent.orderId) {\\n        require(_chainId == _outEvent.fromChain, \\\"invalid chain id\\\");\\n        address token = tokenRegister.getRelayChainToken(_outEvent.fromChain, _outEvent.token);\\n        require(token != address(0), \\\"map token not registered\\\");\\n        bytes memory toChainToken;\\n        if (_outEvent.toChain == selfChainId) {\\n            toChainToken = Utils.toBytes(token);\\n        } else {\\n            toChainToken = tokenRegister.getToChainToken(token, _outEvent.toChain);\\n            require(!Utils.checkBytes(toChainToken, bytes(\\\"\\\")), \\\"out token not registered\\\");\\n        }\\n\\n        uint256 mapAmount = tokenRegister.getRelayChainAmount(token, _outEvent.fromChain, _outEvent.amount);\\n        if (tokenRegister.checkMintable(token)) {\\n            IMAPToken(token).mint(address(this), mapAmount);\\n        }\\n\\n        emit mapTransferRelay(_outEvent.fromChain, _outEvent.toChain, _outEvent.orderId, token, _outEvent.from, _outEvent.to, mapAmount);\\n\\n        (uint256 mapOutAmount, uint256 outAmount) = _collectFee(token, mapAmount, _outEvent.fromChain, _outEvent.toChain);\\n\\n        if (_outEvent.toChain == selfChainId) {\\n            address payable toAddress = payable(Utils.fromBytes(_outEvent.to));\\n            if (token == wToken) {\\n                TransferHelper.safeWithdraw(wToken, mapOutAmount);\\n                TransferHelper.safeTransferETH(toAddress, mapOutAmount);\\n            } else {\\n                require(IERC20(token).balanceOf(address(this)) >= mapOutAmount, \\\"balance too low\\\");\\n                TransferHelper.safeTransfer(token, toAddress, mapOutAmount);\\n            }\\n            emit mapTransferIn(_outEvent.fromChain, _outEvent.toChain, _outEvent.orderId, token, _outEvent.from,\\n                toAddress, mapOutAmount);\\n        } else {\\n            if (tokenRegister.checkMintable(token)) {\\n                IMAPToken(token).burn(mapOutAmount);\\n            }\\n\\n            emit mapTransferOut(_outEvent.fromChain, _outEvent.toChain, _outEvent.orderId, _outEvent.token, _outEvent.from,\\n                _outEvent.to, outAmount, toChainToken);\\n        }\\n    }\\n\\n    function _swapIn(uint256 _chainId, IEvent.swapOutEvent memory _outEvent)\\n    internal checkOrder(_outEvent.orderId) {\\n        require(_chainId == _outEvent.fromChain, \\\"invalid chain id\\\");\\n        address token = tokenRegister.getRelayChainToken(_outEvent.fromChain, _outEvent.token);\\n        require(token != address(0), \\\"map token not registered\\\");\\n        // does not support swap on map for now.\\n        ButterLib.SwapData memory swapData;\\n        (swapData.swapParams, swapData.targetToken, swapData.mapTargetToken) = abi.decode(_outEvent.swapData,\\n            ((ButterLib.SwapParam)[], bytes, address));\\n        require(swapData.mapTargetToken == token, \\\"Swap on Map Relay Chain not supported yet\\\");\\n\\n        // if source token's relay chain mapping token is NOT mapTargetToken, then swap needed.\\n        //        if (_outEvent.mapTargetToken != token) {\\n        //            // swap logic goes here...\\n        //            token = _outEvent.mapTargetToken;\\n        //        }\\n\\n        bytes memory toChainToken;\\n        if (_outEvent.toChain == selfChainId) {\\n            toChainToken = Utils.toBytes(token);\\n        } else {\\n            toChainToken = tokenRegister.getToChainToken(token, _outEvent.toChain);\\n            require(!Utils.checkBytes(toChainToken, bytes(\\\"\\\")), \\\"out token not registered\\\");\\n        }\\n\\n        uint256 mapAmount = tokenRegister.getRelayChainAmount(token, _outEvent.fromChain, _outEvent.amount);\\n        if (tokenRegister.checkMintable(token)) {\\n            IMAPToken(token).mint(address(this), mapAmount);\\n        }\\n\\n        // emit mapTransferRelay(mapAmount, _outEvent.fromChain, _outEvent.toChain, _outEvent.orderId, token, _outEvent.from, _outEvent.toAddress, mapAmount);\\n\\n        (uint256 mapOutAmount, uint256 outAmount) = _collectFee(token, mapAmount, _outEvent.fromChain, _outEvent.toChain);\\n\\n        if (_outEvent.toChain == selfChainId) {\\n            address payable toAddress = payable(Utils.fromBytes(_outEvent.to));\\n            if (token == wToken) {\\n                TransferHelper.safeWithdraw(wToken, mapOutAmount);\\n                TransferHelper.safeTransferETH(toAddress, mapOutAmount);\\n            } else {\\n                require(IERC20(token).balanceOf(address(this)) >= mapOutAmount, \\\"balance too low\\\");\\n                TransferHelper.safeTransfer(token, toAddress, mapOutAmount);\\n            }\\n            emit mapSwapIn(_outEvent.fromChain, _outEvent.toChain, _outEvent.orderId, token, _outEvent.from, toAddress, mapOutAmount);\\n        } else {\\n            if (tokenRegister.checkMintable(token)) {\\n                IMAPToken(token).burn(mapOutAmount);\\n            }\\n            emit mapSwapOut(\\n                _outEvent.fromChain,\\n                _outEvent.toChain,\\n                _outEvent.orderId,\\n                toChainToken,\\n                _outEvent.from,\\n                _outEvent.to,\\n                outAmount,\\n                _outEvent.swapData\\n            );\\n        }\\n    }\\n\\n    function _swapOut(\\n        address _token, // src token\\n        bytes memory _to,\\n        address _from,\\n        uint256 _amount,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) internal {\\n        bytes memory toToken = tokenRegister.getToChainToken(_token, _toChain);\\n        // bytes memory toToken = \\\"0x0\\\";\\n        require(!Utils.checkBytes(toToken, bytes(\\\"\\\")), \\\"Out token not registered\\\");\\n\\n        (uint256 mapOutAmount, uint256 outAmount) = _collectFee(_token, _amount, selfChainId, _toChain);\\n\\n        if (tokenRegister.checkMintable(_token)) {\\n            IMAPToken(_token).burn(mapOutAmount);\\n        }\\n\\n        bytes32 orderId = _getOrderId(_from, _to, _toChain);\\n        emit mapSwapOut(\\n            selfChainId,\\n            _toChain,\\n            orderId,\\n            toToken,\\n            Utils.toBytes(_from),\\n            _to,\\n            outAmount,\\n            swapData\\n        );\\n    }\\n\\n    function _depositIn(uint256 _chainId, IEvent.depositOutEvent memory _depositEvent)\\n    internal checkOrder(_depositEvent.orderId) {\\n        require(_chainId == _depositEvent.fromChain, \\\"invalid chain id\\\");\\n        require(selfChainId == _depositEvent.toChain, \\\"invalid chain id\\\");\\n        address token = tokenRegister.getRelayChainToken(_depositEvent.fromChain, _depositEvent.token);\\n        require(token != address(0), \\\"map token not registered\\\");\\n\\n        uint256 mapAmount = tokenRegister.getRelayChainAmount(token, _depositEvent.fromChain, _depositEvent.amount);\\n        if (tokenRegister.checkMintable(token)) {\\n            IMAPToken(token).mint(address(this), mapAmount);\\n        }\\n\\n        _deposit(token, _depositEvent.from, Utils.fromBytes(_depositEvent.to), mapAmount, _depositEvent.orderId, _depositEvent.fromChain);\\n    }\\n\\n    function _deposit(address _token, bytes memory _from, address _to, uint256 _amount, bytes32 _orderId, uint256 _fromChain)\\n    internal {\\n        address vaultToken = tokenRegister.getVaultToken(_token);\\n        require(vaultToken != address(0), \\\"vault token not registered\\\");\\n\\n        IVaultTokenV2(vaultToken).deposit(_fromChain, _amount, _to);\\n        emit mapDepositIn(_fromChain, selfChainId, _token, _orderId, _from, _to, _amount);\\n    }\\n\\n    function _withdraw(address _token, address payable _receiver, uint256 _amount) internal {\\n        if (_token == wToken) {\\n            TransferHelper.safeWithdraw(wToken, _amount);\\n            TransferHelper.safeTransferETH(_receiver, _amount);\\n        } else {\\n            TransferHelper.safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n\\n    /** UUPS *********************************************************/\\n    function _authorizeUpgrade(address) internal view override {\\n        require(msg.sender == _getAdmin(), \\\"MAPOmnichainServiceRelay: only Admin can upgrade\\\");\\n    }\\n\\n    function changeAdmin(address _admin) external onlyOwner checkAddress(_admin) {\\n        _changeAdmin(_admin);\\n    }\\n\\n    function getAdmin() external view returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x477b17024d6e92064e4db7426c6f5951d9500c635dc65683822412e97134a357\",\"license\":\"MIT\"},\"contracts/interface/IEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\nimport \\\"../utils/ButterLib.sol\\\";\\n\\ninterface IEvent {\\n\\n    struct transferOutEvent {\\n        bytes token;\\n        bytes from;\\n        bytes32 orderId;\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes to;\\n        uint256 amount;\\n        bytes toChainToken;\\n    }\\n\\n    struct depositOutEvent {\\n        bytes token;\\n        bytes from;\\n        bytes32 orderId;\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes to;\\n        uint256 amount;\\n    }\\n\\n    struct swapOutEvent {\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes32 orderId;\\n        bytes token; // token to transfer\\n        bytes from;\\n        bytes to;\\n        uint256 amount;\\n        bytes swapData;\\n    }\\n\\n    struct txLog {\\n        address addr;\\n        bytes[] topics;\\n        bytes data;\\n    }\\n}\",\"keccak256\":\"0x95159409d2b69bb060442655ad08187cdd9c5bdd0ef11ca2c4b5659a0d59485c\",\"license\":\"MIT\"},\"contracts/interface/ILightClientManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface ILightClientManager {\\n    function updateBlockHeader(uint256 _chainId, bytes memory _blockHeader) external;\\n    function register(uint256 _chainId, address _contract,address _blockContract) external;\\n    function verifyProofData(uint _chainId, bytes memory _receiptProof) external view returns (bool success, string memory message,bytes memory logs);\\n    function headerHeight(uint256 _chainId) external view returns (uint256);\\n\\n    function verifiableHeaderRange(uint256 _chainId) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x0f9d2f42d6a7ec0a05adc97b0419ff0eb39420232faf3dc3b981179c0c407db1\",\"license\":\"MIT\"},\"contracts/interface/IMAPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n\\ninterface IMAPToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xc75a01ca47a7a0621b9673c468fbfa036c05cd8ed1909add795d2503ab5bab34\",\"license\":\"MIT\"},\"contracts/interface/IMOSV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../utils/ButterLib.sol\\\";\\npragma solidity 0.8.7;\\n\\ninterface IMOSV2 {\\n    function transferOutToken(address _token, bytes memory _to, uint _amount, uint _toChain) external;\\n    function transferOutNative(bytes memory _to, uint _toChain) external payable;\\n\\n    function swapOutToken(\\n        address _initiatorAddress,\\n        address _token, // src token\\n        bytes memory _to,\\n        uint256 _amount,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) external;\\n\\n    function swapOutNative(\\n        address _initiatorAddress,\\n        bytes memory _to,\\n        uint256 _toChain, // target chain id\\n        bytes calldata swapData\\n    ) external payable;\\n\\n    function depositToken(address _token, address to, uint _amount) external;\\n    function depositNative(address _to) external payable ;\\n\\n\\n    event mapTransferOut(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 orderId,\\n        bytes token,\\n        bytes from,\\n        bytes to,\\n        uint256 amount,\\n        bytes toChainToken\\n    );\\n\\n    event mapTransferIn(uint256 indexed fromChain, uint256 indexed toChain, bytes32 orderId,\\n        address token, bytes from,  address to, uint256 amount);\\n\\n    event mapDepositOut(uint256 indexed fromChain, uint256 indexed toChain, bytes32 orderId,\\n        address token, bytes from, address to, uint256 amount);\\n\\n    event mapSwapOut(\\n        uint256 indexed fromChain, // from chain\\n        uint256 indexed toChain, // to chain\\n        bytes32 orderId, // order id\\n        bytes token, // token to transfer\\n        bytes from, // source chain from address\\n        bytes to,\\n        uint256 amount,\\n        bytes swapData // swap data, used on target chain dex.\\n    );\\n\\n    event mapSwapIn(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 indexed orderId,\\n        address token,\\n        bytes from,\\n        address toAddress,\\n        uint256 amountOut\\n    );\\n\\n}\",\"keccak256\":\"0x231d5b174f108c7c790cf607fc74ac0d96b5959ff3bcb8fb98806e82fc3d1445\",\"license\":\"MIT\"},\"contracts/interface/ITokenRegisterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface ITokenRegisterV2 {\\n\\n    // Get token address on target chain\\n    function getToChainToken(address _token, uint256 _toChain) external view returns (bytes memory _toChainToken);\\n\\n    // Get token amount on target chain\\n    function getToChainAmount(address _token, uint256 _amount, uint256 _toChain) external view returns (uint256);\\n\\n    // Get token and vault token address on relay chain\\n    function getRelayChainToken(uint256 _fromChain, bytes memory _fromToken) external view returns (address);\\n\\n    // Get token amount on relay chain\\n    function getRelayChainAmount(address _token, uint256 _fromChain, uint256 _amount) external view returns (uint256);\\n\\n    function checkMintable(address _token) external view returns (bool);\\n\\n    function getVaultToken(address _token) external view returns (address);\\n\\n    function getTokenFee(address _token, uint256 _amount, uint256 _toChain) external view returns (uint256);\\n}\",\"keccak256\":\"0xf103fda6eabf36719668b090a768ee50f203c7a7562063ee4f26c733e1571dd7\",\"license\":\"MIT\"},\"contracts/interface/IVaultTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface IVaultTokenV2 {\\n\\n    function deposit(uint256 _fromChain, uint256 _amount, address _to) external;\\n\\n    function withdraw(uint256 _toChain, uint256 _vaultAmount, address _to) external;\\n\\n    function transferToken(uint256 _fromChain, uint256 _amount,  uint256 _toChain, uint256 _outAmount, uint256 _relayChain, uint256 _fee) external;\\n\\n    function getTokenAmount(uint256 _amount) external view returns (uint256);\\n\\n    function getTokenAddress() external view returns (address);\\n}\",\"keccak256\":\"0x1bd68baeadec98f72fb552d8fc1ae20a53030a19da53faae5e0dfbbb6caaeba0\",\"license\":\"MIT\"},\"contracts/interface/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface IWToken {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x964d8d14b24da8a10151f28c503d139810b4c65319b015f53a8c3d39f8531582\",\"license\":\"MIT\"},\"contracts/utils/ButterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary ButterLib {\\n    struct SwapParam {\\n        uint256 amountIn;\\n        uint256 minAmountOut;\\n        bytes path; //evm, or tokenIn'X'tokenOut on near\\n        uint64 routerIndex; // pool id on near or router index on evm\\n    }\\n\\n    struct SwapData {\\n        SwapParam[] swapParams;\\n        bytes targetToken;\\n        address mapTargetToken;\\n    }\\n\\n    struct ButterCoreSwapParam {\\n        uint256[]  amountInArr;\\n        bytes[]    paramsArr;\\n        uint32[]  routerIndex;\\n        address[2]  inputOutAddre; // 0 -input  1- Out\\n    }\\n\\n}\",\"keccak256\":\"0x685a6724b52028d4ed36b349d47130ed1bfa6effc72c9b9110a54d0bc55e810c\",\"license\":\"MIT\"},\"contracts/utils/EvmDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/ButterLib.sol\\\";\\nimport \\\"./RLPReader.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"../interface/IEvent.sol\\\";\\nlibrary EvmDecoder {\\n\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 constant MAP_TRANSFEROUT_TOPIC = keccak256(bytes('mapTransferOut(uint256,uint256,bytes32,bytes,bytes,bytes,uint256,bytes)'));\\n    bytes32 constant MAP_DEPOSITOUT_TOPIC = keccak256(bytes('mapDepositOut(uint256,uint256,bytes32,address,bytes,address,uint256)'));\\n    bytes32 constant MAP_SWAPOUT_TOPIC = keccak256(bytes('mapSwapOut(uint256,uint256,bytes32,bytes,bytes,bytes,uint256,bytes)'));\\n\\n\\n    function decodeTxLogs(bytes memory logsHash)\\n    internal\\n    pure\\n    returns (IEvent.txLog[] memory _txLogs){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n        _txLogs = new IEvent.txLog[](ls.length);\\n        for (uint256 i = 0; i < ls.length; i++) {\\n            RLPReader.RLPItem[] memory item = ls[i].toList();\\n\\n            require(item.length >= 3, \\\"log length to low\\\");\\n\\n            RLPReader.RLPItem[] memory firstItemList = item[1].toList();\\n            bytes[] memory topic = new bytes[](firstItemList.length);\\n            for (uint256 j = 0; j < firstItemList.length; j++) {\\n                topic[j] = firstItemList[j].toBytes();\\n            }\\n            _txLogs[i] = IEvent.txLog({\\n            addr : item[0].toAddress(),\\n            topics : topic,\\n            data : item[2].toBytes()\\n            });\\n        }\\n    }\\n\\n    function decodeTransferOutLog(IEvent.txLog memory log)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.transferOutEvent memory outEvent) {\\n        executorId = Utils.toBytes(log.addr);\\n        outEvent.fromChain = abi.decode(log.topics[1], (uint256));\\n        outEvent.toChain = abi.decode(log.topics[2], (uint256));\\n\\n        (outEvent.orderId, outEvent.token, outEvent.from, outEvent.to, outEvent.amount, outEvent.toChainToken)\\n        = abi.decode(log.data, (bytes32, bytes, bytes, bytes, uint256, bytes));\\n    }\\n\\n    function decodeSwapOutLog(IEvent.txLog memory log)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.swapOutEvent memory outEvent) {\\n        executorId = Utils.toBytes(log.addr);\\n        outEvent.fromChain = abi.decode(log.topics[1], (uint256));\\n        outEvent.toChain = abi.decode(log.topics[2], (uint256));\\n\\n        (outEvent.orderId, outEvent.token, outEvent.from, outEvent.to, outEvent.amount,outEvent.swapData)\\n        = abi.decode(log.data, (bytes32, bytes, bytes, bytes, uint256, bytes));\\n    }\\n\\n    function decodeDepositOutLog(IEvent.txLog memory log)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.depositOutEvent memory depositEvent){\\n        executorId = Utils.toBytes(log.addr);\\n\\n        depositEvent.fromChain = abi.decode(log.topics[1], (uint256));\\n        depositEvent.toChain = abi.decode(log.topics[2], (uint256));\\n\\n        address token;\\n        address toAddress;\\n        (depositEvent.orderId, token, depositEvent.from, toAddress, depositEvent.amount)\\n        = abi.decode(log.data, (bytes32, address, bytes, address, uint256));\\n\\n        depositEvent.token = Utils.toBytes(token);\\n        depositEvent.to = Utils.toBytes(toAddress);\\n\\n    }\\n}\\n\",\"keccak256\":\"0xd1a3b1e411838384a8f9cfa44564fe769909d428b2c13bc40c1e9edf5e38c1f4\",\"license\":\"MIT\"},\"contracts/utils/NearDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/ButterLib.sol\\\";\\nimport \\\"./RLPReader.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"../interface/IEvent.sol\\\";\\n\\nlibrary NearDecoder {\\n\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    bytes32 constant NEAR_TRANSFEROUT = 0x4e87426fdd31a6df84975ed344b2c3fbd45109085f1557dff1156b300f135df8;\\n    bytes32 constant NEAR_DEPOSITOUT = 0x3ad224e3e42a516df08d1fca74990eac30205afb5287a46132a6975ce0b2cede;\\n    bytes32 constant NEAR_SWAPOUT = 0x525e2d5d6e874e1f98c7b3e9a12be276d31598c25f92fb38ce6af0c1591371c4;\\n\\n    function decodeNearLog(bytes memory logsHash)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.transferOutEvent[] memory _outEvents){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n\\n        require(ls.length >= 2, \\\"logsHash length to low\\\");\\n\\n        executorId = ls[0].toBytes();\\n\\n        bytes[] memory logs = new bytes[](ls[1].toList().length);\\n        for (uint256 i = 0; i < ls[1].toList().length; i++) {\\n            logs[i] = ls[1].toList()[i].toBytes();\\n        }\\n        bytes memory log;\\n\\n        _outEvents = new IEvent.transferOutEvent[](logs.length);\\n        for (uint256 i = 0; i < logs.length; i++) {\\n\\n            (bytes memory temp) = Utils.splitExtra(logs[i]);\\n            if (keccak256(temp) == NEAR_TRANSFEROUT) {\\n                log = Utils.hexStrToBytes(logs[i]);\\n                RLPReader.RLPItem[] memory logList = log.toRlpItem().toList();\\n\\n                require(logList.length >= 8, \\\"logsHash length to low\\\");\\n\\n                IEvent.transferOutEvent memory _outEvent = IEvent.transferOutEvent({\\n                fromChain : logList[0].toUint(),\\n                toChain : logList[1].toUint(),\\n                orderId : bytes32(logList[2].toBytes()),\\n                token : logList[3].toBytes(),\\n                from : logList[4].toBytes(),\\n                to : logList[5].toBytes(),\\n                amount : logList[6].toUint(),\\n                toChainToken : logList[7].toBytes()\\n                });\\n                _outEvents[i] = _outEvent;\\n            }\\n        }\\n    }\\n\\n    function decodeNearSwapLog(bytes memory logsHash)\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.swapOutEvent[] memory _outEvents){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n\\n        require(ls.length >= 2, \\\"logsHash length to low\\\");\\n\\n        executorId = ls[0].toBytes();\\n\\n        bytes[] memory logs = new bytes[](ls[1].toList().length);\\n        for (uint256 i = 0; i < ls[1].toList().length; i++) {\\n            logs[i] = ls[1].toList()[i].toBytes();\\n        }\\n        bytes memory log;\\n\\n        _outEvents = new IEvent.swapOutEvent[](logs.length);\\n        for (uint256 i = 0; i < logs.length; i++) {\\n\\n            (bytes memory temp) = Utils.splitExtra(logs[i]);\\n            if (keccak256(temp) == NEAR_SWAPOUT) {\\n                log = Utils.hexStrToBytes(logs[i]);\\n                RLPReader.RLPItem[] memory logList = log.toRlpItem().toList();\\n\\n                require(logList.length >= 8, \\\"logsHash length to low\\\");\\n\\n                IEvent.swapOutEvent memory _outEvent = IEvent.swapOutEvent({\\n                fromChain : logList[0].toUint(),\\n                toChain : logList[1].toUint(),\\n                orderId : bytes32(logList[2].toBytes()),\\n                token : logList[3].toBytes(),\\n                from : logList[4].toBytes(),\\n                to : logList[5].toBytes(),\\n                amount : logList[6].toUint(),\\n                swapData : logList[7].toBytes()\\n                });\\n                _outEvents[i] = _outEvent;\\n            }\\n        }\\n\\n    }\\n\\n    function decodeNearDepositLog(bytes memory logsHash)\\n\\n    internal\\n    pure\\n    returns (bytes memory executorId, IEvent.depositOutEvent[] memory _outEvents){\\n        RLPReader.RLPItem[] memory ls = logsHash.toRlpItem().toList();\\n        require(ls.length >= 2, \\\"logsHash length to low\\\");\\n\\n        executorId = ls[0].toBytes();\\n\\n        bytes[] memory logs = new bytes[](ls[1].toList().length);\\n        for (uint256 i = 0; i < ls[1].toList().length; i++) {\\n\\n            logs[i] = ls[1].toList()[i].toBytes();\\n\\n        }\\n        bytes memory log;\\n\\n        _outEvents = new IEvent.depositOutEvent[](logs.length);\\n\\n        for (uint256 i = 0; i < logs.length; i++) {\\n\\n            (bytes memory temp) = Utils.splitExtra(logs[i]);\\n            if (keccak256(temp) == NEAR_DEPOSITOUT) {\\n                log = Utils.hexStrToBytes(logs[i]);\\n                RLPReader.RLPItem[] memory logList = log.toRlpItem().toList();\\n\\n                require(logList.length >= 7, \\\"logsHash length to low\\\");\\n\\n                IEvent.depositOutEvent memory _outEvent = IEvent.depositOutEvent({\\n                fromChain : logList[0].toUint(),\\n                toChain : logList[1].toUint(),\\n                orderId : bytes32(logList[2].toBytes()),\\n\\n                token : logList[3].toBytes(),\\n                from : logList[4].toBytes(),\\n\\n                to : logList[5].toBytes(),\\n                amount : logList[6].toUint()\\n                });\\n                _outEvents[i] = _outEvent;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeda1eb5b4ebeb7f64d709b5e362956ab0b2e578480e57a5016352154cfeac06e\",\"license\":\"MIT\"},\"contracts/utils/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity 0.8.7;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self), \\\"not have next\\\");\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n    internal\\n    pure\\n    returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n    internal\\n    pure\\n    returns (Iterator memory)\\n    {\\n        require(isList(self), \\\"check self list fail\\\");\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset;\\n        // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n    internal\\n    pure\\n    returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"is list fail\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1, \\\"item len is not one\\\");\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"item len is not 21\\\");\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33, \\\"item len is not uint\\\");\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n        // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33, \\\"item is not uint strict\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0, \\\"item len is zero\\\");\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr);\\n            // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n            /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n        // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0651b1bc29f1d6ec5816efe6e276b247b4129a79614c2201f6904888b03a2149\",\"license\":\"MIT\"},\"contracts/utils/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary TransferHelper {\\n    function safeWithdraw(address wtoken, uint value) internal {\\n        (bool success, bytes memory data) = wtoken.call(abi.encodeWithSelector(0x2e1a7d4d, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: WITHDRAW_FAILED');\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x2e6b00d9fad81ec553bea52bb73ae5ec1db35a3a6aa604da944ac8c6167b3473\",\"license\":\"MIT\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./ButterLib.sol\\\";\\n\\nlibrary Utils {\\n    function assembleButterCoreParam(\\n        address _tokenIn,\\n        uint _actualAmountIn,\\n        uint _predicatedAmountIn,\\n        bytes memory _to,\\n        ButterLib.SwapData memory _swapData\\n    )\\n    internal\\n    view\\n    returns (ButterLib.ButterCoreSwapParam memory) {\\n        ButterLib.SwapParam[] memory swapParams = _swapData.swapParams;\\n        uint256[]  memory amountInArr = new uint256[](swapParams.length);\\n        bytes[]  memory paramsArr = new bytes[](swapParams.length);\\n        uint32[]  memory routerIndex = new uint32[](swapParams.length);\\n\\n\\n        // modify swapParam amount in, compensate the difference between actual and predicted amount.\\n        if (_actualAmountIn >= _predicatedAmountIn) {\\n            swapParams[0].amountIn += (_actualAmountIn - _predicatedAmountIn);\\n        } else {\\n            swapParams[0].amountIn -= (_predicatedAmountIn - _actualAmountIn);\\n        }\\n\\n        for (uint i = 0; i < swapParams.length; i++) {\\n\\n            amountInArr[i] = swapParams[i].amountIn;\\n\\n            routerIndex[i] = uint32(swapParams[i].routerIndex);\\n\\n            paramsArr[i] = abi.encode(\\n                amountInArr[i],\\n                swapParams[i].minAmountOut,\\n                abi.decode(swapParams[i].path, (address[])),\\n                Utils.fromBytes(_to),\\n                block.timestamp + 100,\\n                _tokenIn,\\n                Utils.fromBytes(_swapData.targetToken)\\n            );\\n        }\\n\\n        ButterLib.ButterCoreSwapParam memory params = ButterLib.ButterCoreSwapParam({\\n            amountInArr : amountInArr,\\n            paramsArr : paramsArr,\\n            routerIndex : routerIndex,\\n            inputOutAddre : [_tokenIn, Utils.fromBytes(_swapData.targetToken)]\\n        });\\n        return params;\\n\\n    }\\n\\n    function getAmountInSumFromSwapParams(ButterLib.SwapParam[] memory swapParams)\\n    internal\\n    pure\\n    returns (uint sum_)\\n    {\\n        sum_ = 0;\\n        for (uint i = 0; i < swapParams.length; i++) {\\n            sum_ += swapParams[i].amountIn;\\n        }\\n    }\\n\\n    function checkBytes(bytes memory b1, bytes memory b2) internal pure returns (bool){\\n        return keccak256(b1) == keccak256(b2);\\n    }\\n\\n    function fromBytes(bytes memory bys) internal pure returns (address addr){\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n\\n    function toBytes(address self) internal pure returns (bytes memory b) {\\n        b = abi.encodePacked(self);\\n    }\\n\\n    function splitExtra(bytes memory extra)\\n    internal\\n    pure\\n    returns (bytes memory newExtra){\\n        require(extra.length >= 64, \\\"Invalid extra result type\\\");\\n        newExtra = new bytes(64);\\n        for (uint256 i = 0; i < 64; i++) {\\n            newExtra[i] = extra[i];\\n        }\\n    }\\n\\n\\n    function hexStrToBytes(bytes memory _hexStr)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        //Check hex string is valid\\n        if (\\n            _hexStr.length % 2 != 0 ||\\n            _hexStr.length < 4\\n        ) {\\n            revert(\\\"hexStrToBytes: invalid input\\\");\\n        }\\n\\n        bytes memory bytes_array = new bytes(_hexStr.length / 2 - 32);\\n\\n        for (uint256 i = 64; i < _hexStr.length; i += 2) {\\n            uint8 tetrad1 = 16;\\n            uint8 tetrad2 = 16;\\n\\n            //left digit\\n            if (\\n                uint8(_hexStr[i]) >= 48 && uint8(_hexStr[i]) <= 57\\n            ) tetrad1 = uint8(_hexStr[i]) - 48;\\n\\n            //right digit\\n            if (\\n                uint8(_hexStr[i + 1]) >= 48 &&\\n                uint8(_hexStr[i + 1]) <= 57\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 48;\\n\\n            //left A->F\\n            if (\\n                uint8(_hexStr[i]) >= 65 && uint8(_hexStr[i]) <= 70\\n            ) tetrad1 = uint8(_hexStr[i]) - 65 + 10;\\n\\n            //right A->F\\n            if (\\n                uint8(_hexStr[i + 1]) >= 65 &&\\n                uint8(_hexStr[i + 1]) <= 70\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 65 + 10;\\n\\n            //left a->f\\n            if (\\n                uint8(_hexStr[i]) >= 97 &&\\n                uint8(_hexStr[i]) <= 102\\n            ) tetrad1 = uint8(_hexStr[i]) - 97 + 10;\\n\\n            //right a->f\\n            if (\\n                uint8(_hexStr[i + 1]) >= 97 &&\\n                uint8(_hexStr[i + 1]) <= 102\\n            ) tetrad2 = uint8(_hexStr[i + 1]) - 97 + 10;\\n\\n            //Check all symbols are allowed\\n            if (tetrad1 == 16 || tetrad2 == 16)\\n                revert(\\\"hexStrToBytes: invalid input\\\");\\n\\n            bytes_array[i / 2 - 32] = bytes1(16 * tetrad1 + tetrad2);\\n\\n\\n        }\\n\\n        return bytes_array;\\n    }\\n\\n\\n}\",\"keccak256\":\"0xe6647fe1807817c88add5c3a56525128b78dc2d3d6d09d1fedbad7e6ac9c4ca5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c80638d6ffd6a1161010d578063d24c6944116100a0578063d5351aaa1161006f578063d5351aaa1461066b578063d687c35d1461067e578063e63ea4081461069e578063f3fef3a3146106be578063fb0f97a8146106de57600080fd5b8063d24c6944146105d9578063d250185c146105f9578063d33a28a214610636578063d431b1ac1461065657600080fd5b8063affed0e0116100dc578063affed0e014610541578063b899f90414610565578063ca0da31f14610585578063cc9e3e89146105a557600080fd5b80638d6ffd6a146104af5780638f283970146104ec578063981aff4e1461050c578063aaf10f421461052c57600080fd5b80633ea549a2116101905780636af6400d1161015f5780636af6400d146104155780636e9960c314610445578063789728251461045a5780637cb2b79c1461047a578063848cb5c61461049a57600080fd5b80633ea549a214610398578063485cc955146103b85780634f1ef286146103d85780635c975abb146103eb57600080fd5b806333bb7f91116101cc57806333bb7f91146103255780633659cfe6146103385780633d4a2f6e146103585780633e2f1d0f1461036b57600080fd5b80630babd86414610256578063145a6579146102935780632e7ec23f146102f25780632f5c5d5e1461030557600080fd5b36610251576003546001600160a01b0316331461024f5760405162461bcd60e51b815260206004820152600b60248201526a37b7363c903baa37b5b2b760a91b60448201526064015b60405180910390fd5b005b600080fd5b34801561026257600080fd5b50600354610276906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029f57600080fd5b506102d36102ae366004616c0f565b600660205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161028a565b61024f610300366004616e16565b6106fe565b34801561031157600080fd5b5061024f61032036600461674e565b610b1e565b61024f61033336600461674e565b610ba0565b34801561034457600080fd5b5061024f61035336600461674e565b610ce6565b61024f610366366004616dab565b610daf565b34801561037757600080fd5b5061038b610386366004616c0f565b610f02565b60405161028a9190617161565b3480156103a457600080fd5b50600454610276906001600160a01b031681565b3480156103c457600080fd5b5061024f6103d3366004616788565b610f9c565b61024f6103e63660046168a4565b6110df565b3480156103f757600080fd5b5060015462010000900460ff165b604051901515815260200161028a565b34801561042157600080fd5b50610405610430366004616c0f565b60076020526000908152604090205460ff1681565b34801561045157600080fd5b50610276611199565b34801561046657600080fd5b50600554610276906001600160a01b031681565b34801561048657600080fd5b5061024f61049536600461674e565b6111a8565b3480156104a657600080fd5b5061024f61122a565b3480156104bb57600080fd5b506104df6104ca366004616c0f565b60096020526000908152604090205460ff1681565b60405161028a9190617174565b3480156104f857600080fd5b5061024f61050736600461674e565b61126c565b34801561051857600080fd5b5061024f610527366004616979565b6112d4565b34801561053857600080fd5b50610276611416565b34801561054d57600080fd5b5061055760025481565b60405190815260200161028a565b34801561057157600080fd5b5061024f610580366004616802565b611420565b34801561059157600080fd5b5061024f6105a0366004616def565b6115a0565b3480156105b157600080fd5b506105577f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e557600080fd5b5061024f6105f4366004616e16565b61174f565b34801561060557600080fd5b50610619610614366004616ea4565b611a3b565b604080519283526001600160a01b0390911660208301520161028a565b34801561064257600080fd5b5061024f610651366004616e16565b611a96565b34801561066257600080fd5b5061024f611e23565b61024f6106793660046168f3565b611e63565b34801561068a57600080fd5b5061024f610699366004616e46565b611fcc565b3480156106aa57600080fd5b5061024f6106b93660046167c1565b612059565b3480156106ca57600080fd5b5061024f6106d93660046169d8565b6120c3565b3480156106ea57600080fd5b5061024f6106f93660046167c1565b612350565b600260005414156107215760405162461bcd60e51b815260040161024690617432565b600260005560015462010000900460ff161561074f5760405162461bcd60e51b815260040161024690617340565b600554604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a906107869088908890600401617469565b60006040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107da9190810190616b85565b9250925092508282906108005760405162461bcd60e51b81526004016102469190617161565b50600260008681526009602052604090205460ff16600281111561082657610826617797565b141561095d576000806108388361245b565b9150915060005b815181101561095557600082828151811061085c5761085c6177ad565b602002602001015190508060800151600014156108795750610943565b6000898152600860205260409020805461091b91869161089890617707565b80601f01602080910402602001604051908101604052809291908181526020018280546108c490617707565b80156109115780601f106108e657610100808354040283529160200191610911565b820191906000526020600020905b8154815290600101906020018083116108f457829003601f168201915b505050505061280f565b6109375760405162461bcd60e51b81526004016102469061729d565b610941898261282b565b505b8061094d8161773c565b91505061083f565b505050610ac3565b600160008681526009602052604090205460ff16600281111561098257610982617797565b1415610a8857600061099382612b31565b905060005b8151811015610a815760405180608001604052806044815260200161785d60449139805190602001208282815181106109d3576109d36177ad565b6020026020010151602001516000815181106109f1576109f16177ad565b6020026020010151806020019051810190610a0c9190616c28565b1415610a6f57600080610a37848481518110610a2a57610a2a6177ad565b6020026020010151612d7a565b91509150610a5d82600860008c8152602001908152602001600020805461089890617707565b15610a6c57610a6c898261282b565b50505b80610a798161773c565b915050610998565b5050610ac3565b60405162461bcd60e51b815260206004820152601060248201526f31b430b4b7103a3cb8329032b93937b960811b6044820152606401610246565b60405133907f00000000000000000000000000000000000000000000000000000000000000009087907f8c991a6f7ef9e9e8c0cc7f34d5ce0b20ff23538ec4d944e9d065b833982fc78390600090a450506001600055505050565b610b26612e96565b6001600160a01b0316336001600160a01b031614610b565760405162461bcd60e51b815260040161024690617402565b806001600160a01b038116610b7d5760405162461bcd60e51b815260040161024690617317565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610bc35760405162461bcd60e51b815260040161024690617432565b600260005560015462010000900460ff1615610bf15760405162461bcd60e51b815260040161024690617340565b3480610c2f5760405162461bcd60e51b815260206004820152600d60248201526c76616c756520746f6f206c6f7760981b6044820152606401610246565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c7f57600080fd5b505af1158015610c93573d6000803e3d6000fd5b5050600354610cdd93506001600160a01b03169150610cb3905033612ec9565b848460007f0000000000000000000000000000000000000000000000000000000000000000612eff565b50506001600055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d2f5760405162461bcd60e51b8152600401610246906171d3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d61613085565b6001600160a01b031614610d875760405162461bcd60e51b8152600401610246906172cb565b610d90816130ad565b60408051600080825260208201909252610dac9183919061312e565b50565b60015462010000900460ff1615610dd85760405162461bcd60e51b815260040161024690617340565b7f0000000000000000000000000000000000000000000000000000000000000000811415610e3b5760405162461bcd60e51b815260206004820152601060248201526f37b7363c9037ba3432b91031b430b4b760811b6044820152606401610246565b3480610e795760405162461bcd60e51b815260206004820152600d60248201526c76616c756520746f6f206c6f7760981b6044820152606401610246565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b5050600354610efd93506001600160a01b03169150339050858486613272565b505050565b60086020526000908152604090208054610f1b90617707565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4790617707565b8015610f945780601f10610f6957610100808354040283529160200191610f94565b820191906000526020600020905b815481529060010190602001808311610f7757829003601f168201915b505050505081565b600154610100900460ff16610fb75760015460ff1615610fbb565b303b155b61101e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610246565b600154610100900460ff16158015611040576001805461ffff19166101011790555b826001600160a01b0381166110675760405162461bcd60e51b815260040161024690617317565b826001600160a01b03811661108e5760405162461bcd60e51b815260040161024690617317565b600380546001600160a01b038088166001600160a01b03199283161790925560058054928716929091169190911790556110c733613541565b50508015610efd576001805461ff0019169055505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111285760405162461bcd60e51b8152600401610246906171d3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661115a613085565b6001600160a01b0316146111805760405162461bcd60e51b8152600401610246906172cb565b611189826130ad565b6111958282600161312e565b5050565b60006111a3612e96565b905090565b6111b0612e96565b6001600160a01b0316336001600160a01b0316146111e05760405162461bcd60e51b815260040161024690617402565b806001600160a01b0381166112075760405162461bcd60e51b815260040161024690617317565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b611232612e96565b6001600160a01b0316336001600160a01b0316146112625760405162461bcd60e51b815260040161024690617402565b61126a613595565b565b611274612e96565b6001600160a01b0316336001600160a01b0316146112a45760405162461bcd60e51b815260040161024690617402565b806001600160a01b0381166112cb5760405162461bcd60e51b815260040161024690617317565b61119582613541565b60015462010000900460ff16156112fd5760405162461bcd60e51b815260040161024690617340565b7f00000000000000000000000000000000000000000000000000000000000000008114156113605760405162461bcd60e51b815260206004820152601060248201526f37b7363c9037ba3432b91031b430b4b760811b6044820152606401610246565b6040516370a0823160e01b815233600482015282906001600160a01b038616906370a082319060240160206040518083038186803b1580156113a157600080fd5b505afa1580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d99190616c28565b10156113f75760405162461bcd60e51b81526004016102469061721f565b61140384333085613630565b6114108433858585613272565b50505050565b60006111a3613085565b60015462010000900460ff16156114495760405162461bcd60e51b815260040161024690617340565b7f00000000000000000000000000000000000000000000000000000000000000008314156114b55760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b6044820152606401610246565b6040516370a0823160e01b815233600482015284906001600160a01b038816906370a082319060240160206040518083038186803b1580156114f657600080fd5b505afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190616c28565b101561157c5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610246565b61158886333087613630565b61159786868987878787613758565b50505050505050565b6115a8612e96565b6001600160a01b0316336001600160a01b0316146115d85760405162461bcd60e51b815260040161024690617402565b816001600160a01b0381166115ff5760405162461bcd60e51b815260040161024690617317565b600384106116415760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c985d19481a59608a1b6044820152606401610246565b6040805180820182526001600160a01b038581168252602080830186815260008981526006909252938120925183546001600160a01b031916921691909117825591516001909101557f8819ef417987f8ae7a81f42cdfb18815282fe989326fbff903d13cf0e03ace2a547f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a32549180527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f954620f42409261170c9291611706916139ea565b906139ea565b11156114105760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420726174652076616c756560701b6044820152606401610246565b600260005414156117725760405162461bcd60e51b815260040161024690617432565b600260005560015462010000900460ff16156117a05760405162461bcd60e51b815260040161024690617340565b600554604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a906117d79088908890600401617469565b60006040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261182b9190810190616b85565b9250925092508282906118515760405162461bcd60e51b81526004016102469190617161565b50600260008681526009602052604090205460ff16600281111561187757611877617797565b141561192357600080611889836139fd565b9150915060005b81518110156109555760008282815181106118ad576118ad6177ad565b602002602001015190508060800151600014156118ca5750611911565b600089815260086020526040902080546118e991869161089890617707565b6119055760405162461bcd60e51b81526004016102469061729d565b61190f8982613d32565b505b8061191b8161773c565b915050611890565b600160008681526009602052604090205460ff16600281111561194857611948617797565b1415610a8857600061195982612b31565b905060005b8151811015610a8157600082828151811061197b5761197b6177ad565b602002602001015190506000816020015160008151811061199e5761199e6177ad565b60200260200101518060200190518101906119b99190616c28565b90506040518060800160405280604781526020016177ef6047913980519060200120811415611a26576000806119ee846143f9565b91509150611a1482600860008e8152602001908152602001600020805461089890617707565b15611a2357611a238b82613d32565b50505b50508080611a339061773c565b91505061195e565b6000828152600660209081526040808320815180830190925280546001600160a01b03168252600101549181018290528291611a8790620f424090611a819087906144ba565b906144c6565b905190925090505b9250929050565b60026000541415611ab95760405162461bcd60e51b815260040161024690617432565b600260005560015462010000900460ff1615611ae75760405162461bcd60e51b815260040161024690617340565b600554604051637c55b7bd60e11b8152600091829182916001600160a01b03169063f8ab6f7a90611b1e9088908890600401617469565b60006040518083038186803b158015611b3657600080fd5b505afa158015611b4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b729190810190616b85565b925092509250828290611b985760405162461bcd60e51b81526004016102469190617161565b50600260008681526009602052604090205460ff166002811115611bbe57611bbe617797565b1415611c7257600080611bd0836144d2565b9150915060005b8151811015611c6a576000828281518110611bf457611bf46177ad565b60200260200101519050806020015160001415611c115750611c58565b60008981526008602052604090208054611c3091869161089890617707565b611c4c5760405162461bcd60e51b81526004016102469061729d565b611c568982614807565b505b80611c628161773c565b915050611bd7565b505050611dc8565b600160008681526009602052604090205460ff166002811115611c9757611c97617797565b1415610a88576000611ca882612b31565b905060005b8151811015611dc5576000828281518110611cca57611cca6177ad565b6020026020010151905060008160200151600081518110611ced57611ced6177ad565b6020026020010151806020019051810190611d089190616c28565b90506040518060800160405280604381526020016178a16043913980519060200120811415611db057600080611d3d84614f20565b91509150611d6382600860008e8152602001908152602001600020805461089890617707565b611d7f5760405162461bcd60e51b81526004016102469061729d565b60008b81526008602052604090208054611d9e91849161089890617707565b15611dad57611dad8b82614807565b50505b50508080611dbd9061773c565b915050611cad565b50505b60405133907f00000000000000000000000000000000000000000000000000000000000000009087907f8131e5b107f7021b0773c1108755872d7b94bb31532fdf2256e0a3ef2c890a3d90600090a450506001600055505050565b611e2b612e96565b6001600160a01b0316336001600160a01b031614611e5b5760405162461bcd60e51b815260040161024690617402565b61126a614fe4565b60015462010000900460ff1615611e8c5760405162461bcd60e51b815260040161024690617340565b7f0000000000000000000000000000000000000000000000000000000000000000831415611ef85760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba1039bbb0b8103a379039b2b6331031b430b4b760391b6044820152606401610246565b3480611f3e5760405162461bcd60e51b815260206004820152601560248201527453656e64696e672076616c7565206973207a65726f60581b6044820152606401610246565b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f8e57600080fd5b505af1158015611fa2573d6000803e3d6000fd5b5050600354611fc493506001600160a01b031691508790508884888888613758565b505050505050565b611fd4612e96565b6001600160a01b0316336001600160a01b0316146120045760405162461bcd60e51b815260040161024690617402565b600083815260086020908152604090912083516120239285019061651e565b506000838152600960205260409020805482919060ff1916600183600281111561204f5761204f617797565b0217905550505050565b612061612e96565b6001600160a01b0316336001600160a01b0316146120915760405162461bcd60e51b815260040161024690617402565b816001600160a01b0381166120b85760405162461bcd60e51b815260040161024690617317565b611410848484615046565b6001600160a01b0382166120e95760405162461bcd60e51b8152600401610246906173cb565b6000826001600160a01b03166310fe9ae86040518163ffffffff1660e01b815260040160206040518083038186803b15801561212457600080fd5b505afa158015612138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215c919061676b565b60048054604051639dc6108f60e01b81526001600160a01b0380851693820193909352929350600092911690639dc6108f9060240160206040518083038186803b1580156121a957600080fd5b505afa1580156121bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e1919061676b565b9050806001600160a01b0316846001600160a01b03161461223a5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103b30bab63a103a37b5b2b760691b6044820152606401610246565b60405163c2507ac160e01b8152600481018490526000906001600160a01b0383169063c2507ac19060240160206040518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b59190616c28565b604051630ad58d2f60e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018690523360448201529091506001600160a01b03831690630ad58d2f90606401600060405180830381600087803b15801561232657600080fd5b505af115801561233a573d6000803e3d6000fd5b50505050612349833383615046565b5050505050565b600260005414156123735760405162461bcd60e51b815260040161024690617432565b600260005560015462010000900460ff16156123a15760405162461bcd60e51b815260040161024690617340565b6040516370a0823160e01b815233600482015281906001600160a01b038516906370a082319060240160206040518083038186803b1580156123e257600080fd5b505afa1580156123f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241a9190616c28565b10156124385760405162461bcd60e51b81526004016102469061721f565b61244483333084613630565b61245183610cb333612ec9565b5050600160005550565b606080600061247161246c85615087565b6150b4565b90506002815110156124955760405162461bcd60e51b81526004016102469061726d565b6124b8816000815181106124ab576124ab6177ad565b60200260200101516151fb565b925060006124df826001815181106124d2576124d26177ad565b60200260200101516150b4565b516001600160401b038111156124f7576124f76177c3565b60405190808252806020026020018201604052801561252a57816020015b60608152602001906001900390816125155790505b50905060005b612546836001815181106124d2576124d26177ad565b518110156125a857612578612567846001815181106124d2576124d26177ad565b82815181106124ab576124ab6177ad565b82828151811061258a5761258a6177ad565b602002602001018190525080806125a09061773c565b915050612530565b50606081516001600160401b038111156125c4576125c46177c3565b60405190808252806020026020018201604052801561263857816020015b6126256040518060e00160405280606081526020016060815260200160008019168152602001600081526020016000815260200160608152602001600081525090565b8152602001906001900390816125e25790505b50935060005b825181101561280657600061266b84838151811061265e5761265e6177ad565b60200260200101516152ae565b805160208201209091507f3ad224e3e42a516df08d1fca74990eac30205afb5287a46132a6975ce0b2cede14156127f3576126be8483815181106126b1576126b16177ad565b6020026020010151615389565b925060006126ce61246c85615087565b90506007815110156126f25760405162461bcd60e51b81526004016102469061726d565b60006040518060e00160405280612715846003815181106124ab576124ab6177ad565b8152602001612730846004815181106124ab576124ab6177ad565b815260200161274b846002815181106124ab576124ab6177ad565b612754906176b7565b815260200161277c8460008151811061276f5761276f6177ad565b6020026020010151615871565b81526020016127978460018151811061276f5761276f6177ad565b81526020016127b2846005815181106124ab576124ab6177ad565b81526020016127cd8460068151811061276f5761276f6177ad565b8152509050808885815181106127e5576127e56177ad565b602002602001018190525050505b50806127fe8161773c565b91505061263e565b50505050915091565b6000818051906020012083805190602001201490505b92915050565b60408082015160008181526007602052919091205460ff16156128605760405162461bcd60e51b815260040161024690617248565b6000818152600760205260409020805460ff191660011790556060820151831461289c5760405162461bcd60e51b81526004016102469061736a565b81608001517f0000000000000000000000000000000000000000000000000000000000000000146128df5760405162461bcd60e51b81526004016102469061736a565b600480546060840151845160405163fb9e6c1360e01b81526000946001600160a01b039094169363fb9e6c139361291a939092909101617469565b60206040518083038186803b15801561293257600080fd5b505afa158015612946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296a919061676b565b90506001600160a01b0381166129925760405162461bcd60e51b81526004016102469061719c565b60048054606085015160c0860151604051633bab639f60e21b81526000946001600160a01b039094169363eead8e7c936129d29388939192909101616f9d565b60206040518083038186803b1580156129ea57600080fd5b505afa1580156129fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a229190616c28565b6004805460405163ceec8cb960e01b81526001600160a01b0386811693820193909352929350169063ceec8cb99060240160206040518083038186803b158015612a6b57600080fd5b505afa158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa39190616b6a565b15612b09576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038316906340c10f1990604401600060405180830381600087803b158015612af057600080fd5b505af1158015612b04573d6000803e3d6000fd5b505050505b612349828560200151612b218760a001516014015190565b8488604001518960600151612eff565b60606000612b4161246c84615087565b905080516001600160401b03811115612b5c57612b5c6177c3565b604051908082528060200260200182016040528015612bba57816020015b612ba7604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b815260200190600190039081612b7a5790505b50915060005b8151811015612d73576000612be08383815181106124d2576124d26177ad565b9050600381511015612c285760405162461bcd60e51b81526020600482015260116024820152706c6f67206c656e67746820746f206c6f7760781b6044820152606401610246565b6000612c40826001815181106124d2576124d26177ad565b9050600081516001600160401b03811115612c5d57612c5d6177c3565b604051908082528060200260200182016040528015612c9057816020015b6060815260200190600190039081612c7b5790505b50905060005b8251811015612ce457612cb48382815181106124ab576124ab6177ad565b828281518110612cc657612cc66177ad565b60200260200101819052508080612cdc9061773c565b915050612c96565b506040518060600160405280612d1385600081518110612d0657612d066177ad565b60200260200101516158f9565b6001600160a01b03168152602001828152602001612d3d856002815181106124ab576124ab6177ad565b815250868581518110612d5257612d526177ad565b60200260200101819052505050508080612d6b9061773c565b915050612bc0565b5050919050565b6060612dbf6040518060e00160405280606081526020016060815260200160008019168152602001600081526020016000815260200160608152602001600081525090565b8251612dca90612ec9565b91508260200151600181518110612de357612de36177ad565b6020026020010151806020019051810190612dfe9190616c28565b6060820152602083015180516002908110612e1b57612e1b6177ad565b6020026020010151806020019051810190612e369190616c28565b8160800181815250506000808460400151806020019051810190612e5a9190616c41565b60c08801526020870191909152604086019290925292509050612e7c82612ec9565b8352612e8781612ec9565b8360a001819052505050915091565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b604051606082811b6bffffffffffffffffffffffff19166020830152906034016040516020818303038152906040529050919050565b60048054604051639dc6108f60e01b81526001600160a01b038981169382019390935260009290911690639dc6108f9060240160206040518083038186803b158015612f4a57600080fd5b505afa158015612f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f82919061676b565b90506001600160a01b038116612faa5760405162461bcd60e51b8152600401610246906173cb565b604051638dbdbe6d60e01b815260048101839052602481018590526001600160a01b038681166044830152821690638dbdbe6d90606401600060405180830381600087803b158015612ffb57600080fd5b505af115801561300f573d6000803e3d6000fd5b50505050866001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000837f5bf7c8229e485fc1aa764dc0e95bb88be5d3589f08d0fb5fca73bd195aecde0e868a8a8a6040516130749493929190617048565b60405180910390a450505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc612eba565b6130b5612e96565b6001600160a01b0316336001600160a01b031614610dac5760405162461bcd60e51b815260206004820152603060248201527f4d41504f6d6e69636861696e5365727669636552656c61793a206f6e6c79204160448201526f646d696e2063616e207570677261646560801b6064820152608401610246565b6000613138613085565b90506131438461594b565b6000835111806131505750815b156131615761315f84846159f3565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661234957805460ff191660011781556040516001600160a01b03831660248201526131e090869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526159f3565b50805460ff191681556131f1613085565b6001600160a01b0316826001600160a01b0316146132695760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610246565b61234985615a18565b6004805460405163204f487760e01b81526001600160a01b0388811693820193909352602481018490526000929091169063204f48779060440160006040518083038186803b1580156132c457600080fd5b505afa1580156132d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133009190810190616d77565b905061331b816040518060200160405280600081525061280f565b156133385760405162461bcd60e51b815260040161024690617394565b6000613345868685615a58565b9050827f00000000000000000000000000000000000000000000000000000000000000007fe23247b10e5cf2e2a6a13352598fae25c889731f3b5eff5fb52184e121b41d54838a6133958b612ec9565b8a8a6040516133a8959493929190616ff9565b60405180910390a36000806133df89877f000000000000000000000000000000000000000000000000000000000000000088615ac8565b6004805460405163ceec8cb960e01b81526001600160a01b038e811693820193909352939550919350169063ceec8cb99060240160206040518083038186803b15801561342b57600080fd5b505afa15801561343f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134639190616b6a565b156134c357604051630852cd8d60e31b8152600481018390526001600160a01b038a16906342966c6890602401600060405180830381600087803b1580156134aa57600080fd5b505af11580156134be573d6000803e3d6000fd5b505050505b847f00000000000000000000000000000000000000000000000000000000000000007f44ff77018688dad4b245e8ab97358ed57ed92269952ece7ffd321366ce078622856135108d612ec9565b6135198d612ec9565b8c878b60405161352e969594939291906170fb565b60405180910390a3505050505050505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61356a612e96565b604080516001600160a01b03928316815291841660208301520160405180910390a1610dac81615df1565b60015462010000900460ff166135e45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610246565b6001805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916136949190616f4d565b6000604051808303816000865af19150503d80600081146136d1576040519150601f19603f3d011682016040523d82523d6000602084013e6136d6565b606091505b50915091508180156137005750805115806137005750808060200190518101906137009190616b6a565b611fc45760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b6064820152608401610246565b6004805460405163204f487760e01b81526001600160a01b038a811693820193909352602481018690526000929091169063204f48779060440160006040518083038186803b1580156137aa57600080fd5b505afa1580156137be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137e69190810190616d77565b9050613801816040518060200160405280600081525061280f565b1561384e5760405162461bcd60e51b815260206004820152601860248201527f4f757420746f6b656e206e6f74207265676973746572656400000000000000006044820152606401610246565b60008061387d8a887f000000000000000000000000000000000000000000000000000000000000000089615ac8565b6004805460405163ceec8cb960e01b81526001600160a01b038f811693820193909352939550919350169063ceec8cb99060240160206040518083038186803b1580156138c957600080fd5b505afa1580156138dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139019190616b6a565b1561396157604051630852cd8d60e31b8152600481018390526001600160a01b038b16906342966c6890602401600060405180830381600087803b15801561394857600080fd5b505af115801561395c573d6000803e3d6000fd5b505050505b600061396e898b89615a58565b9050867f00000000000000000000000000000000000000000000000000000000000000007fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a583876139be8e612ec9565b8f888d8d6040516139d5979695949392919061707d565b60405180910390a35050505050505050505050565b60006139f68284617501565b9392505050565b6060806000613a0e61246c85615087565b9050600281511015613a325760405162461bcd60e51b81526004016102469061726d565b613a48816000815181106124ab576124ab6177ad565b92506000613a62826001815181106124d2576124d26177ad565b516001600160401b03811115613a7a57613a7a6177c3565b604051908082528060200260200182016040528015613aad57816020015b6060815260200190600190039081613a985790505b50905060005b613ac9836001815181106124d2576124d26177ad565b51811015613b1a57613aea612567846001815181106124d2576124d26177ad565b828281518110613afc57613afc6177ad565b60200260200101819052508080613b129061773c565b915050613ab3565b50606081516001600160401b03811115613b3657613b366177c3565b604051908082528060200260200182016040528015613b6f57816020015b613b5c6165a2565b815260200190600190039081613b545790505b50935060005b8251811015612806576000613b9584838151811061265e5761265e6177ad565b805160208201209091507f4e87426fdd31a6df84975ed344b2c3fbd45109085f1557dff1156b300f135df81415613d1f57613bdb8483815181106126b1576126b16177ad565b92506000613beb61246c85615087565b9050600881511015613c0f5760405162461bcd60e51b81526004016102469061726d565b6000604051806101000160405280613c33846003815181106124ab576124ab6177ad565b8152602001613c4e846004815181106124ab576124ab6177ad565b8152602001613c69846002815181106124ab576124ab6177ad565b613c72906176b7565b8152602001613c8d8460008151811061276f5761276f6177ad565b8152602001613ca88460018151811061276f5761276f6177ad565b8152602001613cc3846005815181106124ab576124ab6177ad565b8152602001613cde8460068151811061276f5761276f6177ad565b8152602001613cf9846007815181106124ab576124ab6177ad565b815250905080888581518110613d1157613d116177ad565b602002602001018190525050505b5080613d2a8161773c565b915050613b75565b60408082015160008181526007602052919091205460ff1615613d675760405162461bcd60e51b815260040161024690617248565b6000818152600760205260409020805460ff1916600117905560608201518314613da35760405162461bcd60e51b81526004016102469061736a565b600480546060840151845160405163fb9e6c1360e01b81526000946001600160a01b039094169363fb9e6c1393613dde939092909101617469565b60206040518083038186803b158015613df657600080fd5b505afa158015613e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2e919061676b565b90506001600160a01b038116613e565760405162461bcd60e51b81526004016102469061719c565b60607f000000000000000000000000000000000000000000000000000000000000000084608001511415613e9457613e8d82612ec9565b9050613f5c565b60048054608086015160405163204f487760e01b81526001600160a01b0386811694820194909452602481019190915291169063204f48779060440160006040518083038186803b158015613ee857600080fd5b505afa158015613efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f249190810190616d77565b9050613f3f816040518060200160405280600081525061280f565b15613f5c5760405162461bcd60e51b815260040161024690617394565b60048054606086015160c0870151604051633bab639f60e21b81526000946001600160a01b039094169363eead8e7c93613f9c9389939192909101616f9d565b60206040518083038186803b158015613fb457600080fd5b505afa158015613fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fec9190616c28565b6004805460405163ceec8cb960e01b81526001600160a01b0387811693820193909352929350169063ceec8cb99060240160206040518083038186803b15801561403557600080fd5b505afa158015614049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406d9190616b6a565b156140d3576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038416906340c10f1990604401600060405180830381600087803b1580156140ba57600080fd5b505af11580156140ce573d6000803e3d6000fd5b505050505b846080015185606001517fe23247b10e5cf2e2a6a13352598fae25c889731f3b5eff5fb52184e121b41d5487604001518689602001518a60a0015187604051614120959493929190616ff9565b60405180910390a360008061413f858489606001518a60800151615ac8565b915091507f0000000000000000000000000000000000000000000000000000000000000000876080015114156142b75760006141808860a001516014015190565b6003549091506001600160a01b03878116911614156141be576003546141af906001600160a01b031684615e7d565b6141b98184615f93565b614260565b6040516370a0823160e01b815230600482015283906001600160a01b038816906370a082319060240160206040518083038186803b1580156141ff57600080fd5b505afa158015614213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142379190616c28565b10156142555760405162461bcd60e51b81526004016102469061721f565b61426086828561605c565b876080015188606001517f3790accbe9ce42658f962f7e7cfa0e6ae7acbb46014c6e01e1219a08781613758a60400151898c6020015186896040516142a9959493929190616fbe565b60405180910390a3506143ef565b6004805460405163ceec8cb960e01b81526001600160a01b038881169382019390935291169063ceec8cb99060240160206040518083038186803b1580156142fe57600080fd5b505afa158015614312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143369190616b6a565b1561439657604051630852cd8d60e31b8152600481018390526001600160a01b038616906342966c6890602401600060405180830381600087803b15801561437d57600080fd5b505af1158015614391573d6000803e3d6000fd5b505050505b608087015160608801516040808a01518a5160208c015160a08d015193517f44ff77018688dad4b245e8ab97358ed57ed92269952ece7ffd321366ce078622946143e69493929189908d906170fb565b60405180910390a35b5050505050505050565b60606144036165a2565b825161440e90612ec9565b91508260200151600181518110614427576144276177ad565b60200260200101518060200190518101906144429190616c28565b606082015260208301518051600290811061445f5761445f6177ad565b602002602001015180602001905181019061447a9190616c28565b60808201526040830151805161449891602091810182019101616cb9565b60e087015260c086015260a08501526020840152825260408201529092909150565b60006139f6828461763d565b60006139f6828461753e565b60608060006144e361246c85615087565b90506002815110156145075760405162461bcd60e51b81526004016102469061726d565b61451d816000815181106124ab576124ab6177ad565b92506000614537826001815181106124d2576124d26177ad565b516001600160401b0381111561454f5761454f6177c3565b60405190808252806020026020018201604052801561458257816020015b606081526020019060019003908161456d5790505b50905060005b61459e836001815181106124d2576124d26177ad565b518110156145ef576145bf612567846001815181106124d2576124d26177ad565b8282815181106145d1576145d16177ad565b602002602001018190525080806145e79061773c565b915050614588565b50606081516001600160401b0381111561460b5761460b6177c3565b60405190808252806020026020018201604052801561464457816020015b6146316165ea565b8152602001906001900390816146295790505b50935060005b825181101561280657600061466a84838151811061265e5761265e6177ad565b805160208201209091507f525e2d5d6e874e1f98c7b3e9a12be276d31598c25f92fb38ce6af0c1591371c414156147f4576146b08483815181106126b1576126b16177ad565b925060006146c061246c85615087565b90506008815110156146e45760405162461bcd60e51b81526004016102469061726d565b60006040518061010001604052806147088460008151811061276f5761276f6177ad565b81526020016147238460018151811061276f5761276f6177ad565b815260200161473e846002815181106124ab576124ab6177ad565b614747906176b7565b8152602001614762846003815181106124ab576124ab6177ad565b815260200161477d846004815181106124ab576124ab6177ad565b8152602001614798846005815181106124ab576124ab6177ad565b81526020016147b38460068151811061276f5761276f6177ad565b81526020016147ce846007815181106124ab576124ab6177ad565b8152509050808885815181106147e6576147e66177ad565b602002602001018190525050505b50806147ff8161773c565b91505061464a565b60408082015160008181526007602052919091205460ff161561483c5760405162461bcd60e51b815260040161024690617248565b6000818152600760205260409020805460ff19166001179055815183146148755760405162461bcd60e51b81526004016102469061736a565b600480548351606085015160405163fb9e6c1360e01b81526000946001600160a01b039094169363fb9e6c13936148b0939092909101617469565b60206040518083038186803b1580156148c857600080fd5b505afa1580156148dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614900919061676b565b90506001600160a01b0381166149285760405162461bcd60e51b81526004016102469061719c565b604080516060808201835280825260208201526000918101919091528360e0015180602001905181019061495c9190616a04565b6001600160a01b03908116604085018190526020850192909252918352908316146149db5760405162461bcd60e51b815260206004820152602960248201527f53776170206f6e204d61702052656c617920436861696e206e6f7420737570706044820152681bdc9d1959081e595d60ba1b6064820152608401610246565b60607f000000000000000000000000000000000000000000000000000000000000000085602001511415614a1957614a1283612ec9565b9050614ae1565b60048054602087015160405163204f487760e01b81526001600160a01b0387811694820194909452602481019190915291169063204f48779060440160006040518083038186803b158015614a6d57600080fd5b505afa158015614a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614aa99190810190616d77565b9050614ac4816040518060200160405280600081525061280f565b15614ae15760405162461bcd60e51b815260040161024690617394565b60048054865160c0880151604051633bab639f60e21b81526000946001600160a01b039094169363eead8e7c93614b1e938a939192909101616f9d565b60206040518083038186803b158015614b3657600080fd5b505afa158015614b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6e9190616c28565b6004805460405163ceec8cb960e01b81526001600160a01b0388811693820193909352929350169063ceec8cb99060240160206040518083038186803b158015614bb757600080fd5b505afa158015614bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bef9190616b6a565b15614c55576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038516906340c10f1990604401600060405180830381600087803b158015614c3c57600080fd5b505af1158015614c50573d6000803e3d6000fd5b505050505b600080614c6c86848a600001518b60200151615ac8565b915091507f000000000000000000000000000000000000000000000000000000000000000088602001511415614de3576000614cad8960a001516014015190565b6003549091506001600160a01b0388811691161415614ceb57600354614cdc906001600160a01b031684615e7d565b614ce68184615f93565b614d8d565b6040516370a0823160e01b815230600482015283906001600160a01b038916906370a082319060240160206040518083038186803b158015614d2c57600080fd5b505afa158015614d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d649190616c28565b1015614d825760405162461bcd60e51b81526004016102469061721f565b614d8d87828561605c565b886040015189602001518a600001517f2a945137b011d4aadec6425788c652197d107fc33f6cdccbb0c269273be9c1c98a8d608001518689604051614dd59493929190616f69565b60405180910390a450614f15565b6004805460405163ceec8cb960e01b81526001600160a01b038981169382019390935291169063ceec8cb99060240160206040518083038186803b158015614e2a57600080fd5b505afa158015614e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e629190616b6a565b15614ec257604051630852cd8d60e31b8152600481018390526001600160a01b038716906342966c6890602401600060405180830381600087803b158015614ea957600080fd5b505af1158015614ebd573d6000803e3d6000fd5b505050505b876020015188600001517fca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a58a60400151878c608001518d60a00151878f60e0015160405161352e969594939291906170fb565b505050505050505050565b6060614f2a6165ea565b8251614f3590612ec9565b91508260200151600181518110614f4e57614f4e6177ad565b6020026020010151806020019051810190614f699190616c28565b8152602083015180516002908110614f8357614f836177ad565b6020026020010151806020019051810190614f9e9190616c28565b8160200181815250508260400151806020019051810190614fbf9190616cb9565b60e087015260c086015260a08501526080840152606083015260408201529092909150565b60015462010000900460ff161561500d5760405162461bcd60e51b815260040161024690617340565b6001805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586136133390565b6003546001600160a01b038481169116141561507c57600354615072906001600160a01b031682615e7d565b610efd8282615f93565b610efd83838361605c565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60606150bf82616170565b6150fa5760405162461bcd60e51b815260206004820152600c60248201526b1a5cc81b1a5cdd0819985a5b60a21b6044820152606401610246565b6000615105836161a9565b90506000816001600160401b03811115615121576151216177c3565b60405190808252806020026020018201604052801561516657816020015b604080518082019091526000808252602082015281526020019060019003908161513f5790505b5090506000615178856020015161622c565b85602001516151879190617501565b90506000805b848110156151f05761519e836162a7565b91506040518060400160405280838152602001848152508482815181106151c7576151c76177ad565b60209081029190910101526151dc8284617501565b9250806151e88161773c565b91505061518d565b509195945050505050565b805160609061523f5760405162461bcd60e51b815260206004820152601060248201526f6974656d206c656e206973207a65726f60801b6044820152606401610246565b60008061524b8461634b565b915091506000816001600160401b03811115615269576152696177c3565b6040519080825280601f01601f191660200182016040528015615293576020820181803683370190505b509050602081016152a5848285616392565b50949350505050565b60606040825110156153025760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420657874726120726573756c742074797065000000000000006044820152606401610246565b604080518181526060810182529060208201818036833701905050905060005b60408110156153835782818151811061533d5761533d6177ad565b602001015160f81c60f81b82828151811061535a5761535a6177ad565b60200101906001600160f81b031916908160001a9053508061537b8161773c565b915050615322565b50919050565b6060600282516153999190617757565b1515806153a7575060048251105b156153f45760405162461bcd60e51b815260206004820152601c60248201527f686578537472546f42797465733a20696e76616c696420696e707574000000006044820152606401610246565b6000602060028451615406919061753e565b615410919061767d565b6001600160401b03811115615427576154276177c3565b6040519080825280601f01601f191660200182016040528015615451576020820181803683370190505b50905060405b835181101561586a578351601090819060309087908590811061547c5761547c6177ad565b016020015160f81c108015906154ac575060398684815181106154a1576154a16177ad565b016020015160f81c11155b156154da5760308684815181106154c5576154c56177ad565b01602001516154d7919060f81c617694565b91505b6030866154e8856001617501565b815181106154f8576154f86177ad565b016020015160f81c108015906155325750603986615517856001617501565b81518110615527576155276177ad565b016020015160f81c11155b1561556a57603086615545856001617501565b81518110615555576155556177ad565b0160200151615567919060f81c617694565b90505b604186848151811061557e5761557e6177ad565b016020015160f81c108015906155ae575060468684815181106155a3576155a36177ad565b016020015160f81c11155b156155e75760418684815181106155c7576155c76177ad565b01602001516155d9919060f81c617694565b6155e490600a617519565b91505b6041866155f5856001617501565b81518110615605576156056177ad565b016020015160f81c1080159061563f5750604686615624856001617501565b81518110615634576156346177ad565b016020015160f81c11155b1561568257604186615652856001617501565b81518110615662576156626177ad565b0160200151615674919060f81c617694565b61567f90600a617519565b90505b6061868481518110615696576156966177ad565b016020015160f81c108015906156c6575060668684815181106156bb576156bb6177ad565b016020015160f81c11155b156156ff5760618684815181106156df576156df6177ad565b01602001516156f1919060f81c617694565b6156fc90600a617519565b91505b60618661570d856001617501565b8151811061571d5761571d6177ad565b016020015160f81c10801590615757575060668661573c856001617501565b8151811061574c5761574c6177ad565b016020015160f81c11155b1561579a5760618661576a856001617501565b8151811061577a5761577a6177ad565b016020015161578c919060f81c617694565b61579790600a617519565b90505b8160ff16601014806157af57508060ff166010145b156157fc5760405162461bcd60e51b815260206004820152601c60248201527f686578537472546f42797465733a20696e76616c696420696e707574000000006044820152606401610246565b8061580883601061765c565b6158129190617519565b60f81b84602061582360028761753e565b61582d919061767d565b8151811061583d5761583d6177ad565b60200101906001600160f81b031916908160001a90535050506002816158639190617501565b9050615457565b5092915050565b80516000901580159061588657508151602110155b6158c95760405162461bcd60e51b81526020600482015260146024820152731a5d195b481b195b881a5cc81b9bdd081d5a5b9d60621b6044820152606401610246565b6000806158d58461634b565b8151919350915060208210156158f15760208290036101000a90045b949350505050565b80516000906015146159425760405162461bcd60e51b81526020600482015260126024820152716974656d206c656e206973206e6f7420323160701b6044820152606401610246565b61282582615871565b803b6159af5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610246565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606139f6838360405180606001604052806027815260200161783660279139616411565b615a218161594b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6002805460009130919083615a6c8361773c565b919050557f0000000000000000000000000000000000000000000000000000000000000000848787604051602001615aa996959493929190616ef2565b6040516020818303038152906040528051906020012090509392505050565b60048054604051639dc6108f60e01b81526001600160a01b038088169382019390935260009283928892849290911690639dc6108f9060240160206040518083038186803b158015615b1957600080fd5b505afa158015615b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615b51919061676b565b90506001600160a01b038116615b795760405162461bcd60e51b8152600401610246906173cb565b60048054604051631917961760e01b81526000926001600160a01b0390921691631917961791615baf9187918d918c9101616f9d565b60206040518083038186803b158015615bc757600080fd5b505afa158015615bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615bff9190616c28565b9050600080828a1115615ca157615c16838b61767d565b600480546040516331b1ee7f60e21b81529294506001600160a01b03169163c6c7b9fc91615c4a91899187918e9101616f9d565b60206040518083038186803b158015615c6257600080fd5b505afa158015615c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c9a9190616c28565b9050615ca5565b8992505b60008315615d43576000615cba600086611a3b565b509050615cc7818661767d565b9150600080615cd7600188611a3b565b91509150600082118015615cf357506001600160a01b03811615155b15615d0357615d03898284615046565b600080615d1160028a611a3b565b91509150600082118015615d2d57506001600160a01b03811615155b15615d3d57615d3d8b8284615046565b50505050505b6040516328ab490d60e01b8152600481018b9052602481018c9052604481018a9052606481018490527f0000000000000000000000000000000000000000000000000000000000000000608482015260a481018290526001600160a01b038616906328ab490d9060c401600060405180830381600087803b158015615dc757600080fd5b505af1158015615ddb573d6000803e3d6000fd5b50949e939d50929b505050505050505050505050565b6001600160a01b038116615e565760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610246565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036159d2565b600080836001600160a01b0316632e1a7d4d84604051602401615ea291815260200190565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051615edb9190616f4d565b6000604051808303816000865af19150503d8060008114615f18576040519150601f19603f3d011682016040523d82523d6000602084013e615f1d565b606091505b5091509150818015615f47575080511580615f47575080806020019051810190615f479190616b6a565b6114105760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a2057495448445241575f4641494c4544006044820152606401610246565b604080516000808252602082019092526001600160a01b038416908390604051615fbd9190616f4d565b60006040518083038185875af1925050503d8060008114615ffa576040519150601f19603f3d011682016040523d82523d6000602084013e615fff565b606091505b5050905080610efd5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610246565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916160b89190616f4d565b6000604051808303816000865af19150503d80600081146160f5576040519150601f19603f3d011682016040523d82523d6000602084013e6160fa565b606091505b50915091508180156161245750805115806161245750808060200190518101906161249190616b6a565b6123495760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006044820152606401610246565b805160009061618157506000919050565b6020820151805160001a9060c082101561619f575060009392505050565b5060019392505050565b80516000906161ba57506000919050565b6000806161ca846020015161622c565b84602001516161d99190617501565b90506000846000015185602001516161f19190617501565b90505b8082101561622357616205826162a7565b61620f9083617501565b91508261621b8161773c565b9350506161f4565b50909392505050565b8051600090811a60808110156162455750600092915050565b60b8811080616260575060c08110801590616260575060f881105b1561626e5750600192915050565b60c081101561629b57616283600160b8617694565b6162909060ff168261767d565b6139f6906001617501565b616283600160f8617694565b80516000908190811a60808110156162c2576001915061586a565b60b88110156162e8576162d660808261767d565b6162e1906001617501565b915061586a565b60c08110156163155760b78103600185019450806020036101000a8551046001820181019350505061586a565b60f8811015616329576162d660c08261767d565b60019390930151602084900360f7016101000a900490920160f5190192915050565b600080600061635d846020015161622c565b905060008185602001516163719190617501565b90506000828660000151616385919061767d565b9196919550909350505050565b8061639c57505050565b602081106163d457825182526163b3602084617501565b92506163c0602083617501565b91506163cd60208261767d565b905061639c565b8015610efd57600060016163e983602061767d565b6163f590610100617595565b6163ff919061767d565b84518451821691191617835250505050565b6060833b6164705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610246565b600080856001600160a01b03168560405161648b9190616f4d565b600060405180830381855af49150503d80600081146164c6576040519150601f19603f3d011682016040523d82523d6000602084013e6164cb565b606091505b50915091506164db8282866164e5565b9695505050505050565b606083156164f45750816139f6565b8251156165045782518084602001fd5b8160405162461bcd60e51b81526004016102469190617161565b82805461652a90617707565b90600052602060002090601f01602090048101928261654c5760008555616592565b82601f1061656557805160ff1916838001178555616592565b82800160010185558215616592579182015b82811115616592578251825591602001919060010190616577565b5061659e929150616632565b5090565b60405180610100016040528060608152602001606081526020016000801916815260200160008152602001600081526020016060815260200160008152602001606081525090565b60405180610100016040528060008152602001600081526020016000801916815260200160608152602001606081526020016060815260200160008152602001606081525090565b5b8082111561659e5760008155600101616633565b600061665a616655846174da565b6174aa565b905082815283838301111561666e57600080fd5b6139f68360208301846176db565b8051616687816177d9565b919050565b8051801515811461668757600080fd5b60008083601f8401126166ae57600080fd5b5081356001600160401b038111156166c557600080fd5b602083019150836020828501011115611a8f57600080fd5b600082601f8301126166ee57600080fd5b81356166fc616655826174da565b81815284602083860101111561671157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261673f57600080fd5b6139f683835160208501616647565b60006020828403121561676057600080fd5b81356139f6816177d9565b60006020828403121561677d57600080fd5b81516139f6816177d9565b6000806040838503121561679b57600080fd5b82356167a6816177d9565b915060208301356167b6816177d9565b809150509250929050565b6000806000606084860312156167d657600080fd5b83356167e1816177d9565b925060208401356167f1816177d9565b929592945050506040919091013590565b600080600080600080600060c0888a03121561681d57600080fd5b8735616828816177d9565b96506020880135616838816177d9565b955060408801356001600160401b038082111561685457600080fd5b6168608b838c016166dd565b965060608a0135955060808a0135945060a08a013591508082111561688457600080fd5b506168918a828b0161669c565b989b979a50959850939692959293505050565b600080604083850312156168b757600080fd5b82356168c2816177d9565b915060208301356001600160401b038111156168dd57600080fd5b6168e9858286016166dd565b9150509250929050565b60008060008060006080868803121561690b57600080fd5b8535616916816177d9565b945060208601356001600160401b038082111561693257600080fd5b61693e89838a016166dd565b955060408801359450606088013591508082111561695b57600080fd5b506169688882890161669c565b969995985093965092949392505050565b6000806000806080858703121561698f57600080fd5b843561699a816177d9565b935060208501356001600160401b038111156169b557600080fd5b6169c1878288016166dd565b949794965050505060408301359260600135919050565b600080604083850312156169eb57600080fd5b82356169f6816177d9565b946020939093013593505050565b600080600060608486031215616a1957600080fd5b83516001600160401b0380821115616a3057600080fd5b818601915086601f830112616a4457600080fd5b815181811115616a5657616a566177c3565b616a6560208260051b016174aa565b80828252602082019150602085018a60208560051b8801011115616a8857600080fd5b60005b84811015616b2a57815186811115616aa257600080fd5b87016080818e03601f19011215616ab857600080fd5b616ac0617482565b6020820151815260408201516020820152606082015188811115616ae357600080fd5b616af28f60208386010161672e565b604083015250608082015191508782168214616b0d57600080fd5b606081019190915284526020938401939190910190600101616a8b565b505060208901519097509350505080821115616b4557600080fd5b50616b528682870161672e565b925050616b616040850161667c565b90509250925092565b600060208284031215616b7c57600080fd5b6139f68261668c565b600080600060608486031215616b9a57600080fd5b616ba38461668c565b925060208401516001600160401b0380821115616bbf57600080fd5b818601915086601f830112616bd357600080fd5b616be287835160208501616647565b93506040860151915080821115616bf857600080fd5b50616c058682870161672e565b9150509250925092565b600060208284031215616c2157600080fd5b5035919050565b600060208284031215616c3a57600080fd5b5051919050565b600080600080600060a08688031215616c5957600080fd5b855194506020860151616c6b816177d9565b60408701519094506001600160401b03811115616c8757600080fd5b616c938882890161672e565b9350506060860151616ca4816177d9565b80925050608086015190509295509295909350565b60008060008060008060c08789031215616cd257600080fd5b8651955060208701516001600160401b0380821115616cf057600080fd5b616cfc8a838b0161672e565b96506040890151915080821115616d1257600080fd5b616d1e8a838b0161672e565b95506060890151915080821115616d3457600080fd5b616d408a838b0161672e565b94506080890151935060a0890151915080821115616d5d57600080fd5b50616d6a89828a0161672e565b9150509295509295509295565b600060208284031215616d8957600080fd5b81516001600160401b03811115616d9f57600080fd5b6158f18482850161672e565b60008060408385031215616dbe57600080fd5b82356001600160401b03811115616dd457600080fd5b616de0858286016166dd565b95602094909401359450505050565b600080600060608486031215616e0457600080fd5b8335925060208401356167f1816177d9565b60008060408385031215616e2957600080fd5b8235915060208301356001600160401b038111156168dd57600080fd5b600080600060608486031215616e5b57600080fd5b8335925060208401356001600160401b03811115616e7857600080fd5b616e84868287016166dd565b925050604084013560038110616e9957600080fd5b809150509250925092565b60008060408385031215616eb757600080fd5b50508035926020909101359150565b60008151808452616ede8160208601602086016176db565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352876014840152866034840152856054840152808560601b166074840152508251616f3b8160888501602087016176db565b91909101608801979650505050505050565b60008251616f5f8184602087016176db565b9190910192915050565b600060018060a01b03808716835260806020840152616f8b6080840187616ec6565b94166040830152506060015292915050565b6001600160a01b039390931683526020830191909152604082015260600190565b858152600060018060a01b03808716602084015260a06040840152616fe660a0840187616ec6565b9416606083015250608001529392505050565b8581526001600160a01b038516602082015260a06040820181905260009061702390830186616ec6565b82810360608401526170358186616ec6565b9150508260808301529695505050505050565b8481526080602082015260006170616080830186616ec6565b6001600160a01b03949094166040830152506060015292915050565b87815260c06020820152600061709660c0830189616ec6565b82810360408401526170a88189616ec6565b905082810360608401526170bc8188616ec6565b905085608084015282810360a0840152838152838560208301376000602085830101526020601f19601f86011682010191505098975050505050505050565b86815260c06020820152600061711460c0830188616ec6565b82810360408401526171268188616ec6565b9050828103606084015261713a8187616ec6565b905084608084015282810360a08401526171548185616ec6565b9998505050505050505050565b6020815260006139f66020830184616ec6565b602081016003831061719657634e487b7160e01b600052602160045260246000fd5b91905290565b60208082526018908201527f6d617020746f6b656e206e6f7420726567697374657265640000000000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252600f908201526e62616c616e636520746f6f206c6f7760881b604082015260600190565b6020808252600b908201526a1bdc99195c88195e1a5cdd60aa1b604082015260600190565b6020808252601690820152756c6f677348617368206c656e67746820746f206c6f7760501b604082015260600190565b6020808252601490820152731a5b9d985b1a59081b5bdcc818dbdb9d1c9858dd60621b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e61646472657373206973207a65726f60881b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526010908201526f1a5b9d985b1a590818da185a5b881a5960821b604082015260600190565b60208082526018908201527f6f757420746f6b656e206e6f7420726567697374657265640000000000000000604082015260600190565b6020808252601a908201527f7661756c7420746f6b656e206e6f742072656769737465726564000000000000604082015260600190565b60208082526016908201527536b7b9a932b630bc901d1d1037b7363c9030b236b4b760511b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8281526040602082015260006158f16040830184616ec6565b604051608081016001600160401b03811182821017156174a4576174a46177c3565b60405290565b604051601f8201601f191681016001600160401b03811182821017156174d2576174d26177c3565b604052919050565b60006001600160401b038211156174f3576174f36177c3565b50601f01601f191660200190565b600082198211156175145761751461776b565b500190565b600060ff821660ff84168060ff038211156175365761753661776b565b019392505050565b60008261754d5761754d617781565b500490565b600181815b8085111561758d5781600019048211156175735761757361776b565b8085161561758057918102915b93841c9390800290617557565b509250929050565b60006139f683836000826175ab57506001612825565b816175b857506000612825565b81600181146175ce57600281146175d8576175f4565b6001915050612825565b60ff8411156175e9576175e961776b565b50506001821b612825565b5060208310610133831016604e8410600b8410161715617617575081810a612825565b6176218383617552565b80600019048211156176355761763561776b565b029392505050565b60008160001904831182151516156176575761765761776b565b500290565b600060ff821660ff84168160ff04811182151516156176355761763561776b565b60008282101561768f5761768f61776b565b500390565b600060ff821660ff8416808210156176ae576176ae61776b565b90039392505050565b805160208083015191908110156153835760001960209190910360031b1b16919050565b60005b838110156176f65781810151838201526020016176de565b838111156114105750506000910152565b600181811c9082168061771b57607f821691505b6020821081141561538357634e487b7160e01b600052602260045260246000fd5b60006000198214156177505761775061776b565b5060010190565b60008261776657617766617781565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dac57600080fdfe6d61705472616e736665724f75742875696e743235362c75696e743235362c627974657333322c62797465732c62797465732c62797465732c75696e743235362c627974657329416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65646d61704465706f7369744f75742875696e743235362c75696e743235362c627974657333322c616464726573732c62797465732c616464726573732c75696e74323536296d6170537761704f75742875696e743235362c75696e743235362c627974657333322c62797465732c62797465732c62797465732c75696e743235362c627974657329a2646970667358221220a9a1f9694cbf4628ea1dbb72d4a9ef92606919a8b1b173f0cb6703924c58da2f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1003,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 747,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 750,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 918,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "_paused",
        "offset": 2,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2659,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2661,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "wToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2664,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "tokenRegister",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITokenRegisterV2)5438"
      },
      {
        "astId": 2667,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "lightClientManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ILightClientManager)5202"
      },
      {
        "astId": 2672,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "distributeRate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Rate)2649_storage)"
      },
      {
        "astId": 2676,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "orderList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2680,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "mosContracts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 2685,
        "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
        "label": "chainTypes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_enum(chainType)2653)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILightClientManager)5202": {
        "encoding": "inplace",
        "label": "contract ILightClientManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenRegisterV2)5438": {
        "encoding": "inplace",
        "label": "contract ITokenRegisterV2",
        "numberOfBytes": "20"
      },
      "t_enum(chainType)2653": {
        "encoding": "inplace",
        "label": "enum MAPOmnichainServiceRelayV2.chainType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_enum(chainType)2653)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum MAPOmnichainServiceRelayV2.chainType)",
        "numberOfBytes": "32",
        "value": "t_enum(chainType)2653"
      },
      "t_mapping(t_uint256,t_struct(Rate)2649_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MAPOmnichainServiceRelayV2.Rate)",
        "numberOfBytes": "32",
        "value": "t_struct(Rate)2649_storage"
      },
      "t_struct(Rate)2649_storage": {
        "encoding": "inplace",
        "label": "struct MAPOmnichainServiceRelayV2.Rate",
        "members": [
          {
            "astId": 2646,
            "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2648,
            "contract": "contracts/MAPOmnichainServiceRelayV2.sol:MAPOmnichainServiceRelayV2",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}